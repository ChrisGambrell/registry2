{
	"name": "files",
	"type": "registry:block",
	"dependencies": [
		"@aws-sdk/client-s3",
		"@aws-sdk/s3-request-presigner",
		"@prisma/client",
		"@radix-ui/react-alert-dialog",
		"@radix-ui/react-checkbox",
		"@radix-ui/react-dialog",
		"@radix-ui/react-label",
		"@radix-ui/react-popover",
		"@radix-ui/react-select",
		"@radix-ui/react-slot",
		"@t3-oss/env-nextjs",
		"cmdk",
		"dotenv",
		"next-themes",
		"sonner",
		"uuid",
		"zod"
	],
	"devDependencies": ["prisma", "tsx"],
	"registryDependencies": [
		"alert-dialog",
		"button",
		"card",
		"checkbox",
		"command",
		"dialog",
		"input",
		"label",
		"popover",
		"select",
		"sonner",
		"textarea",
		"https://r.gambrell.dev"
	],
	"files": [
		{
			"path": "./actions/s3.ts",
			"content": "'use server'\n\nimport { handleFormAction } from '@/components/ui/base/action'\nimport prisma from '@/lib/db'\nimport { env } from '@/lib/env'\nimport { s3 } from '@/lib/s3'\nimport { s3FileSchema } from '@/validators/s3'\nimport { DeleteObjectCommand, GetObjectCommand, PutObjectCommand } from '@aws-sdk/client-s3'\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner'\nimport { Prisma } from '@prisma/client'\nimport { revalidatePath } from 'next/cache'\nimport { v4 as uuidv4 } from 'uuid'\n\nexport const uploadPublicFile = async (_: unknown, formData: FormData) =>\n\thandleFormAction(formData, s3FileSchema, async ({ file }) => {\n\t\tconst Key = uuidv4()\n\t\tconst cmd = new PutObjectCommand({ Bucket: env.AWS_PUBLIC_BUCKET_NAME, Key, ContentType: file.type ?? 'application/octet-stream' })\n\t\tconst url = await getSignedUrl(s3, cmd, { expiresIn: 60 })\n\n\t\tawait prisma.publicFiles\n\t\t\t.create({\n\t\t\t\tdata: {\n\t\t\t\t\tkey: Key,\n\t\t\t\t\toriginal_name: file.name,\n\t\t\t\t\tmime_type: file.type ?? 'application/octet-stream',\n\t\t\t\t\turl: `https://${env.AWS_PUBLIC_BUCKET_NAME}.s3.${env.AWS_REGION}.amazonaws.com/${Key}`,\n\t\t\t\t},\n\t\t\t})\n\t\t\t.then(async () => await fetch(url, { method: 'PUT', body: file }))\n\n\t\trevalidatePath('/example')\n\t})\n\nexport async function deletePublicFile(Key: string) {\n\tawait s3.send(new DeleteObjectCommand({ Bucket: env.AWS_PUBLIC_BUCKET_NAME, Key }))\n\tawait prisma.publicFiles.delete({ where: { key: Key } })\n\trevalidatePath('/example')\n}\n\nexport async function getPrivateFiles(args?: Prisma.PrivateFilesFindManyArgs) {\n\tconst filesFromDb = await prisma.privateFiles.findMany(args)\n\n\tconst files = await Promise.all(\n\t\tfilesFromDb.map(async (f) => ({\n\t\t\t...f,\n\t\t\turl: await getSignedUrl(s3, new GetObjectCommand({ Bucket: env.AWS_PRIVATE_BUCKET_NAME, Key: f.key }), { expiresIn: 60 }),\n\t\t}))\n\t)\n\n\treturn files\n}\n\nexport const uploadPrivateFile = async (_: unknown, formData: FormData) =>\n\thandleFormAction(formData, s3FileSchema, async ({ file }) => {\n\t\tconst Key = uuidv4()\n\t\tconst cmd = new PutObjectCommand({ Bucket: env.AWS_PRIVATE_BUCKET_NAME, Key, ContentType: file.type ?? 'application/octet-stream' })\n\t\tconst url = await getSignedUrl(s3, cmd, { expiresIn: 60 })\n\n\t\tawait prisma.privateFiles\n\t\t\t.create({\n\t\t\t\tdata: { key: Key, original_name: file.name, mime_type: file.type ?? 'application/octet-stream' },\n\t\t\t})\n\t\t\t.then(async () => await fetch(url, { method: 'PUT', body: file }))\n\n\t\trevalidatePath('/example')\n\t})\n\nexport async function deletePrivateFile(Key: string) {\n\tawait s3.send(new DeleteObjectCommand({ Bucket: env.AWS_PRIVATE_BUCKET_NAME, Key }))\n\tawait prisma.privateFiles.delete({ where: { key: Key } })\n\trevalidatePath('/example')\n}\n",
			"type": "registry:example",
			"target": "~/actions/s3.ts"
		},
		{
			"path": "./app/example/client.tsx",
			"content": "'use client'\n\nimport { uploadPrivateFile, uploadPublicFile } from '@/actions/s3'\nimport { ActionButton } from '@/components/ui/base/action-button'\nimport { FormInput } from '@/components/ui/base/form-input'\nimport { useForm } from '@/components/ui/base/use-form'\nimport { s3FileSchema } from '@/validators/s3'\n\nexport function UploadPublicFile() {\n\tconst [state, action] = useForm(uploadPublicFile, s3FileSchema)\n\n\treturn (\n\t\t<form action={action} className='flex gap-2'>\n\t\t\t<FormInput className='flex-1' name='file' type='file' state={state} />\n\t\t\t<ActionButton>Upload</ActionButton>\n\t\t</form>\n\t)\n}\n\nexport function UploadPrivateFile() {\n\tconst [state, action] = useForm(uploadPrivateFile, s3FileSchema)\n\n\treturn (\n\t\t<form action={action} className='flex gap-2'>\n\t\t\t<FormInput className='flex-1' name='file' type='file' state={state} />\n\t\t\t<ActionButton>Upload</ActionButton>\n\t\t</form>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/example/client.tsx"
		},
		{
			"path": "./app/example/page.tsx",
			"content": "import { deletePrivateFile, deletePublicFile, getPrivateFiles } from '@/actions/s3'\nimport { ActionButton } from '@/components/ui/base/action-button'\nimport { buttonVariants } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport prisma from '@/lib/db'\nimport { CloudDownload, Trash2 } from 'lucide-react'\nimport Link from 'next/link'\nimport { UploadPrivateFile, UploadPublicFile } from './client'\n\nexport default async function RootPage() {\n\tconst publicFiles = await prisma.publicFiles.findMany({ orderBy: { created_at: 'asc' } })\n\tconst privateFiles = await getPrivateFiles({ orderBy: { created_at: 'asc' } })\n\n\treturn (\n\t\t<div className='max-w-2xl mx-auto mt-4 grid gap-4'>\n\t\t\t<Card>\n\t\t\t\t<CardHeader>\n\t\t\t\t\t<CardTitle>Public Uploads</CardTitle>\n\t\t\t\t</CardHeader>\n\t\t\t\t<CardContent>\n\t\t\t\t\t<UploadPublicFile />\n\t\t\t\t</CardContent>\n\t\t\t\t<CardContent>\n\t\t\t\t\t<form className='grid divide-y'>\n\t\t\t\t\t\t{publicFiles.map((f) => (\n\t\t\t\t\t\t\t<div key={f.key} className='flex gap-2 items-center py-1'>\n\t\t\t\t\t\t\t\t<div className='flex-1'>\n\t\t\t\t\t\t\t\t\t<div>{f.original_name}</div>\n\t\t\t\t\t\t\t\t\t<div className='text-xs text-muted-foreground italic'>Created {f.created_at.toLocaleString()}</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className='flex'>\n\t\t\t\t\t\t\t\t\t<Link className={buttonVariants({ size: 'sm', variant: 'link' })} href={f.url}>\n\t\t\t\t\t\t\t\t\t\t<CloudDownload />\n\t\t\t\t\t\t\t\t\t\t<span>Download</span>\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t<ActionButton\n\t\t\t\t\t\t\t\t\t\tformAction={deletePublicFile.bind(null, f.key)}\n\t\t\t\t\t\t\t\t\t\tclassName='text-destructive'\n\t\t\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t\t\t\tvariant='link'>\n\t\t\t\t\t\t\t\t\t\t<Trash2 />\n\t\t\t\t\t\t\t\t\t\t<span>Delete</span>\n\t\t\t\t\t\t\t\t\t</ActionButton>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</form>\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t\t<Card>\n\t\t\t\t<CardHeader>\n\t\t\t\t\t<CardTitle>Private Uploads</CardTitle>\n\t\t\t\t</CardHeader>\n\t\t\t\t<CardContent>\n\t\t\t\t\t<UploadPrivateFile />\n\t\t\t\t</CardContent>\n\t\t\t\t<CardContent>\n\t\t\t\t\t<form className='grid divide-y'>\n\t\t\t\t\t\t{privateFiles.map((f) => (\n\t\t\t\t\t\t\t<div key={f.key} className='flex gap-2 items-center py-1'>\n\t\t\t\t\t\t\t\t<div className='flex-1'>\n\t\t\t\t\t\t\t\t\t<div>{f.original_name}</div>\n\t\t\t\t\t\t\t\t\t<div className='text-xs text-muted-foreground italic'>Created {f.created_at.toLocaleString()}</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className='flex'>\n\t\t\t\t\t\t\t\t\t<Link className={buttonVariants({ size: 'sm', variant: 'link' })} href={f.url}>\n\t\t\t\t\t\t\t\t\t\t<CloudDownload />\n\t\t\t\t\t\t\t\t\t\t<span>Download</span>\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t<ActionButton\n\t\t\t\t\t\t\t\t\t\tformAction={deletePrivateFile.bind(null, f.key)}\n\t\t\t\t\t\t\t\t\t\tclassName='text-destructive'\n\t\t\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t\t\t\tvariant='link'>\n\t\t\t\t\t\t\t\t\t\t<Trash2 />\n\t\t\t\t\t\t\t\t\t\t<span>Delete</span>\n\t\t\t\t\t\t\t\t\t</ActionButton>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</form>\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/example/page.tsx"
		},
		{
			"path": "./app/globals.css",
			"content": "@import 'tailwindcss';\n@import 'tw-animate-css';\n\n@custom-variant dark (&:is(.dark *));\n\n@theme inline {\n\t--color-background: var(--background);\n\t--color-foreground: var(--foreground);\n\t--font-sans: var(--font-sans);\n\t--font-mono: var(--font-mono);\n\t--font-serif: var(--font-serif);\n\t--color-sidebar-ring: var(--sidebar-ring);\n\t--color-sidebar-border: var(--sidebar-border);\n\t--color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n\t--color-sidebar-accent: var(--sidebar-accent);\n\t--color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n\t--color-sidebar-primary: var(--sidebar-primary);\n\t--color-sidebar-foreground: var(--sidebar-foreground);\n\t--color-sidebar: var(--sidebar);\n\t--color-chart-5: var(--chart-5);\n\t--color-chart-4: var(--chart-4);\n\t--color-chart-3: var(--chart-3);\n\t--color-chart-2: var(--chart-2);\n\t--color-chart-1: var(--chart-1);\n\t--color-ring: var(--ring);\n\t--color-input: var(--input);\n\t--color-border: var(--border);\n\t--color-destructive: var(--destructive);\n\t--color-accent-foreground: var(--accent-foreground);\n\t--color-accent: var(--accent);\n\t--color-muted-foreground: var(--muted-foreground);\n\t--color-muted: var(--muted);\n\t--color-secondary-foreground: var(--secondary-foreground);\n\t--color-secondary: var(--secondary);\n\t--color-primary-foreground: var(--primary-foreground);\n\t--color-primary: var(--primary);\n\t--color-popover-foreground: var(--popover-foreground);\n\t--color-popover: var(--popover);\n\t--color-card-foreground: var(--card-foreground);\n\t--color-card: var(--card);\n\t--radius: 0.625rem;\n\t--radius-sm: calc(var(--radius) - 4px);\n\t--radius-md: calc(var(--radius) - 2px);\n\t--radius-lg: var(--radius);\n\t--radius-xl: calc(var(--radius) + 4px);\n}\n\n:root {\n\t--background: oklch(1 0 0);\n\t--foreground: oklch(0.145 0 0);\n\t--card: oklch(1 0 0);\n\t--card-foreground: oklch(0.145 0 0);\n\t--popover: oklch(1 0 0);\n\t--popover-foreground: oklch(0.145 0 0);\n\t--primary: oklch(0.205 0 0);\n\t--primary-foreground: oklch(0.985 0 0);\n\t--secondary: oklch(0.97 0 0);\n\t--secondary-foreground: oklch(0.205 0 0);\n\t--muted: oklch(0.97 0 0);\n\t--muted-foreground: oklch(0.556 0 0);\n\t--accent: oklch(0.97 0 0);\n\t--accent-foreground: oklch(0.205 0 0);\n\t--destructive: oklch(0.577 0.245 27.325);\n\t--border: oklch(0.922 0 0);\n\t--input: oklch(0.922 0 0);\n\t--ring: oklch(0.708 0 0);\n\t--chart-1: oklch(0.646 0.222 41.116);\n\t--chart-2: oklch(0.6 0.118 184.704);\n\t--chart-3: oklch(0.398 0.07 227.392);\n\t--chart-4: oklch(0.828 0.189 84.429);\n\t--chart-5: oklch(0.769 0.188 70.08);\n\t--sidebar: oklch(0.985 0 0);\n\t--sidebar-foreground: oklch(0.145 0 0);\n\t--sidebar-primary: oklch(0.205 0 0);\n\t--sidebar-primary-foreground: oklch(0.985 0 0);\n\t--sidebar-accent: oklch(0.97 0 0);\n\t--sidebar-accent-foreground: oklch(0.205 0 0);\n\t--sidebar-border: oklch(0.922 0 0);\n\t--sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n\t--background: oklch(0.145 0 0);\n\t--foreground: oklch(0.985 0 0);\n\t--card: oklch(0.205 0 0);\n\t--card-foreground: oklch(0.985 0 0);\n\t--popover: oklch(0.205 0 0);\n\t--popover-foreground: oklch(0.985 0 0);\n\t--primary: oklch(0.922 0 0);\n\t--primary-foreground: oklch(0.205 0 0);\n\t--secondary: oklch(0.269 0 0);\n\t--secondary-foreground: oklch(0.985 0 0);\n\t--muted: oklch(0.269 0 0);\n\t--muted-foreground: oklch(0.708 0 0);\n\t--accent: oklch(0.269 0 0);\n\t--accent-foreground: oklch(0.985 0 0);\n\t--destructive: oklch(0.704 0.191 22.216);\n\t--border: oklch(1 0 0 / 10%);\n\t--input: oklch(1 0 0 / 15%);\n\t--ring: oklch(0.556 0 0);\n\t--chart-1: oklch(0.488 0.243 264.376);\n\t--chart-2: oklch(0.696 0.17 162.48);\n\t--chart-3: oklch(0.769 0.188 70.08);\n\t--chart-4: oklch(0.627 0.265 303.9);\n\t--chart-5: oklch(0.645 0.246 16.439);\n\t--sidebar: oklch(0.205 0 0);\n\t--sidebar-foreground: oklch(0.985 0 0);\n\t--sidebar-primary: oklch(0.488 0.243 264.376);\n\t--sidebar-primary-foreground: oklch(0.985 0 0);\n\t--sidebar-accent: oklch(0.269 0 0);\n\t--sidebar-accent-foreground: oklch(0.985 0 0);\n\t--sidebar-border: oklch(1 0 0 / 10%);\n\t--sidebar-ring: oklch(0.556 0 0);\n}\n\n@layer base {\n\t* {\n\t\t@apply border-border outline-ring/50;\n\t}\n\tbody {\n\t\t@apply bg-background text-foreground;\n\t}\n}\n",
			"type": "registry:example",
			"target": "./app/globals.css"
		},
		{
			"path": "./app/layout.tsx",
			"content": "import '@/lib/env'\nimport type { Metadata } from 'next'\nimport { Geist, Geist_Mono } from 'next/font/google'\nimport './globals.css'\n\nconst geistSans = Geist({\n\tvariable: '--font-geist-sans',\n\tsubsets: ['latin'],\n})\n\nconst geistMono = Geist_Mono({\n\tvariable: '--font-geist-mono',\n\tsubsets: ['latin'],\n})\n\nexport const metadata: Metadata = {\n\ttitle: 'Create Next App',\n\tdescription: 'Generated by create next app',\n}\n\nexport default function RootLayout({\n\tchildren,\n}: Readonly<{\n\tchildren: React.ReactNode\n}>) {\n\treturn (\n\t\t<html lang='en'>\n\t\t\t<body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>{children}</body>\n\t\t</html>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/layout.tsx"
		},
		{
			"path": "./docker-compose.yml",
			"content": "version: '3.9'\n\nservices:\n    db:\n        image: postgres\n        ports:\n            - '5432:5432'\n        restart: always\n        shm_size: 128mb\n        environment:\n            POSTGRES_USER: postgres\n            POSTGRES_PASSWORD: password\n            POSTGRES_DB: postgres\n",
			"type": "registry:example",
			"target": "~/docker-compose.yml"
		},
		{
			"path": "./example.env",
			"content": "# https://console.aws.amazon.com/console\nAWS_ACCESS_KEY_ID=\"\"\nAWS_SECRET_ACCESS_KEY=\"\"\nAWS_REGION=\"us-east-1\"\nAWS_PUBLIC_BUCKET_NAME=\"public\"\nAWS_PRIVATE_BUCKET_NAME=\"private\"\n\nDATABASE_URL=\"postgresql://postgres:password@localhost:5432/postgres?schema=public\"\n\nNEXT_PUBLIC_SITE_URL=\"http://localhost:3000\"\n",
			"type": "registry:example",
			"target": "~/example.env"
		},
		{
			"path": "./lib/db.ts",
			"content": "import { PrismaClient } from '@prisma/client'\n\nconst prismaClientSingleton = () => {\n\treturn new PrismaClient()\n}\n\ndeclare const globalThis: {\n\tprismaGlobal: ReturnType<typeof prismaClientSingleton>\n} & typeof global\n\nconst prisma = globalThis.prismaGlobal ?? prismaClientSingleton()\n\nexport default prisma\n\nif (process.env.NODE_ENV !== 'production') globalThis.prismaGlobal = prisma\n",
			"type": "registry:lib"
		},
		{
			"path": "./lib/env.ts",
			"content": "import { createEnv } from '@t3-oss/env-nextjs'\nimport dotenv from 'dotenv'\nimport { z } from 'zod'\n\ndotenv.config()\n\nexport const env = createEnv({\n\tserver: {\n\t\tAWS_ACCESS_KEY_ID: z.string().min(1),\n\t\tAWS_SECRET_ACCESS_KEY: z.string().min(1),\n\t\tAWS_REGION: z.string().min(1),\n\t\tAWS_PUBLIC_BUCKET_NAME: z.string().min(1),\n\t\tAWS_PRIVATE_BUCKET_NAME: z.string().min(1),\n\n\t\tDATABASE_URL: z.string().url(),\n\t},\n\tclient: { NEXT_PUBLIC_SITE_URL: z.string().url() },\n\truntimeEnv: {\n\t\tAWS_ACCESS_KEY_ID: process.env.AWS_ACCESS_KEY_ID,\n\t\tAWS_SECRET_ACCESS_KEY: process.env.AWS_SECRET_ACCESS_KEY,\n\t\tAWS_REGION: process.env.AWS_REGION,\n\t\tAWS_PUBLIC_BUCKET_NAME: process.env.AWS_PUBLIC_BUCKET_NAME,\n\t\tAWS_PRIVATE_BUCKET_NAME: process.env.AWS_PRIVATE_BUCKET_NAME,\n\n\t\tDATABASE_URL: process.env.DATABASE_URL,\n\n\t\tNEXT_PUBLIC_SITE_URL: process.env.NEXT_PUBLIC_SITE_URL,\n\t},\n})\n",
			"type": "registry:lib"
		},
		{
			"path": "./lib/s3.ts",
			"content": "import { S3Client } from '@aws-sdk/client-s3'\nexport const s3 = new S3Client()\n",
			"type": "registry:lib"
		},
		{
			"path": "./prisma/schema/files.prisma",
			"content": "model PublicFiles {\n    id         String   @id @default(cuid())\n    created_at DateTime @default(now())\n    updated_at DateTime @updatedAt\n\n    key           String @unique\n    original_name String\n    mime_type     String\n    url           String\n}\n\nmodel PrivateFiles {\n    id         String   @id @default(cuid())\n    created_at DateTime @default(now())\n    updated_at DateTime @updatedAt\n\n    key           String @unique\n    original_name String\n    mime_type     String\n}\n",
			"type": "registry:example",
			"target": "~/prisma/schema/files.prisma"
		},
		{
			"path": "./prisma/schema/migrations/20250430142453_add_files/migration.sql",
			"content": "-- CreateTable\nCREATE TABLE \"PublicFiles\" (\n    \"id\" TEXT NOT NULL,\n    \"created_at\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updated_at\" TIMESTAMP(3) NOT NULL,\n    \"key\" TEXT NOT NULL,\n    \"original_name\" TEXT NOT NULL,\n    \"mime_type\" TEXT NOT NULL,\n    \"url\" TEXT NOT NULL,\n\n    CONSTRAINT \"PublicFiles_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"PrivateFiles\" (\n    \"id\" TEXT NOT NULL,\n    \"created_at\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updated_at\" TIMESTAMP(3) NOT NULL,\n    \"key\" TEXT NOT NULL,\n    \"original_name\" TEXT NOT NULL,\n    \"mime_type\" TEXT NOT NULL,\n\n    CONSTRAINT \"PrivateFiles_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"PublicFiles_key_key\" ON \"PublicFiles\"(\"key\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"PrivateFiles_key_key\" ON \"PrivateFiles\"(\"key\");\n",
			"type": "registry:example",
			"target": "~/prisma/schema/migrations/20250430142453_add_files/migration.sql"
		},
		{
			"path": "./prisma/schema/migrations/migration_lock.toml",
			"content": "# Please do not edit this file manually\n# It should be added in your version-control system (e.g., Git)\nprovider = \"postgresql\"\n",
			"type": "registry:example",
			"target": "~/prisma/schema/migrations/migration_lock.toml"
		},
		{
			"path": "./prisma/schema/schema.prisma",
			"content": "datasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n",
			"type": "registry:example",
			"target": "~/prisma/schema/schema.prisma"
		},
		{
			"path": "./scripts/config-db.ts",
			"content": "import { readFileSync, writeFileSync } from 'fs'\nimport { join } from 'path'\n\nexport function main() {\n\ttry {\n\t\t// Read the current package.json\n\t\tconst packageJsonPath = join(process.cwd(), 'package.json')\n\t\tconst packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf-8'))\n\n\t\t// Add or update the prisma configuration\n\t\tpackageJson.prisma = { schema: './prisma/schema' }\n\n\t\t// Add or update the postinstall script\n\t\tpackageJson.scripts = {\n\t\t\t...packageJson.scripts,\n\t\t\tpostinstall: 'npx prisma generate',\n\t\t}\n\n\t\t// Write the updated package.json back to the file\n\t\twriteFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2))\n\n\t\tconsole.log('Successfully added Prisma configuration and postinstall script to package.json')\n\t} catch (error) {\n\t\tconsole.error('Error updating package.json:', error)\n\t\tprocess.exit(1)\n\t}\n}\n\nmain()\n",
			"type": "registry:example",
			"target": "~/scripts/config-db.ts"
		},
		{
			"path": "./scripts/config-files.ts",
			"content": "import { env } from '@/lib/env'\nimport { s3 } from '@/lib/s3'\nimport { CreateBucketCommand, PutBucketCorsCommand, PutBucketPolicyCommand, PutPublicAccessBlockCommand } from '@aws-sdk/client-s3'\n\nexport async function main() {\n\tconst publicBucket = env.AWS_PUBLIC_BUCKET_NAME\n\tconst privateBucket = env.AWS_PRIVATE_BUCKET_NAME\n\n\t// await s3.send(new DeleteBucketCommand({ Bucket: publicBucket }))\n\t// await s3.send(new DeleteBucketCommand({ Bucket: privateBucket }))\n\n\tawait s3.send(new CreateBucketCommand({ Bucket: publicBucket }))\n\tawait s3.send(new CreateBucketCommand({ Bucket: privateBucket }))\n\n\tawait s3.send(\n\t\tnew PutPublicAccessBlockCommand({\n\t\t\tBucket: publicBucket,\n\t\t\tPublicAccessBlockConfiguration: {\n\t\t\t\tBlockPublicAcls: false,\n\t\t\t\tIgnorePublicAcls: false,\n\t\t\t\tBlockPublicPolicy: false,\n\t\t\t\tRestrictPublicBuckets: false,\n\t\t\t},\n\t\t})\n\t)\n\n\tawait s3.send(\n\t\tnew PutBucketPolicyCommand({\n\t\t\tBucket: publicBucket,\n\t\t\tPolicy: JSON.stringify({\n\t\t\t\tVersion: '2012-10-17',\n\t\t\t\tStatement: [\n\t\t\t\t\t{\n\t\t\t\t\t\tSid: 'PublicReadAvatars',\n\t\t\t\t\t\tEffect: 'Allow',\n\t\t\t\t\t\tPrincipal: '*',\n\t\t\t\t\t\tAction: 's3:GetObject',\n\t\t\t\t\t\tResource: `arn:aws:s3:::${publicBucket}/*`,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t})\n\t)\n\n\tawait s3.send(\n\t\tnew PutBucketCorsCommand({\n\t\t\tBucket: privateBucket,\n\t\t\tCORSConfiguration: {\n\t\t\t\tCORSRules: [\n\t\t\t\t\t{\n\t\t\t\t\t\tAllowedOrigins: [\n\t\t\t\t\t\t\t// TODO: Add production url\n\t\t\t\t\t\t\tenv.NEXT_PUBLIC_SITE_URL,\n\t\t\t\t\t\t],\n\t\t\t\t\t\tAllowedMethods: ['GET', 'PUT', 'POST'],\n\t\t\t\t\t\tAllowedHeaders: ['*'],\n\t\t\t\t\t\tExposeHeaders: ['ETag'],\n\t\t\t\t\t\tMaxAgeSeconds: 3000,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t})\n\t)\n}\n\nmain()\n",
			"type": "registry:example",
			"target": "~/scripts/config-files.ts"
		},
		{
			"path": "./validators/s3.ts",
			"content": "import { z } from 'zod'\n\nexport const s3FileSchema = z.object({ file: z.instanceof(File).refine((f) => f.size > 0, 'File is required') })\n",
			"type": "registry:example",
			"target": "~/validators/s3.ts"
		}
	],
	"tailwind": {},
	"cssVars": {},
	"meta": {},
	"docs": "Remember to run `npx tsx scripts/config-db.ts && npx tsx scripts/config-files.ts` to add the prisma configuration and scripts to package.json and setup S3 buckets"
}
