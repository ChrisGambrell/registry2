{
	"name": "files",
	"type": "registry:block",
	"dependencies": [
		"@aws-sdk/client-s3",
		"@aws-sdk/s3-request-presigner",
		"@radix-ui/react-slot",
		"@t3-oss/env-nextjs",
		"dotenv",
		"uuid",
		"zod"
	],
	"devDependencies": ["tsx"],
	"registryDependencies": ["button", "card", "input"],
	"files": [
		{
			"path": "./actions/s3.ts",
			"content": "'use server'\n\nimport { env } from '@/lib/env'\nimport { s3 } from '@/lib/s3'\nimport { GetObjectCommand, ListObjectsV2Command, PutObjectCommand } from '@aws-sdk/client-s3'\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner'\nimport { v4 as uuidv4 } from 'uuid'\n\nexport async function getFiles(Prefix?: string) {\n\tconst { Contents = [] } = await s3.send(new ListObjectsV2Command({ Bucket: env.AWS_PRIVATE_BUCKET_NAME, Prefix }))\n\n\tconst rows = Contents.map((c) => ({\n\t\tkey: c.Key,\n\t\tsize: c.Size,\n\t\toriginalName: c.Key!.split('/').pop(),\n\t\tmime: 'application/octet-stream',\n\t}))\n\n\tconst files = await Promise.all(\n\t\trows.map(async (file) => ({\n\t\t\t...file,\n\t\t\turl: await getSignedUrl(s3, new GetObjectCommand({ Bucket: env.AWS_PRIVATE_BUCKET_NAME, Key: file.key }), { expiresIn: 60 }),\n\t\t}))\n\t)\n\n\treturn files\n}\n\nexport async function uploadFile(ContentType = 'application/octet-stream') {\n\tconst Key = uuidv4()\n\tconst cmd = new PutObjectCommand({ Bucket: env.AWS_PRIVATE_BUCKET_NAME, Key, ContentType })\n\tconst url = await getSignedUrl(s3, cmd, { expiresIn: 60 })\n\treturn { url }\n}\n",
			"type": "registry:example",
			"target": "~/actions/s3.ts"
		},
		{
			"path": "./app/example/client.tsx",
			"content": "'use client'\n\nimport { uploadFile } from '@/actions/s3'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { useRouter } from 'next/navigation'\nimport { useState } from 'react'\n\nexport function ClientPage() {\n\tconst router = useRouter()\n\tconst [file, setFile] = useState<File | null>(null)\n\n\tasync function handleUpload() {\n\t\tif (!file) return\n\t\tconst { url } = await uploadFile(file.type)\n\t\tawait fetch(url, { method: 'PUT', body: file })\n\t\trouter.refresh()\n\t}\n\n\treturn (\n\t\t<div className='flex gap-2'>\n\t\t\t<Input className='flex-1' type='file' onChange={(e) => setFile(e.target.files?.[0] ?? null)} />\n\t\t\t<Button onClick={handleUpload}>Upload</Button>\n\t\t</div>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/example/client.tsx"
		},
		{
			"path": "./app/example/page.tsx",
			"content": "import { getFiles } from '@/actions/s3'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { CloudDownload } from 'lucide-react'\nimport { ClientPage } from './client'\n\nexport default async function RootPage() {\n\tconst files = await getFiles()\n\n\treturn (\n\t\t<Card className='max-w-2xl mx-auto mt-4'>\n\t\t\t<CardHeader>\n\t\t\t\t<CardTitle>Uploads</CardTitle>\n\t\t\t</CardHeader>\n\t\t\t<CardContent>\n\t\t\t\t<ClientPage />\n\t\t\t</CardContent>\n\t\t\t<CardContent>\n\t\t\t\t{files.map((f) => (\n\t\t\t\t\t<div key={f.key} className='flex gap-2 items-center'>\n\t\t\t\t\t\t<div className='flex-1'>{f.key}</div>\n\t\t\t\t\t\t<Button size='sm' variant='link'>\n\t\t\t\t\t\t\t<CloudDownload />\n\t\t\t\t\t\t\t<span>Download</span>\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</CardContent>\n\t\t</Card>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/example/page.tsx"
		},
		{
			"path": "./app/layout.tsx",
			"content": "import '@/lib/env'\nimport type { Metadata } from 'next'\nimport { Geist, Geist_Mono } from 'next/font/google'\nimport './globals.css'\n\nconst geistSans = Geist({\n\tvariable: '--font-geist-sans',\n\tsubsets: ['latin'],\n})\n\nconst geistMono = Geist_Mono({\n\tvariable: '--font-geist-mono',\n\tsubsets: ['latin'],\n})\n\nexport const metadata: Metadata = {\n\ttitle: 'Create Next App',\n\tdescription: 'Generated by create next app',\n}\n\nexport default function RootLayout({\n\tchildren,\n}: Readonly<{\n\tchildren: React.ReactNode\n}>) {\n\treturn (\n\t\t<html lang='en'>\n\t\t\t<body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>{children}</body>\n\t\t</html>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/layout.tsx"
		},
		{
			"path": "./example.env",
			"content": "# https://console.aws.amazon.com/console\nAWS_ACCESS_KEY_ID=\"\"\nAWS_SECRET_ACCESS_KEY=\"\"\nAWS_REGION=\"us-east-1\"\nAWS_PUBLIC_BUCKET_NAME=\"public\"\nAWS_PRIVATE_BUCKET_NAME=\"private\"\n\nNEXT_PUBLIC_SITE_URL=\"http://localhost:3000\"\n",
			"type": "registry:example",
			"target": "~/example.env"
		},
		{
			"path": "./lib/env.ts",
			"content": "import { createEnv } from '@t3-oss/env-nextjs'\nimport dotenv from 'dotenv'\nimport { z } from 'zod'\n\ndotenv.config()\n\nexport const env = createEnv({\n\tserver: {\n\t\tAWS_ACCESS_KEY_ID: z.string().min(1),\n\t\tAWS_SECRET_ACCESS_KEY: z.string().min(1),\n\t\tAWS_REGION: z.string().min(1),\n\t\tAWS_PUBLIC_BUCKET_NAME: z.string().min(1),\n\t\tAWS_PRIVATE_BUCKET_NAME: z.string().min(1),\n\t},\n\tclient: {\n\t\tNEXT_PUBLIC_SITE_URL: z.string().url(),\n\t},\n\truntimeEnv: {\n\t\tAWS_ACCESS_KEY_ID: process.env.AWS_ACCESS_KEY_ID,\n\t\tAWS_SECRET_ACCESS_KEY: process.env.AWS_SECRET_ACCESS_KEY,\n\t\tAWS_REGION: process.env.AWS_REGION,\n\t\tAWS_PUBLIC_BUCKET_NAME: process.env.AWS_PUBLIC_BUCKET_NAME,\n\t\tAWS_PRIVATE_BUCKET_NAME: process.env.AWS_PRIVATE_BUCKET_NAME,\n\n\t\tNEXT_PUBLIC_SITE_URL: process.env.NEXT_PUBLIC_SITE_URL,\n\t},\n})\n",
			"type": "registry:lib"
		},
		{
			"path": "./lib/s3.ts",
			"content": "import { S3Client } from '@aws-sdk/client-s3'\nexport const s3 = new S3Client()\n",
			"type": "registry:lib"
		},
		{
			"path": "./scripts/create-s3-buckets.ts",
			"content": "import { env } from '@/lib/env'\nimport { s3 } from '@/lib/s3'\nimport { CreateBucketCommand, PutBucketCorsCommand, PutBucketPolicyCommand, PutPublicAccessBlockCommand } from '@aws-sdk/client-s3'\n\nexport async function main() {\n\tconst publicBucket = env.AWS_PUBLIC_BUCKET_NAME\n\tconst privateBucket = env.AWS_PRIVATE_BUCKET_NAME\n\n\t// await s3.send(new DeleteBucketCommand({ Bucket: publicBucket }))\n\t// await s3.send(new DeleteBucketCommand({ Bucket: privateBucket }))\n\n\tawait s3.send(new CreateBucketCommand({ Bucket: publicBucket }))\n\tawait s3.send(new CreateBucketCommand({ Bucket: privateBucket }))\n\n\tawait s3.send(\n\t\tnew PutPublicAccessBlockCommand({\n\t\t\tBucket: publicBucket,\n\t\t\tPublicAccessBlockConfiguration: {\n\t\t\t\tBlockPublicAcls: false,\n\t\t\t\tIgnorePublicAcls: false,\n\t\t\t\tBlockPublicPolicy: false,\n\t\t\t\tRestrictPublicBuckets: false,\n\t\t\t},\n\t\t})\n\t)\n\n\tawait s3.send(\n\t\tnew PutBucketPolicyCommand({\n\t\t\tBucket: publicBucket,\n\t\t\tPolicy: JSON.stringify({\n\t\t\t\tVersion: '2012-10-17',\n\t\t\t\tStatement: [\n\t\t\t\t\t{\n\t\t\t\t\t\tSid: 'PublicReadAvatars',\n\t\t\t\t\t\tEffect: 'Allow',\n\t\t\t\t\t\tPrincipal: '*',\n\t\t\t\t\t\tAction: 's3:GetObject',\n\t\t\t\t\t\tResource: `arn:aws:s3:::${publicBucket}/*`,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t})\n\t)\n\n\tawait s3.send(\n\t\tnew PutBucketCorsCommand({\n\t\t\tBucket: privateBucket,\n\t\t\tCORSConfiguration: {\n\t\t\t\tCORSRules: [\n\t\t\t\t\t{\n\t\t\t\t\t\tAllowedOrigins: [\n\t\t\t\t\t\t\t// TODO: Add production url\n\t\t\t\t\t\t\tenv.NEXT_PUBLIC_SITE_URL,\n\t\t\t\t\t\t],\n\t\t\t\t\t\tAllowedMethods: ['GET', 'PUT', 'POST'],\n\t\t\t\t\t\tAllowedHeaders: ['*'],\n\t\t\t\t\t\tExposeHeaders: ['ETag'],\n\t\t\t\t\t\tMaxAgeSeconds: 3000,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t})\n\t)\n}\n\nmain()\n",
			"type": "registry:example",
			"target": "~/scripts/create-s3-buckets.ts"
		}
	],
	"tailwind": {},
	"cssVars": {},
	"meta": {}
}
