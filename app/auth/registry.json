{
	"name": "auth",
	"type": "registry:block",
	"dependencies": [
		"@auth/prisma-adapter@2.7.0",
		"@aws-sdk/client-s3",
		"@aws-sdk/s3-request-presigner",
		"@prisma/client",
		"@radix-ui/react-alert-dialog",
		"@radix-ui/react-checkbox",
		"@radix-ui/react-dialog",
		"@radix-ui/react-label",
		"@radix-ui/react-popover",
		"@radix-ui/react-select",
		"@radix-ui/react-slot",
		"@radix-ui/react-tabs",
		"@t3-oss/env-nextjs",
		"bcryptjs",
		"class-variance-authority",
		"clsx",
		"cmdk",
		"lucide-react",
		"next-auth@beta",
		"next-themes",
		"sonner",
		"tailwind-merge",
		"tw-animate-css",
		"uuid",
		"zod"
	],
	"devDependencies": ["@types/bcryptjs", "prisma", "tsx"],
	"registryDependencies": [
		"alert-dialog",
		"button",
		"card",
		"checkbox",
		"command",
		"dialog",
		"input",
		"label",
		"popover",
		"select",
		"sonner",
		"tabs",
		"textarea",
		"https://r.gambrell.dev"
	],
	"files": [
		{
			"path": "./actions/auth.ts",
			"content": "'use server'\n\nimport { handleFormAction } from '@/components/ui/base/action'\nimport { signIn, signOut } from '@/lib/auth'\nimport prisma from '@/lib/db'\nimport { getSuccessRedirect } from '@/lib/utils'\nimport { loginSchema, oauthSchema, registerSchema, verifyEmailSchema } from '@/validators/auth'\nimport { Prisma } from '@prisma/client'\nimport bcrypt from 'bcryptjs'\nimport { AuthError } from 'next-auth'\nimport { OAuthProviderId } from 'next-auth/providers'\nimport { redirect } from 'next/navigation'\n\nexport const login = async (_: unknown, formData: FormData) =>\n\thandleFormAction(formData, loginSchema, async (data) => {\n\t\ttry {\n\t\t\tawait signIn('credentials', { email: data.email, password: data.password, redirectTo: data.callbackUrl })\n\t\t} catch (error) {\n\t\t\tif (error instanceof AuthError) return { globalError: error.message }\n\t\t\tthrow error\n\t\t}\n\n\t\tredirect('/dashboard')\n\t})\n\nexport async function logout() {\n\tawait signOut({ redirectTo: '/login' })\n}\n\nexport const oauth = async (provider: OAuthProviderId, _: unknown, formData: FormData) =>\n\thandleFormAction(formData, oauthSchema, async (data) => {\n\t\ttry {\n\t\t\tawait signIn(provider, { redirectTo: data.callbackUrl })\n\t\t} catch (error) {\n\t\t\tif (error instanceof AuthError) return { globalError: error.message }\n\t\t\tthrow error\n\t\t}\n\n\t\tredirect('/dashboard')\n\t})\n\nexport const register = async (_: unknown, formData: FormData) =>\n\thandleFormAction(formData, registerSchema, async (data) => {\n\t\ttry {\n\t\t\tconst passwordHash = await bcrypt.hash(data.password, 10)\n\t\t\tawait prisma.user.create({ data: { name: `${data.firstName} ${data.lastName}`, email: data.email, passwordHash } })\n\t\t} catch (error) {\n\t\t\tif (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2002')\n\t\t\t\treturn { fieldErrors: { email: ['User already exists with that email'] } }\n\t\t\telse if (error instanceof AuthError) return { globalError: error.message }\n\t\t\tthrow error\n\t\t}\n\n\t\tredirect(getSuccessRedirect('/login', 'Account created, please login'))\n\t})\n\nexport const verifyEmail = async (_prevState: unknown, formData: FormData) =>\n\thandleFormAction(formData, verifyEmailSchema, async (data) => {\n\t\ttry {\n\t\t\tawait signIn('resend', { email: data.email, redirect: false })\n\t\t} catch (error) {\n\t\t\tif (error instanceof AuthError) return { globalError: error.message }\n\t\t\tthrow error\n\t\t}\n\n\t\tredirect(getSuccessRedirect('/login', 'A sign in link has been sent to your email address.'))\n\t})\n",
			"type": "registry:example",
			"target": "~/actions/auth.ts"
		},
		{
			"path": "./actions/user.ts",
			"content": "'use server'\n\nimport { handleFormAction } from '@/components/ui/base/action'\nimport { auth } from '@/lib/auth'\nimport prisma from '@/lib/db'\nimport { s3 } from '@/lib/s3'\nimport { getSuccessRedirect } from '@/lib/utils'\nimport { updateAvatarSchema, updateUserSchema } from '@/validators/user'\nimport { PutObjectCommand } from '@aws-sdk/client-s3'\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner'\nimport { Account } from '@prisma/client'\nimport bcrypt from 'bcryptjs'\nimport { revalidatePath } from 'next/cache'\nimport { redirect } from 'next/navigation'\nimport { env } from 'process'\nimport { v4 as uuidv4 } from 'uuid'\n\nexport const updateAvatar = async (_: unknown, formData: FormData) =>\n\thandleFormAction(formData, updateAvatarSchema, async ({ file }) => {\n\t\tconst user = await auth()\n\t\tconst Key = `avatars/${user.id}/${uuidv4()}`\n\n\t\tconst cmd = new PutObjectCommand({ Bucket: env.AWS_PUBLIC_BUCKET_NAME, Key, ContentType: file.type ?? 'application/octet-stream' })\n\t\tconst url = await getSignedUrl(s3, cmd, { expiresIn: 60 })\n\n\t\tawait prisma.user\n\t\t\t.update({\n\t\t\t\twhere: { id: user.id },\n\t\t\t\tdata: { image: `https://${env.AWS_PUBLIC_BUCKET_NAME}.s3.${env.AWS_REGION}.amazonaws.com/${Key}` },\n\t\t\t})\n\t\t\t.then(async () => await fetch(url, { method: 'PUT', body: file }))\n\n\t\trevalidatePath('/dashboard')\n\t})\n\nexport const updateUser = async (_: unknown, formData: FormData) =>\n\thandleFormAction(formData, updateUserSchema, async ({ password, confirmPassword, ...data }) => {\n\t\tconst user = await auth()\n\n\t\tawait prisma.user.update({ where: { id: user.id }, data })\n\n\t\tif (password && confirmPassword) {\n\t\t\tconst passwordHash = await bcrypt.hash(password, 10)\n\t\t\tawait prisma.user.update({ where: { id: user.id }, data: { passwordHash } })\n\t\t}\n\n\t\tredirect(getSuccessRedirect('/dashboard', 'Account updated'))\n\t})\n\nexport async function unlinkAccount(provider: Account['provider'], providerAccountId: Account['providerAccountId']) {\n\tconst user = await auth()\n\tawait prisma.account.delete({ where: { provider_providerAccountId: { provider, providerAccountId }, userId: user.id } })\n\tredirect(getSuccessRedirect('/dashboard', 'Account unlinked'))\n}\n",
			"type": "registry:example",
			"target": "~/actions/user.ts"
		},
		{
			"path": "./app/(auth)/forgot/page.tsx",
			"content": "'use client'\n\nimport { verifyEmail } from '@/actions/auth'\nimport { AuthLayout } from '@/components/auth-layout'\nimport { ActionButton } from '@/components/ui/base/action-button'\nimport { FormInput } from '@/components/ui/base/form-input'\nimport { useForm } from '@/components/ui/base/use-form'\nimport { CardContent, CardFooter } from '@/components/ui/card'\nimport { verifyEmailSchema } from '@/validators/auth'\nimport Link from 'next/link'\n\nexport default function ForgotPage() {\n\tconst [state, action] = useForm(verifyEmail, verifyEmailSchema)\n\n\treturn (\n\t\t<AuthLayout title='Reset your password' desc=\"Enter your email address and we'll send you a link to reset your password\">\n\t\t\t<CardContent>\n\t\t\t\t<form action={action} className='grid gap-4'>\n\t\t\t\t\t<FormInput label='Email' name='email' placeholder='m@example.com' state={state} />\n\t\t\t\t\t<ActionButton>Send verification</ActionButton>\n\t\t\t\t</form>\n\t\t\t</CardContent>\n\t\t\t<CardFooter>\n\t\t\t\t<p className='text-center text-sm text-muted-foreground'>\n\t\t\t\t\tRemember your password?{' '}\n\t\t\t\t\t<Link className='text-primary underline' href='/login'>\n\t\t\t\t\t\tSign in\n\t\t\t\t\t</Link>\n\t\t\t\t</p>\n\t\t\t</CardFooter>\n\t\t</AuthLayout>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/(auth)/forgot/page.tsx"
		},
		{
			"path": "./app/(auth)/login/page.tsx",
			"content": "'use client'\n\nimport { login, oauth } from '@/actions/auth'\nimport { AuthLayout } from '@/components/auth-layout'\nimport { ActionButton } from '@/components/ui/base/action-button'\nimport { FormInput } from '@/components/ui/base/form-input'\nimport { useForm } from '@/components/ui/base/use-form'\nimport { CardContent } from '@/components/ui/card'\nimport { Label } from '@/components/ui/label'\nimport { loginSchema } from '@/validators/auth'\nimport Link from 'next/link'\nimport { useSearchParams } from 'next/navigation'\nimport { Suspense } from 'react'\n\nexport default function LoginPage() {\n\treturn (\n\t\t<Suspense>\n\t\t\t<Page />\n\t\t</Suspense>\n\t)\n}\n\nfunction Page() {\n\tconst searchParams = useSearchParams()\n\tconst callbackUrl = searchParams.get('callbackUrl') ?? '/dashboard'\n\n\tconst [state, action] = useForm(login, loginSchema)\n\tconst [, githubAction] = useForm(oauth.bind(null, 'github'))\n\tconst [, googleAction] = useForm(oauth.bind(null, 'google'))\n\n\treturn (\n\t\t<AuthLayout title='Welcome back' desc='Enter your credentials to access your account'>\n\t\t\t<CardContent>\n\t\t\t\t<form action={action} className='grid gap-4'>\n\t\t\t\t\t<input type='hidden' name='callbackUrl' value={callbackUrl} />\n\t\t\t\t\t<FormInput label='Email' name='email' placeholder='m@example.com' state={state} />\n\t\t\t\t\t<FormInput\n\t\t\t\t\t\tlabel={\n\t\t\t\t\t\t\t<div className='flex items-center'>\n\t\t\t\t\t\t\t\t<Label htmlFor='password'>Password</Label>\n\t\t\t\t\t\t\t\t<Link className='ml-auto inline-block text-primary text-sm underline' href='/forgot'>\n\t\t\t\t\t\t\t\t\tForgot password?\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tname='password'\n\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\tclearOnError\n\t\t\t\t\t\tstate={state}\n\t\t\t\t\t/>\n\t\t\t\t\t<ActionButton>Log in</ActionButton>\n\n\t\t\t\t\t<div className='relative'>\n\t\t\t\t\t\t<div className='absolute inset-0 flex items-center'>\n\t\t\t\t\t\t\t<span className='w-full border-t' />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='relative flex justify-center text-xs uppercase'>\n\t\t\t\t\t\t\t<span className='bg-background px-2 text-muted-foreground'>Or</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className='grid gap-2'>\n\t\t\t\t\t\t<ActionButton formAction={githubAction} variant='outline'>\n\t\t\t\t\t\t\tSign in with GitHub\n\t\t\t\t\t\t</ActionButton>\n\t\t\t\t\t\t<ActionButton formAction={googleAction} variant='outline'>\n\t\t\t\t\t\t\tSign in with Google\n\t\t\t\t\t\t</ActionButton>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<p className='text-center text-sm text-muted-foreground'>\n\t\t\t\t\t\tDon&apos;t have an account?{' '}\n\t\t\t\t\t\t<Link className='text-primary underline' href='/register'>\n\t\t\t\t\t\t\tSign up\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</p>\n\t\t\t\t</form>\n\t\t\t</CardContent>\n\t\t</AuthLayout>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/(auth)/login/page.tsx"
		},
		{
			"path": "./app/(auth)/register/page.tsx",
			"content": "'use client'\n\nimport { oauth, register } from '@/actions/auth'\nimport { AuthLayout } from '@/components/auth-layout'\nimport { ActionButton } from '@/components/ui/base/action-button'\nimport { FormCheckbox } from '@/components/ui/base/form-checkbox'\nimport { FormInput } from '@/components/ui/base/form-input'\nimport { useForm } from '@/components/ui/base/use-form'\nimport { CardContent } from '@/components/ui/card'\nimport { registerSchema } from '@/validators/auth'\nimport Link from 'next/link'\n\nexport default function RegisterPage() {\n\tconst [state, action] = useForm(register, registerSchema)\n\tconst [, githubAction] = useForm(oauth.bind(null, 'github'))\n\tconst [, googleAction] = useForm(oauth.bind(null, 'google'))\n\n\treturn (\n\t\t<AuthLayout title='Create an account' desc='Enter your details to create your account'>\n\t\t\t<CardContent>\n\t\t\t\t<form action={action} className='grid gap-4'>\n\t\t\t\t\t<div className='grid grid-cols-2 gap-2'>\n\t\t\t\t\t\t<FormInput label='First name' name='firstName' placeholder='Max' state={state} />\n\t\t\t\t\t\t<FormInput label='Last name' name='lastName' placeholder='Robinson' state={state} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<FormInput label='Email' name='email' placeholder='m@example.com' state={state} />\n\t\t\t\t\t<FormInput label='Password' name='password' type='password' clearOnError state={state} />\n\t\t\t\t\t<FormInput label='Confirm password' name='confirmPassword' type='password' state={state} />\n\n\t\t\t\t\t<FormCheckbox\n\t\t\t\t\t\tclassName='text-nowrap'\n\t\t\t\t\t\tlabel={\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\tI agree to the {/* BUG: Missing ToS */}\n\t\t\t\t\t\t\t\t<Link href='/terms' className='text-primary underline'>\n\t\t\t\t\t\t\t\t\tTerms of Service\n\t\t\t\t\t\t\t\t</Link>{' '}\n\t\t\t\t\t\t\t\tand\n\t\t\t\t\t\t\t\t<Link href='/privacy' className='text-primary underline'>\n\t\t\t\t\t\t\t\t\t{/* BUG: Missing Privacy Policy */}\n\t\t\t\t\t\t\t\t\tPrivacy Policy\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tname='terms'\n\t\t\t\t\t\tstate={state}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<ActionButton>Create account</ActionButton>\n\n\t\t\t\t\t<div className='relative'>\n\t\t\t\t\t\t<div className='absolute inset-0 flex items-center'>\n\t\t\t\t\t\t\t<span className='w-full border-t' />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='relative flex justify-center text-xs uppercase'>\n\t\t\t\t\t\t\t<span className='bg-background px-2 text-muted-foreground'>Or</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className='grid gap-2'>\n\t\t\t\t\t\t<ActionButton formAction={githubAction} variant='outline'>\n\t\t\t\t\t\t\tSign in with GitHub\n\t\t\t\t\t\t</ActionButton>\n\t\t\t\t\t\t<ActionButton formAction={googleAction} variant='outline'>\n\t\t\t\t\t\t\tSign in with Google\n\t\t\t\t\t\t</ActionButton>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<p className='text-center text-sm text-muted-foreground'>\n\t\t\t\t\t\tAlready have an account?{' '}\n\t\t\t\t\t\t<Link className='text-primary underline' href='/login'>\n\t\t\t\t\t\t\tSign in\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</p>\n\t\t\t\t</form>\n\t\t\t</CardContent>\n\t\t</AuthLayout>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/(auth)/register/page.tsx"
		},
		{
			"path": "./app/(protected)/accounts/client.tsx",
			"content": "'use client'\n\nimport { oauth } from '@/actions/auth'\nimport { ActionButton } from '@/components/ui/base/action-button'\nimport { useForm } from '@/components/ui/base/use-form'\nimport { OAuthProviderId } from 'next-auth/providers'\n\nexport function LinkAccountButton({ provider }: { provider: OAuthProviderId }) {\n\tconst [, action] = useForm(oauth.bind(null, provider))\n\n\treturn (\n\t\t<ActionButton formAction={action} size='sm'>\n\t\t\tLink\n\t\t</ActionButton>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/(protected)/accounts/client.tsx"
		},
		{
			"path": "./app/(protected)/accounts/page.tsx",
			"content": "import { unlinkAccount } from '@/actions/user'\nimport { Button } from '@/components/ui/base/c-button'\nimport { ConfirmDelete } from '@/components/ui/base/confirm'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { auth } from '@/lib/auth'\nimport prisma from '@/lib/db'\nimport { OAuthProviderId } from 'next-auth/providers'\nimport { LinkAccountButton } from './client'\n\nexport default async function DashboardPage() {\n\tconst user = await auth()\n\tconst linkedAccounts = await prisma.account.findMany({ where: { userId: user.id } })\n\n\treturn (\n\t\t<Card className='border-0 shadow-none sm:border sm:shadow-sm'>\n\t\t\t<CardHeader>\n\t\t\t\t<CardTitle>Linked accounts</CardTitle>\n\t\t\t\t<CardDescription>Link your accounts to your dashboard</CardDescription>\n\t\t\t</CardHeader>\n\t\t\t<CardContent>\n\t\t\t\t<form className='flex flex-col divide-y'>\n\t\t\t\t\t{['github', 'google'].map((provider) => {\n\t\t\t\t\t\tconst linkedAccount = linkedAccounts.find((account) => account.provider === provider)\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={provider} className='py-2 flex items-center justify-between'>\n\t\t\t\t\t\t\t\t<span className='capitalize'>{provider}</span>\n\t\t\t\t\t\t\t\t{linkedAccount ? (\n\t\t\t\t\t\t\t\t\t<ConfirmDelete action={unlinkAccount.bind(null, provider, linkedAccount.providerAccountId)}>\n\t\t\t\t\t\t\t\t\t\t<Button size='sm' variant='outline'>\n\t\t\t\t\t\t\t\t\t\t\tUnlink\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t</ConfirmDelete>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<LinkAccountButton provider={provider as OAuthProviderId} />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</form>\n\t\t\t</CardContent>\n\t\t</Card>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/(protected)/accounts/page.tsx"
		},
		{
			"path": "./app/(protected)/dashboard/form.tsx",
			"content": "'use client'\n\nimport { logout } from '@/actions/auth'\nimport { updateAvatar, updateUser } from '@/actions/user'\nimport { Icons } from '@/components/icons'\nimport { ActionButton } from '@/components/ui/base/action-button'\nimport { FormInput } from '@/components/ui/base/form-input'\nimport { useForm } from '@/components/ui/base/use-form'\nimport { AuthUser } from '@/lib/utils'\nimport { updateAvatarSchema, updateUserSchema } from '@/validators/user'\nimport { Upload } from 'lucide-react'\nimport { useEffect, useRef } from 'react'\nimport { toast } from 'sonner'\n\nexport function Avatar({ user }: { user: AuthUser }) {\n\tconst [state, action] = useForm(updateAvatar, updateAvatarSchema)\n\tconst ref = useRef<HTMLFormElement>(null)\n\n\tuseEffect(() => {\n\t\tif (!state?.fieldErrors.file) return\n\t\ttoast.error(state.fieldErrors.file)\n\t}, [state?.fieldErrors.file])\n\n\treturn (\n\t\t<div className='relative group'>\n\t\t\t{user.image ? (\n\t\t\t\t<img className='ring-2 ring-offset-2 ring-primary rounded-lg size-20' src={user.image} alt={user.name ?? user.email} />\n\t\t\t) : (\n\t\t\t\t<div className='ring-2 ring-offset-2 ring-primary rounded-lg size-20 flex items-center justify-center'>\n\t\t\t\t\t<Upload className='size-6 text-primary' />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<form\n\t\t\t\taction={action}\n\t\t\t\tclassName='invisible group-hover:visible absolute inset-0 flex items-center justify-center bg-background/50 rounded-lg'\n\t\t\t\tref={ref}>\n\t\t\t\t<Upload className='size-6 text-primary' />\n\t\t\t\t<input\n\t\t\t\t\tclassName='z-10 w-full h-full opacity-0 absolute inset-0'\n\t\t\t\t\tname='file'\n\t\t\t\t\ttype='file'\n\t\t\t\t\taccept='image/*'\n\t\t\t\t\tonChange={() => ref.current?.requestSubmit()}\n\t\t\t\t/>\n\t\t\t</form>\n\t\t</div>\n\t)\n}\n\nexport function DashboardForm({ user }: { user: AuthUser }) {\n\tconst [state, action] = useForm(updateUser, updateUserSchema)\n\n\treturn (\n\t\t<form action={action} className='grid gap-4'>\n\t\t\t<FormInput label='Full name' name='name' placeholder='Max Robinson' defaultValue={user.name ?? ''} state={state} />\n\t\t\t<FormInput label='Email' defaultValue={user.email} disabled />\n\t\t\t<FormInput label='Update password' name='password' type='password' state={state} />\n\t\t\t<FormInput label='Confirm password' name='confirmPassword' type='password' state={state} />\n\n\t\t\t<ActionButton>Update</ActionButton>\n\n\t\t\t<div className='relative'>\n\t\t\t\t<div className='absolute inset-0 flex items-center'>\n\t\t\t\t\t<span className='w-full border-t' />\n\t\t\t\t</div>\n\t\t\t\t<div className='relative flex justify-center text-xs uppercase'>\n\t\t\t\t\t<span className='bg-background px-2 text-muted-foreground'>Or</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<ActionButton formAction={logout} variant='outline'>\n\t\t\t\t<Icons.logout />\n\t\t\t\t<span>Sign out</span>\n\t\t\t</ActionButton>\n\t\t</form>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/(protected)/dashboard/form.tsx"
		},
		{
			"path": "./app/(protected)/dashboard/page.tsx",
			"content": "import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { auth } from '@/lib/auth'\nimport { Avatar, DashboardForm } from './form'\n\nexport default async function DashboardPage() {\n\tconst user = await auth()\n\n\treturn (\n\t\t<Card className='border-0 shadow-none sm:border sm:shadow-sm'>\n\t\t\t<CardHeader>\n\t\t\t\t<div className='flex gap-4 justify-between'>\n\t\t\t\t\t<div className='grid gap-1.5 h-fit'>\n\t\t\t\t\t\t<CardTitle>{user.name ? `Hello, ${user.name}` : 'Welcome!'}</CardTitle>\n\t\t\t\t\t\t<CardDescription>Update your account details</CardDescription>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Avatar user={user} />\n\t\t\t\t</div>\n\t\t\t</CardHeader>\n\t\t\t<CardContent>\n\t\t\t\t<DashboardForm user={user} />\n\t\t\t</CardContent>\n\t\t</Card>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/(protected)/dashboard/page.tsx"
		},
		{
			"path": "./app/(protected)/layout.tsx",
			"content": "'use client'\n\nimport { Icons } from '@/components/icons'\nimport { Button } from '@/components/ui/base/c-button'\nimport { ThemeSwitcher } from '@/components/ui/base/theme-switcher'\nimport { LayoutProps } from '@/components/ui/base/utils'\nimport { Tabs, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport Link from 'next/link'\nimport { usePathname } from 'next/navigation'\nimport { useState } from 'react'\n\nexport default function Layout({ children }: LayoutProps) {\n\tconst pathname = usePathname()\n\tconst [tab, setTab] = useState(pathname.split('/').pop() ?? 'dashboard')\n\n\treturn (\n\t\t<div className='min-h-screen bg-background relative flex flex-col sm:flex-row sm:items-center sm:justify-center p-4 sm:p-8'>\n\t\t\t<div className='w-full sm:max-w-md grid gap-2'>\n\t\t\t\t<div className='flex gap-4 justify-between'>\n\t\t\t\t\t<Tabs value={tab} onValueChange={setTab}>\n\t\t\t\t\t\t<TabsList>\n\t\t\t\t\t\t\t<TabsTrigger asChild value='dashboard'>\n\t\t\t\t\t\t\t\t<Link href='/dashboard'>Account</Link>\n\t\t\t\t\t\t\t</TabsTrigger>\n\t\t\t\t\t\t\t<TabsTrigger asChild value='accounts'>\n\t\t\t\t\t\t\t\t<Link href='/accounts'>Linked accounts</Link>\n\t\t\t\t\t\t\t</TabsTrigger>\n\t\t\t\t\t\t</TabsList>\n\t\t\t\t\t</Tabs>\n\t\t\t\t\t<ThemeSwitcher>\n\t\t\t\t\t\t<Button variant='ghost'>\n\t\t\t\t\t\t\t<span>Theme</span>\n\t\t\t\t\t\t\t<Icons.chevronDown />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</ThemeSwitcher>\n\t\t\t\t</div>\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/(protected)/layout.tsx"
		},
		{
			"path": "./app/api/auth/[...nextauth]/route.ts",
			"content": "import { handlers } from '@/lib/auth'\nexport const { GET, POST } = handlers\n",
			"type": "registry:example",
			"target": "./app/api/auth/[...nextauth]/route.ts"
		},
		{
			"path": "./app/globals.css",
			"content": "@import 'tailwindcss';\n@import 'tw-animate-css';\n\n@custom-variant dark (&:is(.dark *));\n\n@theme inline {\n\t--color-background: var(--background);\n\t--color-foreground: var(--foreground);\n\t--font-sans: var(--font-sans);\n\t--font-mono: var(--font-mono);\n\t--font-serif: var(--font-serif);\n\t--color-sidebar-ring: var(--sidebar-ring);\n\t--color-sidebar-border: var(--sidebar-border);\n\t--color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n\t--color-sidebar-accent: var(--sidebar-accent);\n\t--color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n\t--color-sidebar-primary: var(--sidebar-primary);\n\t--color-sidebar-foreground: var(--sidebar-foreground);\n\t--color-sidebar: var(--sidebar);\n\t--color-chart-5: var(--chart-5);\n\t--color-chart-4: var(--chart-4);\n\t--color-chart-3: var(--chart-3);\n\t--color-chart-2: var(--chart-2);\n\t--color-chart-1: var(--chart-1);\n\t--color-ring: var(--ring);\n\t--color-input: var(--input);\n\t--color-border: var(--border);\n\t--color-destructive: var(--destructive);\n\t--color-accent-foreground: var(--accent-foreground);\n\t--color-accent: var(--accent);\n\t--color-muted-foreground: var(--muted-foreground);\n\t--color-muted: var(--muted);\n\t--color-secondary-foreground: var(--secondary-foreground);\n\t--color-secondary: var(--secondary);\n\t--color-primary-foreground: var(--primary-foreground);\n\t--color-primary: var(--primary);\n\t--color-popover-foreground: var(--popover-foreground);\n\t--color-popover: var(--popover);\n\t--color-card-foreground: var(--card-foreground);\n\t--color-card: var(--card);\n\t--radius: 0.625rem;\n\t--radius-sm: calc(var(--radius) - 4px);\n\t--radius-md: calc(var(--radius) - 2px);\n\t--radius-lg: var(--radius);\n\t--radius-xl: calc(var(--radius) + 4px);\n}\n\n[data-theme='light'] {\n\t--background: oklch(1 0 0);\n\t--foreground: oklch(0.145 0 0);\n\t--card: oklch(1 0 0);\n\t--card-foreground: oklch(0.145 0 0);\n\t--popover: oklch(1 0 0);\n\t--popover-foreground: oklch(0.145 0 0);\n\t--primary: oklch(0.205 0 0);\n\t--primary-foreground: oklch(0.985 0 0);\n\t--secondary: oklch(0.97 0 0);\n\t--secondary-foreground: oklch(0.205 0 0);\n\t--muted: oklch(0.97 0 0);\n\t--muted-foreground: oklch(0.556 0 0);\n\t--accent: oklch(0.97 0 0);\n\t--accent-foreground: oklch(0.205 0 0);\n\t--destructive: oklch(0.577 0.245 27.325);\n\t--border: oklch(0.922 0 0);\n\t--input: oklch(0.922 0 0);\n\t--ring: oklch(0.708 0 0);\n\t--chart-1: oklch(0.646 0.222 41.116);\n\t--chart-2: oklch(0.6 0.118 184.704);\n\t--chart-3: oklch(0.398 0.07 227.392);\n\t--chart-4: oklch(0.828 0.189 84.429);\n\t--chart-5: oklch(0.769 0.188 70.08);\n\t--sidebar: oklch(0.985 0 0);\n\t--sidebar-foreground: oklch(0.145 0 0);\n\t--sidebar-primary: oklch(0.205 0 0);\n\t--sidebar-primary-foreground: oklch(0.985 0 0);\n\t--sidebar-accent: oklch(0.97 0 0);\n\t--sidebar-accent-foreground: oklch(0.205 0 0);\n\t--sidebar-border: oklch(0.922 0 0);\n\t--sidebar-ring: oklch(0.708 0 0);\n}\n\n[data-theme='dark'] {\n\t--background: oklch(0.145 0 0);\n\t--foreground: oklch(0.985 0 0);\n\t--card: oklch(0.205 0 0);\n\t--card-foreground: oklch(0.985 0 0);\n\t--popover: oklch(0.205 0 0);\n\t--popover-foreground: oklch(0.985 0 0);\n\t--primary: oklch(0.922 0 0);\n\t--primary-foreground: oklch(0.205 0 0);\n\t--secondary: oklch(0.269 0 0);\n\t--secondary-foreground: oklch(0.985 0 0);\n\t--muted: oklch(0.269 0 0);\n\t--muted-foreground: oklch(0.708 0 0);\n\t--accent: oklch(0.269 0 0);\n\t--accent-foreground: oklch(0.985 0 0);\n\t--destructive: oklch(0.704 0.191 22.216);\n\t--border: oklch(1 0 0 / 10%);\n\t--input: oklch(1 0 0 / 15%);\n\t--ring: oklch(0.556 0 0);\n\t--chart-1: oklch(0.488 0.243 264.376);\n\t--chart-2: oklch(0.696 0.17 162.48);\n\t--chart-3: oklch(0.769 0.188 70.08);\n\t--chart-4: oklch(0.627 0.265 303.9);\n\t--chart-5: oklch(0.645 0.246 16.439);\n\t--sidebar: oklch(0.205 0 0);\n\t--sidebar-foreground: oklch(0.985 0 0);\n\t--sidebar-primary: oklch(0.488 0.243 264.376);\n\t--sidebar-primary-foreground: oklch(0.985 0 0);\n\t--sidebar-accent: oklch(0.269 0 0);\n\t--sidebar-accent-foreground: oklch(0.985 0 0);\n\t--sidebar-border: oklch(1 0 0 / 10%);\n\t--sidebar-ring: oklch(0.556 0 0);\n}\n\n[data-theme='modern-minimal'] {\n\t--background: oklch(1 0 0);\n\t--foreground: oklch(0.32 0 0);\n\t--card: oklch(1 0 0);\n\t--card-foreground: oklch(0.32 0 0);\n\t--popover: oklch(1 0 0);\n\t--popover-foreground: oklch(0.32 0 0);\n\t--primary: oklch(0.62 0.19 259.81);\n\t--primary-foreground: oklch(1 0 0);\n\t--secondary: oklch(0.97 0 264.54);\n\t--secondary-foreground: oklch(0.45 0.03 256.8);\n\t--muted: oklch(0.98 0 247.84);\n\t--muted-foreground: oklch(0.55 0.02 264.36);\n\t--accent: oklch(0.95 0.03 236.82);\n\t--accent-foreground: oklch(0.38 0.14 265.52);\n\t--destructive: oklch(0.64 0.21 25.33);\n\t--destructive-foreground: oklch(1 0 0);\n\t--border: oklch(0.93 0.01 264.53);\n\t--input: oklch(0.93 0.01 264.53);\n\t--ring: oklch(0.62 0.19 259.81);\n\t--chart-1: oklch(0.62 0.19 259.81);\n\t--chart-2: oklch(0.55 0.22 262.88);\n\t--chart-3: oklch(0.49 0.22 264.38);\n\t--chart-4: oklch(0.42 0.18 265.64);\n\t--chart-5: oklch(0.38 0.14 265.52);\n\t--sidebar: oklch(0.98 0 247.84);\n\t--sidebar-foreground: oklch(0.32 0 0);\n\t--sidebar-primary: oklch(0.62 0.19 259.81);\n\t--sidebar-primary-foreground: oklch(1 0 0);\n\t--sidebar-accent: oklch(0.95 0.03 236.82);\n\t--sidebar-accent-foreground: oklch(0.38 0.14 265.52);\n\t--sidebar-border: oklch(0.93 0.01 264.53);\n\t--sidebar-ring: oklch(0.62 0.19 259.81);\n\t--font-sans: Inter, sans-serif;\n\t--font-serif: Source Serif 4, serif;\n\t--font-mono: JetBrains Mono, monospace;\n\t--shadow-2xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);\n\t--shadow-xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);\n\t--shadow-sm: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);\n\t--shadow: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);\n\t--shadow-md: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 2px 4px -1px hsl(0 0% 0% / 0.1);\n\t--shadow-lg: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 4px 6px -1px hsl(0 0% 0% / 0.1);\n\t--shadow-xl: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 8px 10px -1px hsl(0 0% 0% / 0.1);\n\t--shadow-2xl: 0 1px 3px 0px hsl(0 0% 0% / 0.25);\n}\n\n[data-theme='kodama-grove'] {\n\t--background: oklch(0.88 0.05 91.79);\n\t--foreground: oklch(0.43 0.03 59.22);\n\t--card: oklch(0.89 0.04 87.57);\n\t--card-foreground: oklch(0.43 0.03 59.22);\n\t--popover: oklch(0.94 0.03 89.85);\n\t--popover-foreground: oklch(0.43 0.03 59.22);\n\t--primary: oklch(0.67 0.11 118.91);\n\t--primary-foreground: oklch(0.99 0.01 88.64);\n\t--secondary: oklch(0.85 0.06 91.15);\n\t--secondary-foreground: oklch(0.43 0.03 59.22);\n\t--muted: oklch(0.85 0.06 91.15);\n\t--muted-foreground: oklch(0.58 0.03 60.93);\n\t--accent: oklch(0.84 0.07 90.33);\n\t--accent-foreground: oklch(0.43 0.03 59.22);\n\t--destructive: oklch(0.71 0.1 29.98);\n\t--destructive-foreground: oklch(0.98 0.01 91.48);\n\t--border: oklch(0.69 0.04 59.84);\n\t--input: oklch(0.84 0.07 90.33);\n\t--ring: oklch(0.73 0.06 130.85);\n\t--chart-1: oklch(0.73 0.06 130.85);\n\t--chart-2: oklch(0.68 0.06 132.45);\n\t--chart-3: oklch(0.82 0.03 136.65);\n\t--chart-4: oklch(0.59 0.05 137.62);\n\t--chart-5: oklch(0.52 0.04 137.19);\n\t--sidebar: oklch(0.86 0.06 90.52);\n\t--sidebar-foreground: oklch(0.43 0.03 59.22);\n\t--sidebar-primary: oklch(0.73 0.06 130.85);\n\t--sidebar-primary-foreground: oklch(0.99 0.01 88.64);\n\t--sidebar-accent: oklch(0.92 0.02 88);\n\t--sidebar-accent-foreground: oklch(0.43 0.03 59.22);\n\t--sidebar-border: oklch(0.91 0.02 88);\n\t--sidebar-ring: oklch(0.73 0.06 130.85);\n\t--font-sans: Merriweather, serif;\n\t--font-serif: Source Serif 4, serif;\n\t--font-mono: JetBrains Mono, monospace;\n\t--radius: 0.425rem;\n\t--shadow-2xs: 3px 3px 2px 0px hsl(88 22% 35% / 0.07);\n\t--shadow-xs: 3px 3px 2px 0px hsl(88 22% 35% / 0.07);\n\t--shadow-sm: 3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 1px 2px -1px hsl(88 22% 35% / 0.15);\n\t--shadow: 3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 1px 2px -1px hsl(88 22% 35% / 0.15);\n\t--shadow-md: 3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 2px 4px -1px hsl(88 22% 35% / 0.15);\n\t--shadow-lg: 3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 4px 6px -1px hsl(88 22% 35% / 0.15);\n\t--shadow-xl: 3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 8px 10px -1px hsl(88 22% 35% / 0.15);\n\t--shadow-2xl: 3px 3px 2px 0px hsl(88 22% 35% / 0.38);\n}\n\n[data-theme='neo-brutalism'] {\n\t--background: oklch(1 0 0);\n\t--foreground: oklch(0 0 0);\n\t--card: oklch(1 0 0);\n\t--card-foreground: oklch(0 0 0);\n\t--popover: oklch(1 0 0);\n\t--popover-foreground: oklch(0 0 0);\n\t--primary: oklch(0.65 0.24 26.97);\n\t--primary-foreground: oklch(1 0 0);\n\t--secondary: oklch(0.97 0.21 109.77);\n\t--secondary-foreground: oklch(0 0 0);\n\t--muted: oklch(0.96 0 0);\n\t--muted-foreground: oklch(0.32 0 0);\n\t--accent: oklch(0.56 0.24 260.82);\n\t--accent-foreground: oklch(1 0 0);\n\t--destructive: oklch(0 0 0);\n\t--destructive-foreground: oklch(1 0 0);\n\t--border: oklch(0 0 0);\n\t--input: oklch(0 0 0);\n\t--ring: oklch(0.65 0.24 26.97);\n\t--chart-1: oklch(0.65 0.24 26.97);\n\t--chart-2: oklch(0.97 0.21 109.77);\n\t--chart-3: oklch(0.56 0.24 260.82);\n\t--chart-4: oklch(0.73 0.25 142.5);\n\t--chart-5: oklch(0.59 0.27 328.36);\n\t--sidebar: oklch(0.96 0 0);\n\t--sidebar-foreground: oklch(0 0 0);\n\t--sidebar-primary: oklch(0.65 0.24 26.97);\n\t--sidebar-primary-foreground: oklch(1 0 0);\n\t--sidebar-accent: oklch(0.56 0.24 260.82);\n\t--sidebar-accent-foreground: oklch(1 0 0);\n\t--sidebar-border: oklch(0 0 0);\n\t--sidebar-ring: oklch(0.65 0.24 26.97);\n\t--font-sans: DM Sans, sans-serif;\n\t--font-serif: ui-serif, Georgia, Cambria, 'Times New Roman', Times, serif;\n\t--font-mono: Space Mono, monospace;\n\t--radius: 0px;\n\t--shadow-2xs: 4px 4px 0px 0px hsl(0 0% 0% / 0.5);\n\t--shadow-xs: 4px 4px 0px 0px hsl(0 0% 0% / 0.5);\n\t--shadow-sm: 4px 4px 0px 0px hsl(0 0% 0% / 1), 4px 1px 2px -1px hsl(0 0% 0% / 1);\n\t--shadow: 4px 4px 0px 0px hsl(0 0% 0% / 1), 4px 1px 2px -1px hsl(0 0% 0% / 1);\n\t--shadow-md: 4px 4px 0px 0px hsl(0 0% 0% / 1), 4px 2px 4px -1px hsl(0 0% 0% / 1);\n\t--shadow-lg: 4px 4px 0px 0px hsl(0 0% 0% / 1), 4px 4px 6px -1px hsl(0 0% 0% / 1);\n\t--shadow-xl: 4px 4px 0px 0px hsl(0 0% 0% / 1), 4px 8px 10px -1px hsl(0 0% 0% / 1);\n\t--shadow-2xl: 4px 4px 0px 0px hsl(0 0% 0% / 2.5);\n}\n\n[data-theme='vintage-paper'] {\n\t--background: oklch(0.96 0.02 90.24);\n\t--foreground: oklch(0.38 0.02 64.34);\n\t--card: oklch(0.99 0.01 87.47);\n\t--card-foreground: oklch(0.38 0.02 64.34);\n\t--popover: oklch(0.99 0.01 87.47);\n\t--popover-foreground: oklch(0.38 0.02 64.34);\n\t--primary: oklch(0.62 0.08 65.54);\n\t--primary-foreground: oklch(1 0 0);\n\t--secondary: oklch(0.88 0.03 85.57);\n\t--secondary-foreground: oklch(0.43 0.03 64.93);\n\t--muted: oklch(0.92 0.02 83.06);\n\t--muted-foreground: oklch(0.54 0.04 71.17);\n\t--accent: oklch(0.83 0.04 88.81);\n\t--accent-foreground: oklch(0.38 0.02 64.34);\n\t--destructive: oklch(0.55 0.14 32.91);\n\t--destructive-foreground: oklch(1 0 0);\n\t--border: oklch(0.86 0.03 84.59);\n\t--input: oklch(0.86 0.03 84.59);\n\t--ring: oklch(0.62 0.08 65.54);\n\t--chart-1: oklch(0.62 0.08 65.54);\n\t--chart-2: oklch(0.56 0.06 68.58);\n\t--chart-3: oklch(0.49 0.06 72.68);\n\t--chart-4: oklch(0.68 0.06 64.78);\n\t--chart-5: oklch(0.73 0.06 66.7);\n\t--sidebar: oklch(0.92 0.02 83.06);\n\t--sidebar-foreground: oklch(0.38 0.02 64.34);\n\t--sidebar-primary: oklch(0.62 0.08 65.54);\n\t--sidebar-primary-foreground: oklch(1 0 0);\n\t--sidebar-accent: oklch(0.83 0.04 88.81);\n\t--sidebar-accent-foreground: oklch(0.38 0.02 64.34);\n\t--sidebar-border: oklch(0.86 0.03 84.59);\n\t--sidebar-ring: oklch(0.62 0.08 65.54);\n\t--font-sans: Libre Baskerville, serif;\n\t--font-serif: Lora, serif;\n\t--font-mono: IBM Plex Mono, monospace;\n\t--radius: 0.25rem;\n\t--shadow-2xs: 2px 3px 5px 0px hsl(28 13% 20% / 0.06);\n\t--shadow-xs: 2px 3px 5px 0px hsl(28 13% 20% / 0.06);\n\t--shadow-sm: 2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 1px 2px -1px hsl(28 13% 20% / 0.12);\n\t--shadow: 2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 1px 2px -1px hsl(28 13% 20% / 0.12);\n\t--shadow-md: 2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 2px 4px -1px hsl(28 13% 20% / 0.12);\n\t--shadow-lg: 2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 4px 6px -1px hsl(28 13% 20% / 0.12);\n\t--shadow-xl: 2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 8px 10px -1px hsl(28 13% 20% / 0.12);\n\t--shadow-2xl: 2px 3px 5px 0px hsl(28 13% 20% / 0.3);\n}\n\n@layer base {\n\t* {\n\t\t@apply border-border outline-ring/50;\n\t}\n\tbody {\n\t\t@apply bg-background text-foreground;\n\t}\n}\n",
			"type": "registry:example",
			"target": "./app/globals.css"
		},
		{
			"path": "./app/layout.tsx",
			"content": "import { GlobalToaster } from '@/components/ui/base/global-toaster'\nimport { ThemeProvider } from '@/components/ui/base/theme-provider'\nimport '@/lib/env'\nimport type { Metadata } from 'next'\nimport { Geist, Geist_Mono } from 'next/font/google'\nimport { Suspense } from 'react'\nimport './globals.css'\n\nconst geistSans = Geist({\n\tvariable: '--font-geist-sans',\n\tsubsets: ['latin'],\n})\n\nconst geistMono = Geist_Mono({\n\tvariable: '--font-geist-mono',\n\tsubsets: ['latin'],\n})\n\nexport const metadata: Metadata = {\n\ttitle: 'Create Next App',\n\tdescription: 'Generated by create next app',\n}\n\nexport default function RootLayout({\n\tchildren,\n}: Readonly<{\n\tchildren: React.ReactNode\n}>) {\n\treturn (\n\t\t<html lang='en' suppressHydrationWarning>\n\t\t\t<body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>\n\t\t\t\t<ThemeProvider defaultTheme='light' disableTransitionOnChange>\n\t\t\t\t\t{children}\n\t\t\t\t\t<Suspense>\n\t\t\t\t\t\t<GlobalToaster />\n\t\t\t\t\t</Suspense>\n\t\t\t\t</ThemeProvider>\n\t\t\t</body>\n\t\t</html>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/layout.tsx"
		},
		{
			"path": "./app/page.tsx",
			"content": "import { buttonVariants } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Brain, FileText, FolderOpen, LucideIcon, Search, Upload, Zap } from 'lucide-react'\nimport Link from 'next/link'\n\nconst appName = 'Knownst'\nconst appSlogan = \"Your Company's Knowledge Should Work For You\"\n\nconst appSlogan2 = 'Find Knowledge in Seconds Using AI'\nconst appSlogan2Desc = 'Upload your documents and let our AI help you find exactly what you need, when you need it.'\n\nconst appSlogan3 = 'Never Lose Track of Critical Information Again'\nconst appSlogan3Desc = 'Keep company information organized and accessible with our powerful indexing system.'\n\nconst mainFeatures: { icon: LucideIcon; title: string; desc: string }[] = [\n\t{ icon: Zap, title: 'AI-Powered Search', desc: 'Find documents instantly with intelligent search capabilities' },\n\t{ icon: FolderOpen, title: 'Organized Knowledge', desc: 'Keep company information organized and accessible' },\n\t{ icon: FileText, title: 'Boost Productivity', desc: 'Save time and eliminate file-hunting frustration' },\n]\n\nconst secondaryFeatures: { icon: LucideIcon; title: string; desc: string }[] = [\n\t{ icon: Upload, title: 'Upload & Index', desc: 'Securely store company documents in one place with our powerful indexing system.' },\n\t{ icon: Search, title: 'Instant Search', desc: 'Find what you need in seconds with our lightning-fast search capabilities.' },\n\t{ icon: Brain, title: 'AI-Powered Insights', desc: \"Get relevant results tailored to your company's specific needs.\" },\n]\n\nexport default function RootPage() {\n\treturn (\n\t\t<div className='min-h-screen bg-background'>\n\t\t\t{/* Navigation */}\n\t\t\t<nav className='fixed top-0 left-0 right-0 z-50 border-b border-border/40 bg-background/80 backdrop-blur-sm'>\n\t\t\t\t<div className='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8'>\n\t\t\t\t\t<div className='flex items-center justify-between h-16'>\n\t\t\t\t\t\t<div className='flex items-center'>\n\t\t\t\t\t\t\t<span className='text-xl font-bold text-primary'>{appName}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='flex items-center gap-4'>\n\t\t\t\t\t\t\t<Link className={buttonVariants({ variant: 'ghost' })} href='/login'>\n\t\t\t\t\t\t\t\tSign in\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t<Link className={buttonVariants()} href='/register'>\n\t\t\t\t\t\t\t\tGet started\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</nav>\n\n\t\t\t{/* Hero Section */}\n\t\t\t<section className='relative py-24 px-4 sm:px-6 lg:px-8 overflow-hidden'>\n\t\t\t\t<div className='absolute inset-0 bg-gradient-to-br from-primary/10 via-background to-primary/5' />\n\t\t\t\t<div className='absolute inset-0 bg-grid-pattern opacity-5' />\n\t\t\t\t<div className='relative max-w-7xl mx-auto'>\n\t\t\t\t\t<div className='grid grid-cols-1 lg:grid-cols-2 gap-16 items-start'>\n\t\t\t\t\t\t{/* Hero Content */}\n\t\t\t\t\t\t<div className='space-y-12'>\n\t\t\t\t\t\t\t<h1 className='text-4xl sm:text-5xl font-bold text-primary'>{appSlogan}</h1>\n\t\t\t\t\t\t\t<div className='space-y-8'>\n\t\t\t\t\t\t\t\t{mainFeatures.map((feature) => (\n\t\t\t\t\t\t\t\t\t<div key={feature.title} className='flex items-start gap-4'>\n\t\t\t\t\t\t\t\t\t\t<div className='shrink-0'>\n\t\t\t\t\t\t\t\t\t\t\t<feature.icon className='h-6 w-6 text-primary' />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<h3 className='text-lg font-medium'>{feature.title}</h3>\n\t\t\t\t\t\t\t\t\t\t\t<p className='text-muted-foreground'>{feature.desc}</p>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* Search Interface */}\n\t\t\t\t\t\t<div className='relative'>\n\t\t\t\t\t\t\t<div className='w-full h-[500px] relative rounded-lg bg-gradient-to-br from-primary/10 via-background to-primary/5 border border-primary/20 overflow-hidden'>\n\t\t\t\t\t\t\t\t{/* <Image\n\t\t\t\t\t\t\t\t\tsrc='https://sdmntprwestus.oaiusercontent.com/files/00000000-9a80-5230-bf2b-c4b248e4c36f/raw?se=2025-03-27T01%3A26%3A29Z&sp=r&sv=2024-08-04&sr=b&scid=63e047fb-6d6b-548d-87af-93168bb2770e&skoid=51916beb-8d6a-49b8-8b29-ca48ed86557e&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2025-03-26T20%3A49%3A35Z&ske=2025-03-27T20%3A49%3A35Z&sks=b&skv=2024-08-04&sig=%2B%2BbqX9d%2BPRdKCOulxZALgokgKch9LHO97m81CCx58qE%3D'\n\t\t\t\t\t\t\t\t\talt='Knownst AI Knowledge Assistant Interface'\n\t\t\t\t\t\t\t\t\tfill\n\t\t\t\t\t\t\t\t\tclassName='object-contain p-4'\n\t\t\t\t\t\t\t\t\tsizes='(max-width: 1024px) 100vw, 50vw'\n\t\t\t\t\t\t\t\t\tpriority\n\t\t\t\t\t\t\t\t/> */}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</section>\n\n\t\t\t{/* Features Section */}\n\t\t\t<section className='py-24 px-4 sm:px-6 lg:px-8 relative overflow-hidden bg-gradient-to-b from-background via-primary/5 to-background'>\n\t\t\t\t<div className='relative max-w-7xl mx-auto'>\n\t\t\t\t\t<div className='text-center mb-16'>\n\t\t\t\t\t\t<h2 className='text-3xl sm:text-4xl font-bold mb-6 bg-clip-text text-transparent bg-gradient-to-r from-primary to-primary/60'>\n\t\t\t\t\t\t\t{appSlogan2}\n\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t<p className='text-xl text-muted-foreground max-w-2xl mx-auto'>{appSlogan2Desc}</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='grid grid-cols-1 md:grid-cols-3 gap-8'>\n\t\t\t\t\t\t{secondaryFeatures.map((feature) => (\n\t\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\t\tkey={feature.title}\n\t\t\t\t\t\t\t\tclassName='border-primary/20 hover:border-primary/40 transition-all duration-300 hover:shadow-lg hover:shadow-primary/10 hover:-translate-y-1'>\n\t\t\t\t\t\t\t\t<CardHeader>\n\t\t\t\t\t\t\t\t\t<CardTitle className='flex items-center gap-2 text-primary'>\n\t\t\t\t\t\t\t\t\t\t<feature.icon className='h-5 w-5' />\n\t\t\t\t\t\t\t\t\t\t{feature.title}\n\t\t\t\t\t\t\t\t\t</CardTitle>\n\t\t\t\t\t\t\t\t</CardHeader>\n\t\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t\t<p className='text-muted-foreground'>{feature.desc}</p>\n\t\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</section>\n\n\t\t\t{/* Benefits Section */}\n\t\t\t<section className='py-24 px-4 sm:px-6 lg:px-8 relative overflow-hidden'>\n\t\t\t\t<div className='relative max-w-7xl mx-auto'>\n\t\t\t\t\t<div className='grid grid-cols-1 lg:grid-cols-2 gap-16 items-center'>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h2 className='text-3xl sm:text-4xl font-bold mb-8 bg-clip-text text-transparent bg-gradient-to-r from-primary to-primary/60'>\n\t\t\t\t\t\t\t\t{appSlogan}\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<ul className='space-y-6'>\n\t\t\t\t\t\t\t\t{mainFeatures.map((feature) => (\n\t\t\t\t\t\t\t\t\t<li key={feature.title} className='flex items-start gap-4 group'>\n\t\t\t\t\t\t\t\t\t\t<feature.icon className='h-6 w-6 text-primary mt-1 group-hover:scale-110 transition-transform duration-300' />\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<h3 className='font-semibold mb-1'>{feature.title}</h3>\n\t\t\t\t\t\t\t\t\t\t\t<p className='text-muted-foreground'>{feature.desc}</p>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='relative'>\n\t\t\t\t\t\t\t<div className='w-full h-[500px] relative rounded-lg bg-gradient-to-br from-primary/10 via-background to-primary/5 border border-primary/20 overflow-hidden'>\n\t\t\t\t\t\t\t\t{/* <Image\n\t\t\t\t\t\t\t\t\tsrc='https://sdmntprwestus.oaiusercontent.com/files/00000000-9a80-5230-bf2b-c4b248e4c36f/raw?se=2025-03-27T01%3A26%3A29Z&sp=r&sv=2024-08-04&sr=b&scid=63e047fb-6d6b-548d-87af-93168bb2770e&skoid=51916beb-8d6a-49b8-8b29-ca48ed86557e&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2025-03-26T20%3A49%3A35Z&ske=2025-03-27T20%3A49%3A35Z&sks=b&skv=2024-08-04&sig=%2B%2BbqX9d%2BPRdKCOulxZALgokgKch9LHO97m81CCx58qE%3D'\n\t\t\t\t\t\t\t\t\talt='Knownst AI Knowledge Assistant Interface'\n\t\t\t\t\t\t\t\t\tfill\n\t\t\t\t\t\t\t\t\tclassName='object-contain p-4'\n\t\t\t\t\t\t\t\t\tsizes='(max-width: 1024px) 100vw, 50vw'\n\t\t\t\t\t\t\t\t\tpriority\n\t\t\t\t\t\t\t\t/> */}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</section>\n\n\t\t\t{/* CTA Section */}\n\t\t\t<section className='py-24 px-4 sm:px-6 lg:px-8 relative overflow-hidden'>\n\t\t\t\t<div className='absolute inset-0 bg-gradient-to-r from-primary via-primary/90 to-primary' />\n\t\t\t\t<div className='absolute inset-0 bg-grid-pattern opacity-10' />\n\t\t\t\t<div className='relative max-w-4xl mx-auto text-center'>\n\t\t\t\t\t<h2 className='text-3xl sm:text-4xl font-bold mb-6 text-primary-foreground'>{appSlogan3}</h2>\n\t\t\t\t\t<p className='text-xl mb-12 max-w-2xl mx-auto text-primary-foreground/90'>{appSlogan3Desc}</p>\n\t\t\t\t\t<Link className={buttonVariants({ size: 'lg', variant: 'secondary' })} href='/register'>\n\t\t\t\t\t\tGet started now\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t</div>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/page.tsx"
		},
		{
			"path": "./components/auth-layout.tsx",
			"content": "import Link from 'next/link'\nimport { ReactNode } from 'react'\nimport { Icons } from './icons'\nimport { buttonVariants } from './ui/button'\nimport { Card, CardDescription, CardHeader, CardTitle } from './ui/card'\n\nexport function AuthLayout({ children, title, desc }: { children: ReactNode; title: string; desc: string }) {\n\treturn (\n\t\t<div className='min-h-screen bg-background relative flex flex-col sm:flex-row sm:items-center sm:justify-center p-4 sm:p-8 gap-4 sm:gap-0'>\n\t\t\t<div className='sm:absolute top-4 left-4 sm:top-8 sm:left-8'>\n\t\t\t\t<Link className={buttonVariants({ variant: 'ghost' })} href='/'>\n\t\t\t\t\t<Icons.chevronLeft />\n\t\t\t\t\tBack to Home\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t\t<div className='w-full sm:max-w-md'>\n\t\t\t\t<Card className='border-0 shadow-none sm:border sm:shadow-sm'>\n\t\t\t\t\t<CardHeader className='text-center'>\n\t\t\t\t\t\t<CardTitle className='text-2xl font-bold'>{title}</CardTitle>\n\t\t\t\t\t\t<CardDescription>{desc}</CardDescription>\n\t\t\t\t\t</CardHeader>\n\t\t\t\t\t{children}\n\t\t\t\t</Card>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n",
			"type": "registry:block"
		},
		{
			"path": "./components/icons.tsx",
			"content": "import { Check, ChevronDown, ChevronLeft, LogOut } from 'lucide-react'\n\nexport const Icons = {\n\tcheck: Check,\n\tchevronDown: ChevronDown,\n\tchevronLeft: ChevronLeft,\n\tlogout: LogOut,\n}\n",
			"type": "registry:block"
		},
		{
			"path": "./docker-compose.yml",
			"content": "version: '3.9'\n\nservices:\n    db:\n        image: postgres\n        ports:\n            - '5432:5432'\n        restart: always\n        shm_size: 128mb\n        environment:\n            POSTGRES_USER: postgres\n            POSTGRES_PASSWORD: password\n            POSTGRES_DB: postgres\n",
			"type": "registry:example",
			"target": "~/docker-compose.yml"
		},
		{
			"path": "./example.env",
			"content": "# https://www.lastpass.com/features/password-generator\nAUTH_SECRET=\"\"\n\n# https://github.com/settings/developers\n# Callback URL: http://localhost:3000/api/auth/callback/github\nAUTH_GITHUB_ID=\"\"\nAUTH_GITHUB_SECRET=\"\"\n\n# https://console.cloud.google.com/welcome\n# Callback URL: http://localhost:3000/api/auth/callback/google\nAUTH_GOOGLE_ID=\"\"\nAUTH_GOOGLE_SECRET=\"\"\n\n# https://resend.com/api-keys\nAUTH_RESEND_KEY=\"\"\nAUTH_RESEND_EMAIL=\"noreply@example.com\"\n\n# https://console.aws.amazon.com/console\nAWS_ACCESS_KEY_ID=\"\"\nAWS_SECRET_ACCESS_KEY=\"\"\nAWS_REGION=\"us-east-1\"\nAWS_PUBLIC_BUCKET_NAME=\"public\"\n\nDATABASE_URL=\"postgresql://postgres:password@localhost:5432/postgres?schema=public\"\n\nNEXT_PUBLIC_SITE_URL=\"http://localhost:3000\"\n",
			"type": "registry:example",
			"target": "~/example.env"
		},
		{
			"path": "./lib/auth.ts",
			"content": "import { loginSchema } from '@/validators/auth'\nimport { PrismaAdapter } from '@auth/prisma-adapter'\nimport bcrypt from 'bcryptjs'\nimport NextAuth, { NextAuthConfig } from 'next-auth'\nimport Credentials from 'next-auth/providers/credentials'\nimport Github from 'next-auth/providers/github'\nimport Google from 'next-auth/providers/google'\nimport Resend from 'next-auth/providers/resend'\nimport prisma from './db'\nimport { env } from './env'\nimport { AuthUser } from './utils'\n\nexport const authConfig = {\n\tadapter: PrismaAdapter(prisma),\n\tcallbacks: {\n\t\tauthorized: ({ auth, request: { nextUrl } }) => {\n\t\t\tconst unprotectedRoutes = ['/', '/login', '/register', '/forgot', '/privacy', '/terms']\n\n\t\t\tconst isAuthed = !!auth?.user\n\t\t\tconst isAuthRoute = unprotectedRoutes.includes(nextUrl.pathname)\n\n\t\t\tif (!isAuthRoute) {\n\t\t\t\tif (isAuthed) return true\n\t\t\t\treturn false\n\t\t\t} else if (isAuthed) return Response.redirect(new URL('/dashboard', nextUrl))\n\t\t\treturn true\n\t\t},\n\t},\n\tpages: { signIn: '/login' },\n\tproviders: [\n\t\tCredentials({\n\t\t\tcredentials: { email: {}, password: {} },\n\t\t\tauthorize: async (credentials) => {\n\t\t\t\tconst { email, password } = await loginSchema.parseAsync(credentials)\n\t\t\t\tconst user = await prisma.user.findUnique({ where: { email } })\n\n\t\t\t\tif (!user) throw new Error('User not found')\n\t\t\t\telse if (!user.passwordHash) throw new Error('User does not have a password')\n\t\t\t\telse if (!(await bcrypt.compare(password, user.passwordHash))) throw new Error('Password does not match')\n\n\t\t\t\treturn user\n\t\t\t},\n\t\t}),\n\t\tGithub({ allowDangerousEmailAccountLinking: true }),\n\t\tGoogle({ allowDangerousEmailAccountLinking: true }),\n\t\tResend({ from: env.AUTH_RESEND_EMAIL }),\n\t],\n\tsession: { strategy: 'jwt' },\n} satisfies NextAuthConfig\n\nexport const { handlers, auth: session, signIn, signOut } = NextAuth(authConfig)\n\nexport const auth = async (): Promise<AuthUser> => {\n\tconst session = await NextAuth(authConfig).auth()\n\tif (!session?.user) throw new Error('Not authenticated.')\n\n\tconst user = await prisma.user.findFirst({ where: { email: session.user.email ?? '' } })\n\tif (!user) throw new Error('User not found')\n\n\treturn user\n}\n",
			"type": "registry:lib"
		},
		{
			"path": "./lib/db.ts",
			"content": "import { PrismaClient } from '@prisma/client'\n\nconst prismaClientSingleton = () => {\n\treturn new PrismaClient()\n}\n\ndeclare const globalThis: {\n\tprismaGlobal: ReturnType<typeof prismaClientSingleton>\n} & typeof global\n\nconst prisma = globalThis.prismaGlobal ?? prismaClientSingleton()\n\nexport default prisma\n\nif (process.env.NODE_ENV !== 'production') globalThis.prismaGlobal = prisma\n",
			"type": "registry:lib"
		},
		{
			"path": "./lib/env.ts",
			"content": "import { createEnv } from '@t3-oss/env-nextjs'\nimport { z } from 'zod'\n\nexport const env = createEnv({\n\tserver: {\n\t\tAUTH_SECRET: z.string().min(1),\n\n\t\tAUTH_GITHUB_ID: z.string().min(1),\n\t\tAUTH_GITHUB_SECRET: z.string().min(1),\n\n\t\tAUTH_GOOGLE_ID: z.string().min(1),\n\t\tAUTH_GOOGLE_SECRET: z.string().min(1),\n\n\t\tAUTH_RESEND_KEY: z.string().min(1),\n\t\tAUTH_RESEND_EMAIL: z.string().email(),\n\n\t\tAWS_ACCESS_KEY_ID: z.string().min(1),\n\t\tAWS_SECRET_ACCESS_KEY: z.string().min(1),\n\t\tAWS_REGION: z.string().min(1),\n\t\tAWS_PUBLIC_BUCKET_NAME: z.string().min(1),\n\n\t\tDATABASE_URL: z.string().url(),\n\t},\n\tclient: { NEXT_PUBLIC_SITE_URL: z.string().url() },\n\truntimeEnv: {\n\t\tAUTH_SECRET: process.env.AUTH_SECRET,\n\n\t\tAUTH_GITHUB_ID: process.env.AUTH_GITHUB_ID,\n\t\tAUTH_GITHUB_SECRET: process.env.AUTH_GITHUB_SECRET,\n\n\t\tAUTH_GOOGLE_ID: process.env.AUTH_GOOGLE_ID,\n\t\tAUTH_GOOGLE_SECRET: process.env.AUTH_GOOGLE_SECRET,\n\n\t\tAUTH_RESEND_KEY: process.env.AUTH_RESEND_KEY,\n\t\tAUTH_RESEND_EMAIL: process.env.AUTH_RESEND_EMAIL,\n\n\t\tAWS_ACCESS_KEY_ID: process.env.AWS_ACCESS_KEY_ID,\n\t\tAWS_SECRET_ACCESS_KEY: process.env.AWS_SECRET_ACCESS_KEY,\n\t\tAWS_REGION: process.env.AWS_REGION,\n\t\tAWS_PUBLIC_BUCKET_NAME: process.env.AWS_PUBLIC_BUCKET_NAME,\n\n\t\tDATABASE_URL: process.env.DATABASE_URL,\n\n\t\tNEXT_PUBLIC_SITE_URL: process.env.NEXT_PUBLIC_SITE_URL,\n\t},\n})\n",
			"type": "registry:lib"
		},
		{
			"path": "./lib/s3.ts",
			"content": "import { S3Client } from '@aws-sdk/client-s3'\nexport const s3 = new S3Client()\n",
			"type": "registry:lib"
		},
		{
			"path": "./lib/utils.ts",
			"content": "import { User } from '@prisma/client'\nimport { clsx, type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport type AuthUser = User\n\nexport function cn(...inputs: ClassValue[]) {\n\treturn twMerge(clsx(inputs))\n}\n\nconst toastKeyMap = {\n\tblank: 'message',\n\terror: 'error',\n\tsuccess: 'success',\n} as const\n\nconst getToastRedirect = (path: string, type: keyof typeof toastKeyMap, message: string, arbitraryParams: string = '') => {\n\tconst key = toastKeyMap[type]\n\n\tlet redirectPath = `${path}?${key}=${encodeURIComponent(message)}`\n\tif (arbitraryParams) redirectPath += `&${arbitraryParams}`\n\n\treturn redirectPath\n}\n\nexport const getErrorRedirect = (path: string, message: string = '', arbitraryParams: string = '') =>\n\tgetToastRedirect(path, 'error', message, arbitraryParams)\n\nexport const getSuccessRedirect = (path: string, message: string = '', arbitraryParams: string = '') =>\n\tgetToastRedirect(path, 'success', message, arbitraryParams)\n",
			"type": "registry:lib"
		},
		{
			"path": "./middleware.ts",
			"content": "import NextAuth from 'next-auth'\nimport { authConfig } from './lib/auth'\n\nexport default NextAuth(authConfig).auth\nexport const config = {\n\tmatcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$).*)'],\n}\n",
			"type": "registry:example",
			"target": "~/middleware.ts"
		},
		{
			"path": "./prisma/migrations/20250408144905_init_auth/migration.sql",
			"content": "-- CreateTable\nCREATE TABLE \"User\" (\n    \"id\" TEXT NOT NULL,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL,\n    \"name\" TEXT,\n    \"email\" TEXT NOT NULL,\n    \"image\" TEXT,\n    \"emailVerified\" TIMESTAMP(3),\n    \"passwordHash\" TEXT,\n\n    CONSTRAINT \"User_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"Account\" (\n    \"userId\" TEXT NOT NULL,\n    \"type\" TEXT NOT NULL,\n    \"provider\" TEXT NOT NULL,\n    \"providerAccountId\" TEXT NOT NULL,\n    \"refresh_token\" TEXT,\n    \"access_token\" TEXT,\n    \"expires_at\" INTEGER,\n    \"token_type\" TEXT,\n    \"scope\" TEXT,\n    \"id_token\" TEXT,\n    \"session_state\" TEXT,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL,\n\n    CONSTRAINT \"Account_pkey\" PRIMARY KEY (\"provider\",\"providerAccountId\")\n);\n\n-- CreateTable\nCREATE TABLE \"Session\" (\n    \"sessionToken\" TEXT NOT NULL,\n    \"userId\" TEXT NOT NULL,\n    \"expires\" TIMESTAMP(3) NOT NULL,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL\n);\n\n-- CreateTable\nCREATE TABLE \"VerificationToken\" (\n    \"identifier\" TEXT NOT NULL,\n    \"token\" TEXT NOT NULL,\n    \"expires\" TIMESTAMP(3) NOT NULL,\n\n    CONSTRAINT \"VerificationToken_pkey\" PRIMARY KEY (\"identifier\",\"token\")\n);\n\n-- CreateTable\nCREATE TABLE \"Authenticator\" (\n    \"credentialID\" TEXT NOT NULL,\n    \"userId\" TEXT NOT NULL,\n    \"providerAccountId\" TEXT NOT NULL,\n    \"credentialPublicKey\" TEXT NOT NULL,\n    \"counter\" INTEGER NOT NULL,\n    \"credentialDeviceType\" TEXT NOT NULL,\n    \"credentialBackedUp\" BOOLEAN NOT NULL,\n    \"transports\" TEXT,\n\n    CONSTRAINT \"Authenticator_pkey\" PRIMARY KEY (\"userId\",\"credentialID\")\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"User_email_key\" ON \"User\"(\"email\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Session_sessionToken_key\" ON \"Session\"(\"sessionToken\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Authenticator_credentialID_key\" ON \"Authenticator\"(\"credentialID\");\n\n-- AddForeignKey\nALTER TABLE \"Account\" ADD CONSTRAINT \"Account_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"Session\" ADD CONSTRAINT \"Session_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"Authenticator\" ADD CONSTRAINT \"Authenticator_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n",
			"type": "registry:example",
			"target": "~/prisma/migrations/20250408144905_init_auth/migration.sql"
		},
		{
			"path": "./prisma/migrations/migration_lock.toml",
			"content": "# Please do not edit this file manually\n# It should be added in your version-control system (e.g., Git)\nprovider = \"postgresql\"",
			"type": "registry:example",
			"target": "~/prisma/migrations/migration_lock.toml"
		},
		{
			"path": "./prisma/schema/auth.prisma",
			"content": "model User {\n    id        String   @id @default(cuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n\n    name  String?\n    email String  @unique\n    image String?\n\n    emailVerified DateTime?\n    passwordHash  String?\n\n    accounts      Account[]\n    sessions      Session[]\n    // Optional for WebAuthn support\n    Authenticator Authenticator[]\n}\n\nmodel Account {\n    userId            String\n    type              String\n    provider          String\n    providerAccountId String\n    refresh_token     String?\n    access_token      String?\n    expires_at        Int?\n    token_type        String?\n    scope             String?\n    id_token          String?\n    session_state     String?\n    createdAt         DateTime @default(now())\n    updatedAt         DateTime @updatedAt\n    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n    @@id([provider, providerAccountId])\n}\n\nmodel Session {\n    sessionToken String   @unique\n    userId       String\n    expires      DateTime\n    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n    createdAt    DateTime @default(now())\n    updatedAt    DateTime @updatedAt\n}\n\nmodel VerificationToken {\n    identifier String\n    token      String\n    expires    DateTime\n\n    @@id([identifier, token])\n}\n\n// Optional for WebAuthn support\nmodel Authenticator {\n    credentialID         String  @unique\n    userId               String\n    providerAccountId    String\n    credentialPublicKey  String\n    counter              Int\n    credentialDeviceType String\n    credentialBackedUp   Boolean\n    transports           String?\n    user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n    @@id([userId, credentialID])\n}\n",
			"type": "registry:example",
			"target": "~/prisma/schema/auth.prisma"
		},
		{
			"path": "./prisma/schema/schema.prisma",
			"content": "datasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n",
			"type": "registry:example",
			"target": "~/prisma/schema/schema.prisma"
		},
		{
			"path": "./scripts/config-db.ts",
			"content": "import { readFileSync, writeFileSync } from 'fs'\nimport { join } from 'path'\n\nexport function main() {\n\ttry {\n\t\t// Read the current package.json\n\t\tconst packageJsonPath = join(process.cwd(), 'package.json')\n\t\tconst packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf-8'))\n\n\t\t// Add or update the prisma configuration\n\t\tpackageJson.prisma = { schema: './prisma/schema' }\n\n\t\t// Add or update the postinstall script\n\t\tpackageJson.scripts = {\n\t\t\t...packageJson.scripts,\n\t\t\tpostinstall: 'npx prisma generate',\n\t\t}\n\n\t\t// Write the updated package.json back to the file\n\t\twriteFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2))\n\n\t\tconsole.log('Successfully added Prisma configuration and postinstall script to package.json')\n\t} catch (error) {\n\t\tconsole.error('Error updating package.json:', error)\n\t\tprocess.exit(1)\n\t}\n}\n\nmain()\n",
			"type": "registry:example",
			"target": "~/scripts/config-db.ts"
		},
		{
			"path": "./scripts/config-files.ts",
			"content": "import { s3 } from '@/lib/s3'\nimport { CreateBucketCommand, PutBucketPolicyCommand, PutPublicAccessBlockCommand } from '@aws-sdk/client-s3'\n\nif (!process.env.AWS_PUBLIC_BUCKET_NAME) {\n\tconsole.error('AWS_PUBLIC_BUCKET_NAME is not set')\n\tprocess.exit(1)\n}\n\nexport async function main() {\n\tconst publicBucket = process.env.AWS_PUBLIC_BUCKET_NAME!\n\n\t// await s3.send(new DeleteBucketCommand({ Bucket: publicBucket }))\n\n\tawait s3.send(new CreateBucketCommand({ Bucket: publicBucket }))\n\n\tawait s3.send(\n\t\tnew PutPublicAccessBlockCommand({\n\t\t\tBucket: publicBucket,\n\t\t\tPublicAccessBlockConfiguration: {\n\t\t\t\tBlockPublicAcls: false,\n\t\t\t\tIgnorePublicAcls: false,\n\t\t\t\tBlockPublicPolicy: false,\n\t\t\t\tRestrictPublicBuckets: false,\n\t\t\t},\n\t\t})\n\t)\n\n\tawait s3.send(\n\t\tnew PutBucketPolicyCommand({\n\t\t\tBucket: publicBucket,\n\t\t\tPolicy: JSON.stringify({\n\t\t\t\tVersion: '2012-10-17',\n\t\t\t\tStatement: [\n\t\t\t\t\t{\n\t\t\t\t\t\tSid: 'PublicReadAvatars',\n\t\t\t\t\t\tEffect: 'Allow',\n\t\t\t\t\t\tPrincipal: '*',\n\t\t\t\t\t\tAction: 's3:GetObject',\n\t\t\t\t\t\tResource: `arn:aws:s3:::${publicBucket}/*`,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t})\n\t)\n}\n\nmain()\n",
			"type": "registry:example",
			"target": "~/scripts/config-files.ts"
		},
		{
			"path": "./validators/auth.ts",
			"content": "import { z } from 'zod'\n\nexport const loginSchema = z.object({\n\tcallbackUrl: z.string().min(1),\n\temail: z.string({ required_error: 'Email is required' }).min(1, { message: 'Email is required' }).email({ message: 'Invalid email' }),\n\tpassword: z.string({ required_error: 'Password is required' }).min(1, { message: 'Password is required' }),\n})\n\nexport const oauthSchema = z.object({\n\tcallbackUrl: z.string().min(1).default('/'),\n})\n\nexport const registerSchema = z\n\t.object({\n\t\tfirstName: z.string({ required_error: 'First name is required' }).min(1, { message: 'First name is required' }),\n\t\tlastName: z.string({ required_error: 'Last name is required' }).min(1, { message: 'Last name is required' }),\n\t\temail: z\n\t\t\t.string({ required_error: 'Email is required' })\n\t\t\t.min(1, { message: 'Email is required' })\n\t\t\t.email({ message: 'Invalid email' }),\n\t\tpassword: z.string({ required_error: 'Password is required' }).min(8, { message: 'Password must be at least 8 characters long' }),\n\t\tconfirmPassword: z.string({ required_error: 'Password confirmation is required' }),\n\t\tterms: z.boolean({ required_error: 'You must agree to the terms of service' }),\n\t})\n\t.refine(({ password, confirmPassword }) => password === confirmPassword, {\n\t\tmessage: 'Passwords do not match',\n\t\tpath: ['confirmPassword'],\n\t})\n\nexport const verifyEmailSchema = z.object({\n\temail: z.string({ required_error: 'Email is required' }).min(1, { message: 'Email is required' }).email({ message: 'Invalid email' }),\n})\n",
			"type": "registry:example",
			"target": "~/validators/auth.ts"
		},
		{
			"path": "./validators/user.ts",
			"content": "import { z } from 'zod'\n\nexport const updateAvatarSchema = z.object({\n\tfile: z\n\t\t.instanceof(File)\n\t\t.refine((f) => f.size > 0, 'File is required')\n\t\t.refine((f) => f.size <= 1024 * 1024, 'File must be 1MB or less'),\n})\n\nexport const updateUserSchema = z\n\t.object({\n\t\tname: z.string({ required_error: 'Name is required' }).min(1, { message: 'Name is required' }),\n\t\tpassword: z.string({ required_error: 'Password is required' }),\n\t\tconfirmPassword: z.string({ required_error: 'Confirm password is required' }),\n\t})\n\t.refine((arg) => (arg.password || arg.confirmPassword ? arg.password === arg.confirmPassword : true), {\n\t\tmessage: 'Passwords do not match',\n\t\tpath: ['confirmPassword'],\n\t})\n\t.refine((arg) => (arg.password || arg.confirmPassword ? arg.password.length >= 8 : true), {\n\t\tmessage: 'Password must be at least 8 characters long',\n\t\tpath: ['password'],\n\t})\n",
			"type": "registry:example",
			"target": "~/validators/user.ts"
		}
	],
	"tailwind": {},
	"cssVars": {},
	"meta": {},
	"docs": "Remember to run `npx tsx scripts/config-db.ts && npx tsx scripts/config-files.ts` to add the prisma configuration and scripts to package.json and setup S3 buckets"
}
