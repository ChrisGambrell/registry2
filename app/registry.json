{
	"name": "base",
	"type": "registry:block",
	"dependencies": [
		"@radix-ui/react-alert-dialog",
		"@radix-ui/react-checkbox",
		"@radix-ui/react-dialog",
		"@radix-ui/react-label",
		"@radix-ui/react-popover",
		"@radix-ui/react-select",
		"@radix-ui/react-slot",
		"cmdk",
		"next-themes",
		"sonner",
		"zod"
	],
	"devDependencies": ["knip"],
	"registryDependencies": [
		"alert-dialog",
		"button",
		"checkbox",
		"command",
		"dialog",
		"input",
		"label",
		"popover",
		"select",
		"sonner",
		"textarea"
	],
	"files": [
		{
			"path": "./components/ui/base/action-button.tsx",
			"content": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport { Loader2 } from 'lucide-react'\nimport { useFormStatus } from 'react-dom'\nimport { Button, ButtonProps } from './c-button'\n\nexport interface ActionButtonProps extends ButtonProps {\n\tloading?: boolean\n}\n\nexport function ActionButton({ children, className, disabled, loading, ...props }: ActionButtonProps) {\n\tconst { pending } = useFormStatus()\n\n\treturn (\n\t\t<Button className={cn('relative', className)} disabled={disabled || loading || pending} type='submit' {...props}>\n\t\t\t<span className={cn('flex items-center gap-2', { invisible: loading || pending })}>{children}</span>\n\t\t\t{(loading || pending) && (\n\t\t\t\t<div className='absolute m-auto'>\n\t\t\t\t\t<Loader2 className='size-5 animate-spin' />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</Button>\n\t)\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/action.ts",
			"content": "'use server'\n\nimport { ZodSchema } from 'zod'\nimport { ActionResult, OnValidResult, validateFormData } from './utils'\n\nexport async function handleFormAction<T extends Record<string, unknown>>(\n\tformData: FormData,\n\tschema: ZodSchema<T>,\n\tonValid: (data: T) => Promise<OnValidResult<T> | void>\n): Promise<ActionResult<T>> {\n\tconst parsed = validateFormData(formData, schema) as ActionResult<T>\n\tif (!parsed.success) return parsed\n\n\tconst result = await onValid(parsed.data!)\n\n\tif (result?.fieldErrors || result?.globalError) {\n\t\treturn {\n\t\t\tsuccess: false,\n\t\t\tsuccessMessage: null,\n\t\t\tfieldErrors: result.fieldErrors ?? {},\n\t\t\tglobalError: result.globalError ?? null,\n\t\t\tvalues: Object.fromEntries(Object.entries(parsed).map(([k, v]) => [k, String(v ?? '')])) as Partial<Record<keyof T, string>>,\n\t\t}\n\t}\n\n\treturn {\n\t\tsuccess: true,\n\t\tsuccessMessage: result?.successMessage ?? null,\n\t\tfieldErrors: {},\n\t\tglobalError: null,\n\t\tvalues: {},\n\t}\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/c-button.tsx",
			"content": "import { cn } from '@/lib/utils'\nimport { VariantProps } from 'class-variance-authority'\nimport { Button as ButtonBase, buttonVariants } from '../button'\n\nexport type ButtonProps = React.ComponentProps<'button'> & VariantProps<typeof buttonVariants> & { asChild?: boolean }\n\nexport function Button({ className, ...props }: ButtonProps) {\n\treturn <ButtonBase className={cn('cursor-pointer', className)} {...props} />\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/c-input.tsx",
			"content": "import { cn } from '@/lib/utils'\nimport { Input as InputBase } from '../input'\n\nexport function Input({ className, ...props }: React.ComponentProps<'input'>) {\n\treturn <InputBase className={cn('focus-visible:ring', className)} {...props} />\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/c-select.tsx",
			"content": "import { cn } from '@/lib/utils'\nimport { SelectItemProps, SelectTriggerProps } from '@radix-ui/react-select'\nimport {\n\tSelect,\n\tSelectContent,\n\tSelectGroup,\n\tSelectItem as SelectItemBase,\n\tSelectLabel,\n\tSelectScrollDownButton,\n\tSelectScrollUpButton,\n\tSelectSeparator,\n\tSelectTrigger as SelectTriggerBase,\n\tSelectValue,\n} from '../select'\n\nfunction SelectItem({ className, ...props }: SelectItemProps) {\n\treturn <SelectItemBase className={cn('cursor-pointer', className)} {...props} />\n}\n\nfunction SelectTrigger({ className, ...props }: SelectTriggerProps) {\n\treturn <SelectTriggerBase className={cn('focus-visible:ring cursor-pointer', className)} {...props} />\n}\n\nexport {\n\tSelect,\n\tSelectContent,\n\tSelectGroup,\n\tSelectItem,\n\tSelectLabel,\n\tSelectScrollDownButton,\n\tSelectScrollUpButton,\n\tSelectSeparator,\n\tSelectTrigger,\n\tSelectValue,\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/c-textarea.tsx",
			"content": "import { cn } from '@/lib/utils'\nimport { Textarea as TextareaBase } from '../textarea'\n\nexport function Textarea({ className, ...props }: React.ComponentProps<'textarea'>) {\n\treturn <TextareaBase className={cn('focus-visible:ring', className)} {...props} />\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/confirm.tsx",
			"content": "'use client'\n\nimport { ReactNode, useActionState, useEffect, useState } from 'react'\nimport {\n\tAlertDialog,\n\tAlertDialogCancel,\n\tAlertDialogContent,\n\tAlertDialogDescription,\n\tAlertDialogFooter,\n\tAlertDialogHeader,\n\tAlertDialogTitle,\n\tAlertDialogTrigger,\n} from '../alert-dialog'\nimport { ActionButton } from './action-button'\n\ninterface ConfirmProps {\n\taction: () => Promise<unknown>\n\tchildren: ReactNode\n\tdesc: string\n\ttitle: string\n\tvariant?: 'default' | 'destructive'\n}\n\nexport function Confirm({ action: _action, children, desc, title, variant = 'default' }: ConfirmProps) {\n\tconst [open, setOpen] = useState(false)\n\tconst [state, action] = useActionState(_action, null)\n\n\tuseEffect(() => {\n\t\tif (state === undefined) setOpen(false)\n\t}, [state])\n\n\treturn (\n\t\t<AlertDialog open={open} onOpenChange={setOpen}>\n\t\t\t<AlertDialogTrigger asChild>{children}</AlertDialogTrigger>\n\t\t\t<AlertDialogContent>\n\t\t\t\t<AlertDialogHeader>\n\t\t\t\t\t<AlertDialogTitle>{title}</AlertDialogTitle>\n\t\t\t\t\t<AlertDialogDescription>{desc}</AlertDialogDescription>\n\t\t\t\t</AlertDialogHeader>\n\t\t\t\t<AlertDialogFooter>\n\t\t\t\t\t<AlertDialogCancel className='cursor-pointer'>Cancel</AlertDialogCancel>\n\t\t\t\t\t<form action={action}>\n\t\t\t\t\t\t<ActionButton variant={variant}>Continue</ActionButton>\n\t\t\t\t\t</form>\n\t\t\t\t</AlertDialogFooter>\n\t\t\t</AlertDialogContent>\n\t\t</AlertDialog>\n\t)\n}\n\nexport function ConfirmDelete({ action, children }: { action: () => Promise<unknown>; children: ReactNode }) {\n\treturn (\n\t\t<Confirm\n\t\t\taction={action}\n\t\t\ttitle='Are you absolutely sure?'\n\t\t\tdesc='This action cannot be undone. This will permanently delete this item and remove the data from our servers.'\n\t\t\tvariant='destructive'>\n\t\t\t{children}\n\t\t</Confirm>\n\t)\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/form-checkbox.tsx",
			"content": "import { cn } from '@/lib/utils'\nimport { Checkbox } from '../checkbox'\nimport { Label } from '../label'\nimport { FormError } from './form-error'\nimport { ActionState } from './utils'\n\ninterface FormCheckboxProps extends React.ComponentProps<typeof Checkbox> {\n\tlabel: React.ReactNode | string\n\tstate?: ActionState\n}\n\nexport function FormCheckbox({ className, id: _id, label, name, state, ...props }: FormCheckboxProps) {\n\tconst id = String(name ?? _id)\n\tconst error = state?.fieldErrors?.[id]?.[0]\n\n\treturn (\n\t\t<div className={cn('grid gap-2', className)}>\n\t\t\t<div className='flex items-center gap-2'>\n\t\t\t\t<Checkbox id={id} name={id} {...props} />\n\t\t\t\t<Label htmlFor={id}>{label}</Label>\n\t\t\t</div>\n\t\t\t<FormError value={error ? [error] : []} />\n\t\t</div>\n\t)\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/form-error.tsx",
			"content": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport { useEffect } from 'react'\nimport { useFormStatus } from 'react-dom'\nimport { toast } from 'sonner'\n\ninterface FormErrorProps {\n\thidden?: boolean\n\tvalue: string[] | undefined\n}\n\nexport function FormError({ hidden = false, value }: FormErrorProps) {\n\tconst { pending } = useFormStatus()\n\n\tuseEffect(() => {\n\t\tif (!hidden) return\n\t\tif (value?.length && value.length > 0) toast.error(`FATAL: ${value[0]}`)\n\t}, [hidden, value])\n\n\tif (hidden || !value || !value.length) return null\n\treturn <div className={cn('text-sm text-destructive', { hidden: pending })}>{value[0]}</div>\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/form-input.tsx",
			"content": "import { cn } from '@/lib/utils'\nimport { Label } from '../label'\nimport { Input } from './c-input'\nimport { FormError } from './form-error'\nimport { ActionState } from './utils'\n\ninterface FormInputProps extends React.ComponentProps<'input'> {\n\tclearOnError?: boolean\n\tdesc?: React.ReactNode | string\n\tlabel?: React.ReactNode | string\n\tstate?: ActionState\n}\n\nexport function FormInput({ className, clearOnError = false, desc, id: _id, label, name, state, ...props }: FormInputProps) {\n\tconst id = String(name ?? _id)\n\tconst value = clearOnError ? '' : state?.values?.[id] ?? ''\n\tconst error = state?.fieldErrors?.[id]?.[0]\n\n\treturn (\n\t\t<div className={cn('grid gap-2 h-fit', className)}>\n\t\t\t{label && (typeof label === 'string' ? <Label htmlFor={id}>{label}</Label> : label)}\n\t\t\t{desc && (typeof desc === 'string' ? <p className='text-xs text-muted-foreground -mt-1'>{desc}</p> : desc)}\n\t\t\t<Input id={id} name={id} defaultValue={value} {...props} />\n\t\t\t<FormError value={error ? [error] : []} />\n\t\t</div>\n\t)\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/form-select.tsx",
			"content": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport { SelectProps } from '@radix-ui/react-select'\nimport { useEffect, useState } from 'react'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../base/c-select'\nimport { Label } from '../label'\nimport { FormError } from './form-error'\nimport { ActionState } from './utils'\n\ninterface FormSelectProps extends SelectProps {\n\tclassName?: string\n\tclearOnError?: boolean\n\tdesc?: React.ReactNode | string\n\tlabel: React.ReactNode | string\n\toptions: ({ label: React.ReactNode; value: string } | string)[]\n\tstate?: ActionState\n}\n\nexport function FormSelect({\n\tclassName,\n\tclearOnError = false,\n\tdefaultValue,\n\tdesc,\n\tlabel,\n\tname,\n\toptions,\n\tstate,\n\t...props\n}: FormSelectProps) {\n\tconst id = name ?? ''\n\t// TODO: Use defaultValue in all form components?\n\tconst _value = clearOnError ? '' : state?.values?.[id] ?? defaultValue ?? ''\n\tconst error = state?.fieldErrors?.[id]?.[0]\n\n\tconst [value, setValue] = useState(_value)\n\n\tuseEffect(() => {\n\t\tsetValue(_value)\n\t}, [_value])\n\n\treturn (\n\t\t<div className={cn('grid gap-2 h-fit', className)}>\n\t\t\t{label && (typeof label === 'string' ? <Label htmlFor={id}>{label}</Label> : label)}\n\t\t\t{desc && (typeof desc === 'string' ? <p className='text-xs text-muted-foreground -mt-1'>{desc}</p> : desc)}\n\t\t\t<Select value={value} onValueChange={setValue} {...props}>\n\t\t\t\t<SelectTrigger className='w-full'>\n\t\t\t\t\t<SelectValue placeholder='Select an option' />\n\t\t\t\t</SelectTrigger>\n\t\t\t\t<SelectContent>\n\t\t\t\t\t{options.map((option) => (\n\t\t\t\t\t\t<SelectItem\n\t\t\t\t\t\t\tkey={typeof option === 'string' ? option : option.value}\n\t\t\t\t\t\t\tvalue={typeof option === 'string' ? option : option.value}>\n\t\t\t\t\t\t\t{typeof option === 'string' ? option : option.label}\n\t\t\t\t\t\t</SelectItem>\n\t\t\t\t\t))}\n\t\t\t\t</SelectContent>\n\t\t\t</Select>\n\t\t\t<input type='hidden' name={id} value={value} />\n\t\t\t<FormError value={error ? [error] : []} />\n\t\t</div>\n\t)\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/form-textarea.tsx",
			"content": "import { cn } from '@/lib/utils'\nimport { Label } from '../label'\nimport { Textarea } from './c-textarea'\nimport { FormError } from './form-error'\nimport { ActionState } from './utils'\n\ninterface FormTextareaProps extends React.ComponentProps<'textarea'> {\n\tclearOnError?: boolean\n\tdesc?: React.ReactNode | string\n\tlabel: React.ReactNode | string\n\tstate?: ActionState\n}\n\nexport function FormTextarea({ className, clearOnError = false, desc, id: _id, label, name, state, ...props }: FormTextareaProps) {\n\tconst id = String(name ?? _id)\n\tconst value = clearOnError ? '' : state?.values?.[id] ?? ''\n\tconst error = state?.fieldErrors?.[id]?.[0]\n\n\treturn (\n\t\t<div className={cn('grid gap-2 h-fit', className)}>\n\t\t\t{label && (typeof label === 'string' ? <Label htmlFor={id}>{label}</Label> : label)}\n\t\t\t{desc && (typeof desc === 'string' ? <p className='text-xs text-muted-foreground -mt-1'>{desc}</p> : desc)}\n\t\t\t<Textarea id={id} name={id} defaultValue={value} {...props} />\n\t\t\t<FormError value={error ? [error] : []} />\n\t\t</div>\n\t)\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/global-toaster.tsx",
			"content": "'use client'\n\nimport { usePathname, useRouter, useSearchParams } from 'next/navigation'\nimport { useEffect } from 'react'\nimport { toast } from 'sonner'\nimport { Toaster } from '../sonner'\n\nexport function GlobalToaster() {\n\tconst pathname = usePathname()\n\tconst router = useRouter()\n\tconst searchParams = useSearchParams()\n\n\tuseEffect(() => {\n\t\tconst message = searchParams.get('message')\n\t\tconst error = searchParams.get('error')\n\t\tconst success = searchParams.get('success')\n\n\t\tif (!message && !error && !success) return\n\t\tconst toastType = message ? toast : success ? toast.success : toast.error\n\t\ttoastType(message ? message : success ? success : error)\n\n\t\tconst newSearchParams = new URLSearchParams(searchParams.toString())\n\t\tconst paramsToRemove = ['message', 'error', 'success']\n\t\tparamsToRemove.forEach((param) => newSearchParams.delete(param))\n\t\tconst redirectPath = `${pathname}?${newSearchParams.toString()}`\n\t\trouter.replace(redirectPath, { scroll: false })\n\t}, [pathname, router, searchParams])\n\n\treturn <Toaster position='top-center' richColors />\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/use-form.tsx",
			"content": "'use client'\n\nimport { useActionState, useCallback, useEffect, useState } from 'react'\nimport { toast } from 'sonner'\nimport { ZodSchema } from 'zod'\nimport { ActionResult, validateFormData } from './utils'\n\nexport function useForm<T>(action: (_: unknown, formData: FormData) => Promise<ActionResult<T>>, schema?: ZodSchema) {\n\tconst [formState, formAction, formLoading] = useActionState(action, {\n\t\tsuccess: false,\n\t\tsuccessMessage: null,\n\t\tfieldErrors: {},\n\t\tglobalError: null,\n\t\tvalues: {},\n\t})\n\n\tconst [combinedState, setCombinedState] = useState<ActionResult<T> | undefined>()\n\n\tuseEffect(() => {\n\t\tsetCombinedState(formState)\n\t\tif (!formState.globalError) return\n\t\ttoast.error(formState.globalError)\n\t}, [formState])\n\n\tconst handleSubmit = useCallback(\n\t\t(formData: FormData) => {\n\t\t\tif (!schema) return formAction(formData)\n\n\t\t\tconst parsed = validateFormData(formData, schema) as ActionResult<T>\n\t\t\tif (!parsed.success) return setCombinedState(parsed)\n\n\t\t\treturn formAction(formData)\n\t\t},\n\t\t[formAction, schema]\n\t)\n\n\treturn [combinedState, handleSubmit, formLoading] as const\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/utils.ts",
			"content": "import { ZodSchema } from 'zod'\n\nexport type Params = Promise<{ [key: string]: string }>\nexport type SearchParams = Promise<{ [key: string]: string | string[] | undefined }>\nexport type ServerProps = { params: Params; searchParams: SearchParams }\nexport type LayoutProps = { children: React.ReactNode; params: Params }\n\nexport type ActionResult<T> = {\n\tsuccess: boolean\n\tsuccessMessage: string | null\n\tfieldErrors: Partial<Record<keyof T, string[]>>\n\tglobalError: string | null\n\tvalues: Partial<Record<keyof T, string>>\n\tdata?: T\n}\n\nexport type ActionState = {\n\tvalues: Record<string, string>\n\tfieldErrors: Record<string, string[]>\n\tglobalError: string | null\n\tsuccess: boolean\n\tsuccessMessage: string | null\n}\n\nexport type OnValidResult<T> = null | {\n\tvalues?: Partial<Record<keyof T, string>>\n\tsuccessMessage?: string | null\n\tglobalError?: string\n\tfieldErrors?: Partial<Record<keyof T, string[]>>\n}\n\nexport function validateFormData<T>(formData: FormData, schema: ZodSchema<T>) {\n\tconst raw: Record<string, unknown> = {}\n\tfor (const [key, value] of formData.entries()) {\n\t\traw[key] = value === 'on' ? true : value\n\t}\n\n\tconst parsed = schema.safeParse(raw)\n\tif (!parsed.success) {\n\t\tconst fieldErrors = parsed.error.flatten().fieldErrors as Partial<Record<keyof T, string[]>>\n\t\treturn {\n\t\t\tsuccess: false,\n\t\t\tsuccessMessage: null,\n\t\t\tfieldErrors,\n\t\t\tglobalError: null,\n\t\t\tvalues: Object.fromEntries(Object.entries(raw).map(([k, v]) => [k, String(v ?? '')])) as Partial<Record<keyof T, string>>,\n\t\t}\n\t}\n\n\treturn {\n\t\tsuccess: true,\n\t\tsuccessMessage: null,\n\t\tdata: parsed.data,\n\t\tvalues: Object.fromEntries(Object.entries(raw).map(([k, v]) => [k, String(v ?? '')])) as Partial<Record<keyof T, string>>,\n\t}\n}\n",
			"type": "registry:ui"
		}
	],
	"tailwind": {},
	"cssVars": {},
	"meta": {}
}
