{
	"name": "base",
	"type": "registry:block",
	"dependencies": [
		"@radix-ui/react-alert-dialog",
		"@radix-ui/react-checkbox",
		"@radix-ui/react-dialog",
		"@radix-ui/react-label",
		"@radix-ui/react-popover",
		"@radix-ui/react-select",
		"@radix-ui/react-slot",
		"cmdk",
		"next-themes",
		"sonner",
		"zod"
	],
	"devDependencies": [],
	"registryDependencies": [
		"alert-dialog",
		"button",
		"checkbox",
		"command",
		"dialog",
		"input",
		"label",
		"popover",
		"select",
		"sonner",
		"textarea"
	],
	"files": [
		{
			"path": "./app/globals.css",
			"content": "@import 'tailwindcss';\n@import 'tw-animate-css';\n\n@custom-variant dark (&:is(.dark *));\n\n@theme inline {\n\t--color-background: var(--background);\n\t--color-foreground: var(--foreground);\n\t--font-sans: var(--font-sans);\n\t--font-mono: var(--font-mono);\n\t--font-serif: var(--font-serif);\n\t--color-sidebar-ring: var(--sidebar-ring);\n\t--color-sidebar-border: var(--sidebar-border);\n\t--color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n\t--color-sidebar-accent: var(--sidebar-accent);\n\t--color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n\t--color-sidebar-primary: var(--sidebar-primary);\n\t--color-sidebar-foreground: var(--sidebar-foreground);\n\t--color-sidebar: var(--sidebar);\n\t--color-chart-5: var(--chart-5);\n\t--color-chart-4: var(--chart-4);\n\t--color-chart-3: var(--chart-3);\n\t--color-chart-2: var(--chart-2);\n\t--color-chart-1: var(--chart-1);\n\t--color-ring: var(--ring);\n\t--color-input: var(--input);\n\t--color-border: var(--border);\n\t--color-destructive: var(--destructive);\n\t--color-accent-foreground: var(--accent-foreground);\n\t--color-accent: var(--accent);\n\t--color-muted-foreground: var(--muted-foreground);\n\t--color-muted: var(--muted);\n\t--color-secondary-foreground: var(--secondary-foreground);\n\t--color-secondary: var(--secondary);\n\t--color-primary-foreground: var(--primary-foreground);\n\t--color-primary: var(--primary);\n\t--color-popover-foreground: var(--popover-foreground);\n\t--color-popover: var(--popover);\n\t--color-card-foreground: var(--card-foreground);\n\t--color-card: var(--card);\n\t--radius: 0.625rem;\n\t--radius-sm: calc(var(--radius) - 4px);\n\t--radius-md: calc(var(--radius) - 2px);\n\t--radius-lg: var(--radius);\n\t--radius-xl: calc(var(--radius) + 4px);\n}\n\n[data-theme='light'] {\n\t--background: oklch(1 0 0);\n\t--foreground: oklch(0.145 0 0);\n\t--card: oklch(1 0 0);\n\t--card-foreground: oklch(0.145 0 0);\n\t--popover: oklch(1 0 0);\n\t--popover-foreground: oklch(0.145 0 0);\n\t--primary: oklch(0.205 0 0);\n\t--primary-foreground: oklch(0.985 0 0);\n\t--secondary: oklch(0.97 0 0);\n\t--secondary-foreground: oklch(0.205 0 0);\n\t--muted: oklch(0.97 0 0);\n\t--muted-foreground: oklch(0.556 0 0);\n\t--accent: oklch(0.97 0 0);\n\t--accent-foreground: oklch(0.205 0 0);\n\t--destructive: oklch(0.577 0.245 27.325);\n\t--border: oklch(0.922 0 0);\n\t--input: oklch(0.922 0 0);\n\t--ring: oklch(0.708 0 0);\n\t--chart-1: oklch(0.646 0.222 41.116);\n\t--chart-2: oklch(0.6 0.118 184.704);\n\t--chart-3: oklch(0.398 0.07 227.392);\n\t--chart-4: oklch(0.828 0.189 84.429);\n\t--chart-5: oklch(0.769 0.188 70.08);\n\t--sidebar: oklch(0.985 0 0);\n\t--sidebar-foreground: oklch(0.145 0 0);\n\t--sidebar-primary: oklch(0.205 0 0);\n\t--sidebar-primary-foreground: oklch(0.985 0 0);\n\t--sidebar-accent: oklch(0.97 0 0);\n\t--sidebar-accent-foreground: oklch(0.205 0 0);\n\t--sidebar-border: oklch(0.922 0 0);\n\t--sidebar-ring: oklch(0.708 0 0);\n}\n\n[data-theme='dark'] {\n\t--background: oklch(0.145 0 0);\n\t--foreground: oklch(0.985 0 0);\n\t--card: oklch(0.205 0 0);\n\t--card-foreground: oklch(0.985 0 0);\n\t--popover: oklch(0.205 0 0);\n\t--popover-foreground: oklch(0.985 0 0);\n\t--primary: oklch(0.922 0 0);\n\t--primary-foreground: oklch(0.205 0 0);\n\t--secondary: oklch(0.269 0 0);\n\t--secondary-foreground: oklch(0.985 0 0);\n\t--muted: oklch(0.269 0 0);\n\t--muted-foreground: oklch(0.708 0 0);\n\t--accent: oklch(0.269 0 0);\n\t--accent-foreground: oklch(0.985 0 0);\n\t--destructive: oklch(0.704 0.191 22.216);\n\t--border: oklch(1 0 0 / 10%);\n\t--input: oklch(1 0 0 / 15%);\n\t--ring: oklch(0.556 0 0);\n\t--chart-1: oklch(0.488 0.243 264.376);\n\t--chart-2: oklch(0.696 0.17 162.48);\n\t--chart-3: oklch(0.769 0.188 70.08);\n\t--chart-4: oklch(0.627 0.265 303.9);\n\t--chart-5: oklch(0.645 0.246 16.439);\n\t--sidebar: oklch(0.205 0 0);\n\t--sidebar-foreground: oklch(0.985 0 0);\n\t--sidebar-primary: oklch(0.488 0.243 264.376);\n\t--sidebar-primary-foreground: oklch(0.985 0 0);\n\t--sidebar-accent: oklch(0.269 0 0);\n\t--sidebar-accent-foreground: oklch(0.985 0 0);\n\t--sidebar-border: oklch(1 0 0 / 10%);\n\t--sidebar-ring: oklch(0.556 0 0);\n}\n\n[data-theme='modern-minimal'] {\n\t--background: oklch(1 0 0);\n\t--foreground: oklch(0.32 0 0);\n\t--card: oklch(1 0 0);\n\t--card-foreground: oklch(0.32 0 0);\n\t--popover: oklch(1 0 0);\n\t--popover-foreground: oklch(0.32 0 0);\n\t--primary: oklch(0.62 0.19 259.81);\n\t--primary-foreground: oklch(1 0 0);\n\t--secondary: oklch(0.97 0 264.54);\n\t--secondary-foreground: oklch(0.45 0.03 256.8);\n\t--muted: oklch(0.98 0 247.84);\n\t--muted-foreground: oklch(0.55 0.02 264.36);\n\t--accent: oklch(0.95 0.03 236.82);\n\t--accent-foreground: oklch(0.38 0.14 265.52);\n\t--destructive: oklch(0.64 0.21 25.33);\n\t--destructive-foreground: oklch(1 0 0);\n\t--border: oklch(0.93 0.01 264.53);\n\t--input: oklch(0.93 0.01 264.53);\n\t--ring: oklch(0.62 0.19 259.81);\n\t--chart-1: oklch(0.62 0.19 259.81);\n\t--chart-2: oklch(0.55 0.22 262.88);\n\t--chart-3: oklch(0.49 0.22 264.38);\n\t--chart-4: oklch(0.42 0.18 265.64);\n\t--chart-5: oklch(0.38 0.14 265.52);\n\t--sidebar: oklch(0.98 0 247.84);\n\t--sidebar-foreground: oklch(0.32 0 0);\n\t--sidebar-primary: oklch(0.62 0.19 259.81);\n\t--sidebar-primary-foreground: oklch(1 0 0);\n\t--sidebar-accent: oklch(0.95 0.03 236.82);\n\t--sidebar-accent-foreground: oklch(0.38 0.14 265.52);\n\t--sidebar-border: oklch(0.93 0.01 264.53);\n\t--sidebar-ring: oklch(0.62 0.19 259.81);\n\t--font-sans: Inter, sans-serif;\n\t--font-serif: Source Serif 4, serif;\n\t--font-mono: JetBrains Mono, monospace;\n\t--shadow-2xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);\n\t--shadow-xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);\n\t--shadow-sm: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);\n\t--shadow: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);\n\t--shadow-md: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 2px 4px -1px hsl(0 0% 0% / 0.1);\n\t--shadow-lg: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 4px 6px -1px hsl(0 0% 0% / 0.1);\n\t--shadow-xl: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 8px 10px -1px hsl(0 0% 0% / 0.1);\n\t--shadow-2xl: 0 1px 3px 0px hsl(0 0% 0% / 0.25);\n}\n\n[data-theme='kodama-grove'] {\n\t--background: oklch(0.88 0.05 91.79);\n\t--foreground: oklch(0.43 0.03 59.22);\n\t--card: oklch(0.89 0.04 87.57);\n\t--card-foreground: oklch(0.43 0.03 59.22);\n\t--popover: oklch(0.94 0.03 89.85);\n\t--popover-foreground: oklch(0.43 0.03 59.22);\n\t--primary: oklch(0.67 0.11 118.91);\n\t--primary-foreground: oklch(0.99 0.01 88.64);\n\t--secondary: oklch(0.85 0.06 91.15);\n\t--secondary-foreground: oklch(0.43 0.03 59.22);\n\t--muted: oklch(0.85 0.06 91.15);\n\t--muted-foreground: oklch(0.58 0.03 60.93);\n\t--accent: oklch(0.84 0.07 90.33);\n\t--accent-foreground: oklch(0.43 0.03 59.22);\n\t--destructive: oklch(0.71 0.1 29.98);\n\t--destructive-foreground: oklch(0.98 0.01 91.48);\n\t--border: oklch(0.69 0.04 59.84);\n\t--input: oklch(0.84 0.07 90.33);\n\t--ring: oklch(0.73 0.06 130.85);\n\t--chart-1: oklch(0.73 0.06 130.85);\n\t--chart-2: oklch(0.68 0.06 132.45);\n\t--chart-3: oklch(0.82 0.03 136.65);\n\t--chart-4: oklch(0.59 0.05 137.62);\n\t--chart-5: oklch(0.52 0.04 137.19);\n\t--sidebar: oklch(0.86 0.06 90.52);\n\t--sidebar-foreground: oklch(0.43 0.03 59.22);\n\t--sidebar-primary: oklch(0.73 0.06 130.85);\n\t--sidebar-primary-foreground: oklch(0.99 0.01 88.64);\n\t--sidebar-accent: oklch(0.92 0.02 88);\n\t--sidebar-accent-foreground: oklch(0.43 0.03 59.22);\n\t--sidebar-border: oklch(0.91 0.02 88);\n\t--sidebar-ring: oklch(0.73 0.06 130.85);\n\t--font-sans: Merriweather, serif;\n\t--font-serif: Source Serif 4, serif;\n\t--font-mono: JetBrains Mono, monospace;\n\t--radius: 0.425rem;\n\t--shadow-2xs: 3px 3px 2px 0px hsl(88 22% 35% / 0.07);\n\t--shadow-xs: 3px 3px 2px 0px hsl(88 22% 35% / 0.07);\n\t--shadow-sm: 3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 1px 2px -1px hsl(88 22% 35% / 0.15);\n\t--shadow: 3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 1px 2px -1px hsl(88 22% 35% / 0.15);\n\t--shadow-md: 3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 2px 4px -1px hsl(88 22% 35% / 0.15);\n\t--shadow-lg: 3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 4px 6px -1px hsl(88 22% 35% / 0.15);\n\t--shadow-xl: 3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 8px 10px -1px hsl(88 22% 35% / 0.15);\n\t--shadow-2xl: 3px 3px 2px 0px hsl(88 22% 35% / 0.38);\n}\n\n[data-theme='neo-brutalism'] {\n\t--background: oklch(1 0 0);\n\t--foreground: oklch(0 0 0);\n\t--card: oklch(1 0 0);\n\t--card-foreground: oklch(0 0 0);\n\t--popover: oklch(1 0 0);\n\t--popover-foreground: oklch(0 0 0);\n\t--primary: oklch(0.65 0.24 26.97);\n\t--primary-foreground: oklch(1 0 0);\n\t--secondary: oklch(0.97 0.21 109.77);\n\t--secondary-foreground: oklch(0 0 0);\n\t--muted: oklch(0.96 0 0);\n\t--muted-foreground: oklch(0.32 0 0);\n\t--accent: oklch(0.56 0.24 260.82);\n\t--accent-foreground: oklch(1 0 0);\n\t--destructive: oklch(0 0 0);\n\t--destructive-foreground: oklch(1 0 0);\n\t--border: oklch(0 0 0);\n\t--input: oklch(0 0 0);\n\t--ring: oklch(0.65 0.24 26.97);\n\t--chart-1: oklch(0.65 0.24 26.97);\n\t--chart-2: oklch(0.97 0.21 109.77);\n\t--chart-3: oklch(0.56 0.24 260.82);\n\t--chart-4: oklch(0.73 0.25 142.5);\n\t--chart-5: oklch(0.59 0.27 328.36);\n\t--sidebar: oklch(0.96 0 0);\n\t--sidebar-foreground: oklch(0 0 0);\n\t--sidebar-primary: oklch(0.65 0.24 26.97);\n\t--sidebar-primary-foreground: oklch(1 0 0);\n\t--sidebar-accent: oklch(0.56 0.24 260.82);\n\t--sidebar-accent-foreground: oklch(1 0 0);\n\t--sidebar-border: oklch(0 0 0);\n\t--sidebar-ring: oklch(0.65 0.24 26.97);\n\t--font-sans: DM Sans, sans-serif;\n\t--font-serif: ui-serif, Georgia, Cambria, 'Times New Roman', Times, serif;\n\t--font-mono: Space Mono, monospace;\n\t--radius: 0px;\n\t--shadow-2xs: 4px 4px 0px 0px hsl(0 0% 0% / 0.5);\n\t--shadow-xs: 4px 4px 0px 0px hsl(0 0% 0% / 0.5);\n\t--shadow-sm: 4px 4px 0px 0px hsl(0 0% 0% / 1), 4px 1px 2px -1px hsl(0 0% 0% / 1);\n\t--shadow: 4px 4px 0px 0px hsl(0 0% 0% / 1), 4px 1px 2px -1px hsl(0 0% 0% / 1);\n\t--shadow-md: 4px 4px 0px 0px hsl(0 0% 0% / 1), 4px 2px 4px -1px hsl(0 0% 0% / 1);\n\t--shadow-lg: 4px 4px 0px 0px hsl(0 0% 0% / 1), 4px 4px 6px -1px hsl(0 0% 0% / 1);\n\t--shadow-xl: 4px 4px 0px 0px hsl(0 0% 0% / 1), 4px 8px 10px -1px hsl(0 0% 0% / 1);\n\t--shadow-2xl: 4px 4px 0px 0px hsl(0 0% 0% / 2.5);\n}\n\n[data-theme='vintage-paper'] {\n\t--background: oklch(0.96 0.02 90.24);\n\t--foreground: oklch(0.38 0.02 64.34);\n\t--card: oklch(0.99 0.01 87.47);\n\t--card-foreground: oklch(0.38 0.02 64.34);\n\t--popover: oklch(0.99 0.01 87.47);\n\t--popover-foreground: oklch(0.38 0.02 64.34);\n\t--primary: oklch(0.62 0.08 65.54);\n\t--primary-foreground: oklch(1 0 0);\n\t--secondary: oklch(0.88 0.03 85.57);\n\t--secondary-foreground: oklch(0.43 0.03 64.93);\n\t--muted: oklch(0.92 0.02 83.06);\n\t--muted-foreground: oklch(0.54 0.04 71.17);\n\t--accent: oklch(0.83 0.04 88.81);\n\t--accent-foreground: oklch(0.38 0.02 64.34);\n\t--destructive: oklch(0.55 0.14 32.91);\n\t--destructive-foreground: oklch(1 0 0);\n\t--border: oklch(0.86 0.03 84.59);\n\t--input: oklch(0.86 0.03 84.59);\n\t--ring: oklch(0.62 0.08 65.54);\n\t--chart-1: oklch(0.62 0.08 65.54);\n\t--chart-2: oklch(0.56 0.06 68.58);\n\t--chart-3: oklch(0.49 0.06 72.68);\n\t--chart-4: oklch(0.68 0.06 64.78);\n\t--chart-5: oklch(0.73 0.06 66.7);\n\t--sidebar: oklch(0.92 0.02 83.06);\n\t--sidebar-foreground: oklch(0.38 0.02 64.34);\n\t--sidebar-primary: oklch(0.62 0.08 65.54);\n\t--sidebar-primary-foreground: oklch(1 0 0);\n\t--sidebar-accent: oklch(0.83 0.04 88.81);\n\t--sidebar-accent-foreground: oklch(0.38 0.02 64.34);\n\t--sidebar-border: oklch(0.86 0.03 84.59);\n\t--sidebar-ring: oklch(0.62 0.08 65.54);\n\t--font-sans: Libre Baskerville, serif;\n\t--font-serif: Lora, serif;\n\t--font-mono: IBM Plex Mono, monospace;\n\t--radius: 0.25rem;\n\t--shadow-2xs: 2px 3px 5px 0px hsl(28 13% 20% / 0.06);\n\t--shadow-xs: 2px 3px 5px 0px hsl(28 13% 20% / 0.06);\n\t--shadow-sm: 2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 1px 2px -1px hsl(28 13% 20% / 0.12);\n\t--shadow: 2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 1px 2px -1px hsl(28 13% 20% / 0.12);\n\t--shadow-md: 2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 2px 4px -1px hsl(28 13% 20% / 0.12);\n\t--shadow-lg: 2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 4px 6px -1px hsl(28 13% 20% / 0.12);\n\t--shadow-xl: 2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 8px 10px -1px hsl(28 13% 20% / 0.12);\n\t--shadow-2xl: 2px 3px 5px 0px hsl(28 13% 20% / 0.3);\n}\n\n@layer base {\n\t* {\n\t\t@apply border-border outline-ring/50;\n\t}\n\tbody {\n\t\t@apply bg-background text-foreground;\n\t}\n}\n",
			"type": "registry:example",
			"target": "./app/globals.css"
		},
		{
			"path": "./components/ui/base/action-button.tsx",
			"content": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport { Loader2 } from 'lucide-react'\nimport { useFormStatus } from 'react-dom'\nimport { Button, ButtonProps } from './c-button'\n\nexport function ActionButton({ children, className, disabled, loading, ...props }: ButtonProps & { loading?: boolean }) {\n\tconst { pending } = useFormStatus()\n\n\treturn (\n\t\t<Button className={cn('relative', className)} disabled={disabled || loading || pending} type='submit' {...props}>\n\t\t\t<span className={cn('flex items-center gap-2', { invisible: loading || pending })}>{children}</span>\n\t\t\t{(loading || pending) && (\n\t\t\t\t<div className='absolute m-auto'>\n\t\t\t\t\t<Loader2 className='size-5 animate-spin' />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</Button>\n\t)\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/action.ts",
			"content": "'use server'\n\nimport { ZodSchema } from 'zod'\nimport { ActionResult, OnValidResult, validateFormData } from './utils'\n\nexport async function handleFormAction<T extends Record<string, unknown>>(\n\tformData: FormData,\n\tschema: ZodSchema<T>,\n\tonValid: (data: T) => Promise<OnValidResult<T> | void>\n): Promise<ActionResult<T>> {\n\tconst parsed = validateFormData(formData, schema) as ActionResult<T>\n\tif (!parsed.success) return parsed\n\n\tconst result = await onValid(parsed.data!)\n\n\tif (result?.fieldErrors || result?.globalError) {\n\t\treturn {\n\t\t\tsuccess: false,\n\t\t\tfieldErrors: result.fieldErrors ?? {},\n\t\t\tglobalError: result.globalError ?? null,\n\t\t\tvalues: Object.fromEntries(Object.entries(parsed).map(([k, v]) => [k, String(v ?? '')])) as Partial<Record<keyof T, string>>,\n\t\t}\n\t}\n\n\treturn {\n\t\tsuccess: true,\n\t\tfieldErrors: {},\n\t\tglobalError: null,\n\t\tvalues: {},\n\t}\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/c-button.tsx",
			"content": "import { cn } from '@/lib/utils'\nimport { VariantProps } from 'class-variance-authority'\nimport { Button as ButtonBase, buttonVariants } from '../button'\n\nexport type ButtonProps = React.ComponentProps<'button'> & VariantProps<typeof buttonVariants> & { asChild?: boolean }\n\nexport function Button({ className, ...props }: ButtonProps) {\n\treturn <ButtonBase className={cn('cursor-pointer', className)} {...props} />\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/c-input.tsx",
			"content": "import { cn } from '@/lib/utils'\nimport { Input as InputBase } from '../input'\n\nexport function Input({ className, ...props }: React.ComponentProps<'input'>) {\n\treturn <InputBase className={cn('focus-visible:ring', className)} {...props} />\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/c-select.tsx",
			"content": "import { cn } from '@/lib/utils'\nimport { SelectItemProps, SelectTriggerProps } from '@radix-ui/react-select'\nimport {\n\tSelect,\n\tSelectContent,\n\tSelectGroup,\n\tSelectItem as SelectItemBase,\n\tSelectLabel,\n\tSelectScrollDownButton,\n\tSelectScrollUpButton,\n\tSelectSeparator,\n\tSelectTrigger as SelectTriggerBase,\n\tSelectValue,\n} from '../select'\n\nfunction SelectItem({ className, ...props }: SelectItemProps) {\n\treturn <SelectItemBase className={cn('cursor-pointer', className)} {...props} />\n}\n\nfunction SelectTrigger({ className, ...props }: SelectTriggerProps) {\n\treturn <SelectTriggerBase className={cn('focus-visible:ring cursor-pointer', className)} {...props} />\n}\n\nexport {\n\tSelect,\n\tSelectContent,\n\tSelectGroup,\n\tSelectItem,\n\tSelectLabel,\n\tSelectScrollDownButton,\n\tSelectScrollUpButton,\n\tSelectSeparator,\n\tSelectTrigger,\n\tSelectValue,\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/c-textarea.tsx",
			"content": "import { cn } from '@/lib/utils'\nimport { Textarea as TextareaBase } from '../textarea'\n\nexport function Textarea({ className, ...props }: React.ComponentProps<'textarea'>) {\n\treturn <TextareaBase className={cn('focus-visible:ring', className)} {...props} />\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/confirm.tsx",
			"content": "'use client'\n\nimport { ReactNode, useActionState, useEffect, useState } from 'react'\nimport {\n\tAlertDialog,\n\tAlertDialogCancel,\n\tAlertDialogContent,\n\tAlertDialogDescription,\n\tAlertDialogFooter,\n\tAlertDialogHeader,\n\tAlertDialogTitle,\n\tAlertDialogTrigger,\n} from '../alert-dialog'\nimport { ActionButton } from './action-button'\n\nexport function Confirm({\n\taction: _action,\n\tchildren,\n\tdesc,\n\ttitle,\n\tvariant = 'default',\n}: {\n\taction: () => Promise<unknown>\n\tchildren: ReactNode\n\tdesc: string\n\ttitle: string\n\tvariant?: 'default' | 'destructive'\n}) {\n\tconst [open, setOpen] = useState(false)\n\tconst [state, action] = useActionState(_action, null)\n\n\tuseEffect(() => {\n\t\tif (state === undefined) setOpen(false)\n\t}, [state])\n\n\treturn (\n\t\t<AlertDialog open={open} onOpenChange={setOpen}>\n\t\t\t<AlertDialogTrigger asChild>{children}</AlertDialogTrigger>\n\t\t\t<AlertDialogContent>\n\t\t\t\t<AlertDialogHeader>\n\t\t\t\t\t<AlertDialogTitle>{title}</AlertDialogTitle>\n\t\t\t\t\t<AlertDialogDescription>{desc}</AlertDialogDescription>\n\t\t\t\t</AlertDialogHeader>\n\t\t\t\t<AlertDialogFooter>\n\t\t\t\t\t<AlertDialogCancel className='cursor-pointer'>Cancel</AlertDialogCancel>\n\t\t\t\t\t<form action={action}>\n\t\t\t\t\t\t<ActionButton variant={variant}>Continue</ActionButton>\n\t\t\t\t\t</form>\n\t\t\t\t</AlertDialogFooter>\n\t\t\t</AlertDialogContent>\n\t\t</AlertDialog>\n\t)\n}\n\nexport function ConfirmDelete({ action, children }: { action: () => Promise<unknown>; children: ReactNode }) {\n\treturn (\n\t\t<Confirm\n\t\t\taction={action}\n\t\t\ttitle='Are you absolutely sure?'\n\t\t\tdesc='This action cannot be undone. This will permanently delete this item and remove the data from our servers.'\n\t\t\tvariant='destructive'>\n\t\t\t{children}\n\t\t</Confirm>\n\t)\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/form-checkbox.tsx",
			"content": "import { cn } from '@/lib/utils'\nimport { Checkbox } from '../checkbox'\nimport { Label } from '../label'\nimport { FormError } from './form-error'\nimport { ActionState } from './utils'\n\nexport function FormCheckbox({\n\tclassName,\n\tid: _id,\n\tlabel,\n\tname,\n\tstate,\n\t...props\n}: React.ComponentProps<typeof Checkbox> & { label: React.ReactNode | string; state?: ActionState }) {\n\tconst id = String(name ?? _id)\n\tconst error = state?.fieldErrors?.[id]?.[0]\n\n\treturn (\n\t\t<div className={cn('grid gap-2', className)}>\n\t\t\t<div className='flex items-center gap-2'>\n\t\t\t\t<Checkbox id={id} name={id} {...props} />\n\t\t\t\t<Label htmlFor={id}>{label}</Label>\n\t\t\t</div>\n\t\t\t<FormError value={error ? [error] : []} />\n\t\t</div>\n\t)\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/form-error.tsx",
			"content": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport { useEffect } from 'react'\nimport { useFormStatus } from 'react-dom'\nimport { toast } from 'sonner'\n\nexport function FormError({ hidden = false, value }: { hidden?: boolean; value: string[] | undefined }) {\n\tconst { pending } = useFormStatus()\n\n\tuseEffect(() => {\n\t\tif (!hidden) return\n\t\tif (value?.length && value.length > 0) toast.error(`FATAL: ${value[0]}`)\n\t}, [hidden, value])\n\n\tif (hidden || !value || !value.length) return null\n\treturn <div className={cn('text-sm text-destructive', { hidden: pending })}>{value[0]}</div>\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/form-input.tsx",
			"content": "import { cn } from '@/lib/utils'\nimport { Label } from '../label'\nimport { Input } from './c-input'\nimport { FormError } from './form-error'\nimport { ActionState } from './utils'\n\nexport function FormInput({\n\tclassName,\n\tclearOnError = false,\n\tid: _id,\n\tlabel,\n\tname,\n\tstate,\n\t...props\n}: React.ComponentProps<'input'> & { clearOnError?: boolean; label?: React.ReactNode | string; state?: ActionState }) {\n\tconst id = String(name ?? _id)\n\tconst value = clearOnError ? '' : state?.values?.[id] ?? ''\n\tconst error = state?.fieldErrors?.[id]?.[0]\n\n\treturn (\n\t\t<div className={cn('grid gap-2 h-fit', className)}>\n\t\t\t{label && (typeof label === 'string' ? <Label htmlFor={id}>{label}</Label> : label)}\n\t\t\t<Input id={id} name={id} defaultValue={value} {...props} />\n\t\t\t<FormError value={error ? [error] : []} />\n\t\t</div>\n\t)\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/form-select.tsx",
			"content": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport { SelectProps } from '@radix-ui/react-select'\nimport { useEffect, useState } from 'react'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../base/c-select'\nimport { Label } from '../label'\nimport { FormError } from './form-error'\nimport { ActionState } from './utils'\n\nexport function FormSelect({\n\tclassName,\n\tclearOnError = false,\n\tdefaultValue,\n\tlabel,\n\tname,\n\toptions,\n\tstate,\n\t...props\n}: SelectProps & {\n\tclassName?: string\n\tclearOnError?: boolean\n\tlabel: React.ReactNode | string\n\toptions: ({ label: React.ReactNode; value: string } | string)[]\n\tstate?: ActionState\n}) {\n\tconst id = name ?? ''\n\t// TODO: Use defaultValue in all form components?\n\tconst _value = clearOnError ? '' : state?.values?.[id] ?? defaultValue ?? ''\n\tconst error = state?.fieldErrors?.[id]?.[0]\n\n\tconst [value, setValue] = useState(_value)\n\n\tuseEffect(() => {\n\t\tsetValue(_value)\n\t}, [_value])\n\n\treturn (\n\t\t<div className={cn('grid gap-2 h-fit', className)}>\n\t\t\t{label && (typeof label === 'string' ? <Label htmlFor={id}>{label}</Label> : label)}\n\t\t\t<Select value={value} onValueChange={setValue} {...props}>\n\t\t\t\t<SelectTrigger className='w-full'>\n\t\t\t\t\t<SelectValue placeholder='Select an option' />\n\t\t\t\t</SelectTrigger>\n\t\t\t\t<SelectContent>\n\t\t\t\t\t{options.map((option) => (\n\t\t\t\t\t\t<SelectItem\n\t\t\t\t\t\t\tkey={typeof option === 'string' ? option : option.value}\n\t\t\t\t\t\t\tvalue={typeof option === 'string' ? option : option.value}>\n\t\t\t\t\t\t\t{typeof option === 'string' ? option : option.label}\n\t\t\t\t\t\t</SelectItem>\n\t\t\t\t\t))}\n\t\t\t\t</SelectContent>\n\t\t\t</Select>\n\t\t\t<input type='hidden' name={id} value={value} />\n\t\t\t<FormError value={error ? [error] : []} />\n\t\t</div>\n\t)\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/form-textarea.tsx",
			"content": "import { cn } from '@/lib/utils'\nimport { Label } from '../label'\nimport { Textarea } from './c-textarea'\nimport { FormError } from './form-error'\nimport { ActionState } from './utils'\n\nexport function FormTextarea({\n\tclassName,\n\tclearOnError = false,\n\tid: _id,\n\tlabel,\n\tname,\n\tstate,\n\t...props\n}: React.ComponentProps<'textarea'> & { clearOnError?: boolean; label: React.ReactNode | string; state?: ActionState }) {\n\tconst id = String(name ?? _id)\n\tconst value = clearOnError ? '' : state?.values?.[id] ?? ''\n\tconst error = state?.fieldErrors?.[id]?.[0]\n\n\treturn (\n\t\t<div className={cn('grid gap-2 h-fit', className)}>\n\t\t\t{label && (typeof label === 'string' ? <Label htmlFor={id}>{label}</Label> : label)}\n\t\t\t<Textarea id={id} name={id} defaultValue={value} {...props} />\n\t\t\t<FormError value={error ? [error] : []} />\n\t\t</div>\n\t)\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/global-toaster.tsx",
			"content": "'use client'\n\nimport { usePathname, useRouter, useSearchParams } from 'next/navigation'\nimport { useEffect } from 'react'\nimport { toast } from 'sonner'\nimport { Toaster } from '../sonner'\n\nexport function GlobalToaster() {\n\tconst pathname = usePathname()\n\tconst router = useRouter()\n\tconst searchParams = useSearchParams()\n\n\tuseEffect(() => {\n\t\tconst message = searchParams.get('message')\n\t\tconst error = searchParams.get('error')\n\t\tconst success = searchParams.get('success')\n\n\t\tif (!message && !error && !success) return\n\t\tconst toastType = message ? toast : success ? toast.success : toast.error\n\t\ttoastType(message ? message : success ? success : error)\n\n\t\tconst newSearchParams = new URLSearchParams(searchParams.toString())\n\t\tconst paramsToRemove = ['message', 'error', 'success']\n\t\tparamsToRemove.forEach((param) => newSearchParams.delete(param))\n\t\tconst redirectPath = `${pathname}?${newSearchParams.toString()}`\n\t\trouter.replace(redirectPath, { scroll: false })\n\t}, [pathname, router, searchParams])\n\n\treturn <Toaster position='top-center' richColors />\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/theme-provider.tsx",
			"content": "'use client'\n\nimport { ThemeProvider as NextThemesProvider } from 'next-themes'\nimport * as React from 'react'\n\nexport function ThemeProvider({ children, ...props }: React.ComponentProps<typeof NextThemesProvider>) {\n\treturn <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/theme-switcher.tsx",
			"content": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport { Check } from 'lucide-react'\nimport { useTheme } from 'next-themes'\nimport { useState } from 'react'\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from '../command'\nimport { Popover, PopoverContent, PopoverTrigger } from '../popover'\nimport { themes } from './themes'\n\nexport function ThemeSwitcher({ children }: { children: React.ReactNode }) {\n\tconst [open, setOpen] = useState(false)\n\tconst { theme, setTheme } = useTheme()\n\n\treturn (\n\t\t<Popover open={open} onOpenChange={setOpen}>\n\t\t\t<PopoverTrigger asChild>{children}</PopoverTrigger>\n\t\t\t<PopoverContent align='end' className='p-0'>\n\t\t\t\t<Command>\n\t\t\t\t\t<CommandInput placeholder='Search themes...' />\n\t\t\t\t\t<CommandList>\n\t\t\t\t\t\t<CommandEmpty>No theme found.</CommandEmpty>\n\t\t\t\t\t\t<CommandGroup>\n\t\t\t\t\t\t\t{themes.map((t) => (\n\t\t\t\t\t\t\t\t<CommandItem\n\t\t\t\t\t\t\t\t\tkey={t.value}\n\t\t\t\t\t\t\t\t\tvalue={t.value}\n\t\t\t\t\t\t\t\t\tonSelect={(currentValue) => {\n\t\t\t\t\t\t\t\t\t\tsetTheme(currentValue)\n\t\t\t\t\t\t\t\t\t\tsetOpen(false)\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tasChild>\n\t\t\t\t\t\t\t\t\t<div className='flex items-center gap-3'>\n\t\t\t\t\t\t\t\t\t\t<div className='flex gap-0.5'>\n\t\t\t\t\t\t\t\t\t\t\t<ColorBox color={t.styles.primary} />\n\t\t\t\t\t\t\t\t\t\t\t<ColorBox color={t.styles.accent} />\n\t\t\t\t\t\t\t\t\t\t\t<ColorBox color={t.styles.secondary} />\n\t\t\t\t\t\t\t\t\t\t\t<ColorBox color={t.styles.border} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<span className='capitalize font-medium'>{t.label ?? 'default'}</span>\n\t\t\t\t\t\t\t\t\t\t<Check className={cn('ml-auto', theme === t.value ? 'opacity-100' : 'opacity-0')} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</CommandItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</CommandGroup>\n\t\t\t\t\t</CommandList>\n\t\t\t\t</Command>\n\t\t\t</PopoverContent>\n\t\t</Popover>\n\t)\n}\n\nfunction ColorBox({ color }: { color: string }) {\n\treturn <div className='h-3 w-3 rounded-sm border border-muted' style={{ backgroundColor: color }} />\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/themes.ts",
			"content": "export const themes = [\n\t{\n\t\tlabel: 'Light',\n\t\tvalue: 'light',\n\t\tstyles: {\n\t\t\tprimary: 'oklch(0.205 0 0)',\n\t\t\tsecondary: 'oklch(0.97 0 0)',\n\t\t\taccent: 'oklch(0.97 0 0)',\n\t\t\tborder: 'oklch(0.922 0 0)',\n\t\t},\n\t},\n\t{\n\t\tlabel: 'Dark',\n\t\tvalue: 'dark',\n\t\tstyles: {\n\t\t\tprimary: 'oklch(0.922 0 0)',\n\t\t\tsecondary: 'oklch(0.269 0 0)',\n\t\t\taccent: 'oklch(0.269 0 0)',\n\t\t\tborder: 'oklch(1 0 0 / 10%)',\n\t\t},\n\t},\n\t{\n\t\tlabel: 'Modern Minimal',\n\t\tvalue: 'modern-minimal',\n\t\tstyles: {\n\t\t\tprimary: 'oklch(0.62 0.19 259.81)',\n\t\t\tsecondary: 'oklch(0.97 0 264.54)',\n\t\t\taccent: 'oklch(0.95 0.03 236.82)',\n\t\t\tborder: 'oklch(0.93 0.01 264.53)',\n\t\t},\n\t},\n\t{\n\t\tlabel: 'Kodama Grove',\n\t\tvalue: 'kodama-grove',\n\t\tstyles: {\n\t\t\tprimary: 'oklch(0.67 0.11 118.91)',\n\t\t\tsecondary: 'oklch(0.85 0.06 91.15)',\n\t\t\taccent: 'oklch(0.84 0.07 90.33)',\n\t\t\tborder: 'oklch(0.69 0.04 59.84)',\n\t\t},\n\t},\n\t{\n\t\tlabel: 'Neo Brutalism',\n\t\tvalue: 'neo-brutalism',\n\t\tstyles: {\n\t\t\tprimary: 'oklch(0.65 0.24 26.97)',\n\t\t\tsecondary: 'oklch(0.97 0.21 109.77)',\n\t\t\taccent: 'oklch(0.56 0.24 260.82)',\n\t\t\tborder: 'oklch(0 0 0)',\n\t\t},\n\t},\n\t{\n\t\tlabel: 'Vintage Paper',\n\t\tvalue: 'vintage-paper',\n\t\tstyles: {\n\t\t\tprimary: 'oklch(0.62 0.08 65.54)',\n\t\t\tsecondary: 'oklch(0.88 0.03 85.57)',\n\t\t\taccent: 'oklch(0.83 0.04 88.81)',\n\t\t\tborder: 'oklch(0.86 0.03 84.59)',\n\t\t},\n\t},\n]\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/use-form.tsx",
			"content": "'use client'\n\nimport { useActionState, useCallback, useEffect, useState } from 'react'\nimport { toast } from 'sonner'\nimport { ZodSchema } from 'zod'\nimport { ActionResult, validateFormData } from './utils'\n\nexport function useForm<T>(action: (_: unknown, formData: FormData) => Promise<ActionResult<T>>, schema?: ZodSchema) {\n\tconst [formState, formAction, formLoading] = useActionState(action, {\n\t\tsuccess: false,\n\t\tfieldErrors: {},\n\t\tglobalError: null,\n\t\tvalues: {},\n\t})\n\n\tconst [combinedState, setCombinedState] = useState<ActionResult<T> | undefined>()\n\n\tuseEffect(() => {\n\t\tsetCombinedState(formState)\n\t\tif (!formState.globalError) return\n\t\ttoast.error(formState.globalError)\n\t}, [formState])\n\n\tconst handleSubmit = useCallback(\n\t\t(formData: FormData) => {\n\t\t\tif (!schema) return formAction(formData)\n\n\t\t\tconst parsed = validateFormData(formData, schema) as ActionResult<T>\n\t\t\tif (!parsed.success) return setCombinedState(parsed)\n\n\t\t\treturn formAction(formData)\n\t\t},\n\t\t[formAction, schema]\n\t)\n\n\treturn [combinedState, handleSubmit, formLoading] as const\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/utils.ts",
			"content": "import { ZodSchema } from 'zod'\n\nexport type Params = Promise<{ [key: string]: string }>\nexport type SearchParams = Promise<{ [key: string]: string | string[] | undefined }>\nexport type ServerProps = { params: Params; searchParams: SearchParams }\nexport type LayoutProps = { children: React.ReactNode; params: Params }\n\nexport type ActionResult<T> = {\n\tsuccess: boolean\n\tfieldErrors: Partial<Record<keyof T, string[]>>\n\tglobalError: string | null\n\tvalues: Partial<Record<keyof T, string>>\n\tdata?: T\n}\n\nexport type ActionState = {\n\tvalues: Record<string, string>\n\tfieldErrors: Record<string, string[]>\n\tglobalError: string | null\n\tsuccess: boolean\n}\n\nexport type OnValidResult<T> = null | {\n\tglobalError?: string\n\tfieldErrors?: Partial<Record<keyof T, string[]>>\n}\n\nexport function validateFormData<T>(formData: FormData, schema: ZodSchema<T>) {\n\tconst raw: Record<string, unknown> = {}\n\tfor (const [key, value] of formData.entries()) {\n\t\traw[key] = value === 'on' ? true : value\n\t}\n\n\tconst parsed = schema.safeParse(raw)\n\tif (!parsed.success) {\n\t\tconst fieldErrors = parsed.error.flatten().fieldErrors as Partial<Record<keyof T, string[]>>\n\t\treturn {\n\t\t\tsuccess: false,\n\t\t\tfieldErrors,\n\t\t\tglobalError: null,\n\t\t\tvalues: Object.fromEntries(Object.entries(raw).map(([k, v]) => [k, String(v ?? '')])) as Partial<Record<keyof T, string>>,\n\t\t}\n\t}\n\n\treturn { success: true, data: parsed.data }\n}\n",
			"type": "registry:ui"
		}
	],
	"tailwind": {},
	"cssVars": {},
	"meta": {}
}
