{
	"name": "editor",
	"type": "registry:block",
	"dependencies": [
		"@lexical/code",
		"@lexical/list",
		"@lexical/react",
		"@lexical/rich-text",
		"@lexical/selection",
		"@lexical/table",
		"@lexical/text",
		"@lexical/utils",
		"@radix-ui/react-dialog",
		"@radix-ui/react-popover",
		"@radix-ui/react-select",
		"@radix-ui/react-slot",
		"@radix-ui/react-toggle",
		"@radix-ui/react-toggle-group",
		"@radix-ui/react-tooltip",
		"lexical",
		"react-colorful"
	],
	"devDependencies": [],
	"registryDependencies": ["button", "dialog", "input", "popover", "select", "toggle-group", "toggle", "tooltip"],
	"files": [
		{
			"path": "./components/ui/base/editor/context/toolbar-context.tsx",
			"content": "'use client'\n\nimport { createContext, useContext, JSX } from 'react'\n\nimport { LexicalEditor } from 'lexical'\n\nconst Context = createContext<{\n  activeEditor: LexicalEditor\n  $updateToolbar: () => void\n  blockType: string\n  setBlockType: (blockType: string) => void\n  showModal: (title: string, showModal: (onClose: () => void) => JSX.Element) => void\n}>({\n  activeEditor: {} as LexicalEditor,\n  $updateToolbar: () => {},\n  blockType: 'paragraph',\n  setBlockType: () => {},\n  showModal: () => {},\n})\n\nexport function ToolbarContext({\n  activeEditor,\n  $updateToolbar,\n  blockType,\n  setBlockType,\n  showModal,\n  children,\n}: {\n  activeEditor: LexicalEditor\n  $updateToolbar: () => void\n  blockType: string\n  setBlockType: (blockType: string) => void\n  showModal: (title: string, showModal: (onClose: () => void) => JSX.Element) => void\n  children: React.ReactNode\n}) {\n  return (\n    <Context.Provider\n      value={{ activeEditor, $updateToolbar, blockType, setBlockType, showModal }}\n    >\n      {children}\n    </Context.Provider>\n  )\n}\n\nexport function useToolbarContext() {\n  return useContext(Context)\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/editor-hooks/use-modal.tsx",
			"content": "import { useCallback, useMemo, useState, JSX } from 'react'\nimport * as React from 'react'\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog'\n\nexport function useEditorModal(): [\n  JSX.Element | null,\n  (title: string, showModal: (onClose: () => void) => JSX.Element) => void,\n] {\n  const [modalContent, setModalContent] = useState<null | {\n    closeOnClickOutside: boolean\n    content: JSX.Element\n    title: string\n  }>(null)\n\n  const onClose = useCallback(() => {\n    setModalContent(null)\n  }, [])\n\n  const modal = useMemo(() => {\n    if (modalContent === null) {\n      return null\n    }\n    const { title, content } = modalContent\n    return (\n      <Dialog open={true} onOpenChange={onClose}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>{title}</DialogTitle>\n          </DialogHeader>\n          {content}\n        </DialogContent>\n      </Dialog>\n    )\n  }, [modalContent, onClose])\n\n  const showModal = useCallback(\n    (\n      title: string,\n      getContent: (onClose: () => void) => JSX.Element,\n      closeOnClickOutside = false\n    ) => {\n      setModalContent({\n        closeOnClickOutside,\n        content: getContent(onClose),\n        title,\n      })\n    },\n    [onClose]\n  )\n\n  return [modal, showModal]\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/editor-hooks/use-update-toolbar.ts",
			"content": "import { useEffect } from 'react'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport {\n  $getSelection,\n  BaseSelection,\n  COMMAND_PRIORITY_CRITICAL,\n} from 'lexical'\nimport { SELECTION_CHANGE_COMMAND } from 'lexical'\n\nimport { useToolbarContext } from '@/components/ui/base/editor/context/toolbar-context'\n\nexport function useUpdateToolbarHandler(\n  callback: (selection: BaseSelection) => void\n) {\n  const [editor] = useLexicalComposerContext()\n  const { activeEditor } = useToolbarContext()\n\n  useEffect(() => {\n    return activeEditor.registerCommand(\n      SELECTION_CHANGE_COMMAND,\n      () => {\n        const selection = $getSelection()\n        if (selection) {\n          callback(selection)\n        }\n        return false\n      },\n      COMMAND_PRIORITY_CRITICAL\n    )\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editor, callback])\n\n  useEffect(() => {\n    activeEditor.getEditorState().read(() => {\n      const selection = $getSelection()\n      if (selection) {\n        callback(selection)\n      }\n    })\n  }, [activeEditor, callback])\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/editor-ui/colorpicker.tsx",
			"content": "import * as React from 'react'\n\nimport { HexColorPicker } from 'react-colorful'\n\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\n\ntype Props = {\n  disabled?: boolean\n  icon?: React.ReactNode\n  label?: string\n  title?: string\n  stopCloseOnClickSelf?: boolean\n  color: string\n  onChange?: (color: string, skipHistoryStack: boolean) => void\n}\n\nexport default function ColorPicker({\n  disabled = false,\n  color,\n  onChange,\n  icon,\n  ...rest\n}: Props) {\n  return (\n    <Popover modal={true}>\n      <PopoverTrigger asChild disabled={disabled}>\n        <Button\n          size={'sm'}\n          variant={'outline'}\n          className=\"h-8 w-8\"\n          {...rest}\n        >\n          <span className=\"size-4 rounded-full\">{icon}</span>\n          {/* <ChevronDownIcon className='size-4'/> */}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\">\n        <HexColorPicker\n          color={color}\n          onChange={(color) => onChange?.(color, false)}\n        />\n        <Input\n          maxLength={7}\n          onChange={(e) => {\n            e.stopPropagation()\n            onChange?.(e?.currentTarget?.value, false)\n          }}\n          value={color}\n        />\n      </PopoverContent>\n    </Popover>\n  )\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/editor-ui/content-editable.tsx",
			"content": "import { JSX } from 'react'\nimport { ContentEditable as LexicalContentEditable } from '@lexical/react/LexicalContentEditable'\n\ntype Props = {\n  placeholder: string\n  className?: string\n  placeholderClassName?: string\n}\n\n\nexport function ContentEditable({\n  placeholder,\n  className,\n  placeholderClassName,\n}: Props): JSX.Element {\n  return (\n    <LexicalContentEditable\n      className={\n        className ??\n        `ContentEditable__root relative block min-h-72 overflow-auto px-8 py-4 focus:outline-none`\n      }\n      aria-placeholder={placeholder}\n      placeholder={\n        <div\n          className={\n            placeholderClassName ??\n\n            `pointer-events-none absolute left-0 top-0 select-none overflow-hidden text-ellipsis px-8 py-[18px] text-muted-foreground`\n          }\n        >\n          {placeholder}\n        </div>\n      }\n    />\n  )\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/editor.tsx",
			"content": "'use client'\n\nimport { TooltipProvider } from '@/components/ui/tooltip'\nimport { InitialConfigType, LexicalComposer } from '@lexical/react/LexicalComposer'\nimport { OnChangePlugin } from '@lexical/react/LexicalOnChangePlugin'\nimport { SerializedEditorState } from 'lexical'\nimport { useState } from 'react'\nimport { nodes } from './nodes'\nimport { Plugins } from './plugins'\nimport { editorTheme } from './themes/editor-theme'\n\nconst editorConfig: InitialConfigType = { namespace: 'Editor', theme: editorTheme, nodes, onError: () => {} }\n\nexport function Editor({\n\tvalue,\n\tonValueChange,\n}: {\n\tvalue?: SerializedEditorState\n\tonValueChange?: (value: SerializedEditorState) => void\n}) {\n\tconst [editorState, setEditorState] = useState<SerializedEditorState>(\n\t\tvalue ??\n\t\t\t({\n\t\t\t\troot: {\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdirection: 'ltr',\n\t\t\t\t\t\t\tformat: '',\n\t\t\t\t\t\t\tindent: 0,\n\t\t\t\t\t\t\ttype: 'paragraph',\n\t\t\t\t\t\t\tversion: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdirection: 'ltr',\n\t\t\t\t\tformat: '',\n\t\t\t\t\tindent: 0,\n\t\t\t\t\ttype: 'root',\n\t\t\t\t\tversion: 1,\n\t\t\t\t},\n\t\t\t} as unknown as SerializedEditorState)\n\t)\n\n\treturn (\n\t\t<div className='overflow-hidden rounded-lg border bg-background shadow'>\n\t\t\t<LexicalComposer\n\t\t\t\tinitialConfig={{\n\t\t\t\t\t...editorConfig,\n\t\t\t\t\t...(editorState ? { editorState: JSON.stringify(editorState) } : {}),\n\t\t\t\t}}>\n\t\t\t\t<TooltipProvider>\n\t\t\t\t\t<Plugins />\n\n\t\t\t\t\t<OnChangePlugin\n\t\t\t\t\t\tignoreSelectionChange={true}\n\t\t\t\t\t\tonChange={(editorState) => {\n\t\t\t\t\t\t\tsetEditorState(editorState.toJSON())\n\t\t\t\t\t\t\tonValueChange?.(editorState.toJSON())\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</TooltipProvider>\n\t\t\t</LexicalComposer>\n\t\t</div>\n\t)\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/nodes.ts",
			"content": "import { ListItemNode, ListNode } from '@lexical/list'\nimport { OverflowNode } from '@lexical/overflow'\nimport { HeadingNode, QuoteNode } from '@lexical/rich-text'\nimport { Klass, LexicalNode, LexicalNodeReplacement, ParagraphNode, TextNode } from 'lexical'\n\nexport const nodes: ReadonlyArray<Klass<LexicalNode> | LexicalNodeReplacement> = [\n\tHeadingNode,\n\tParagraphNode,\n\tTextNode,\n\tQuoteNode,\n\tListNode,\n\tListItemNode,\n\tOverflowNode,\n]\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/actions/actions-plugin.tsx",
			"content": "export function ActionsPlugin({ children }: { children: React.ReactNode }) {\n  return children\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/actions/character-limit-plugin.tsx",
			"content": "import { CharacterLimitPlugin as LexicalCharacterLimitPlugin } from '@lexical/react/LexicalCharacterLimitPlugin'\n\nexport function CharacterLimitPlugin({\n  maxLength,\n  charset,\n}: {\n  maxLength: number\n  charset: 'UTF-8' | 'UTF-16'\n}) {\n  return (\n    <LexicalCharacterLimitPlugin\n      maxLength={maxLength}\n      charset={charset}\n      renderer={(number) => (\n        <div\n          className={`px-1 text-xs ${number.remainingCharacters <= 0 ? 'text-destructive' : 'text-gray-500'}`}\n        >\n          {number.remainingCharacters}\n        </div>\n      )}\n    />\n  )\n}",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/actions/counter-character-plugin.tsx",
			"content": "'use client'\n\nimport { useEffect, useState } from \"react\";\nimport { $rootTextContent } from '@lexical/text';\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\n\nlet textEncoderInstance: null | TextEncoder = null;\n\nfunction textEncoder(): null | TextEncoder {\n  if (window.TextEncoder === undefined) {\n    return null;\n  }\n\n  if (textEncoderInstance === null) {\n    textEncoderInstance = new window.TextEncoder();\n  }\n\n  return textEncoderInstance;\n}\n\nfunction utf8Length(text: string) {\n  const currentTextEncoder = textEncoder();\n\n  if (currentTextEncoder === null) {\n    // http://stackoverflow.com/a/5515960/210370\n    const m = encodeURIComponent(text).match(/%[89ABab]/g);\n    return text.length + (m ? m.length : 0);\n  }\n\n  return currentTextEncoder.encode(text).length;\n}\n\ninterface CounterCharacterPluginProps {\n  charset?: 'UTF-8' | 'UTF-16'\n}\n\nconst strlen = (text: string, charset: 'UTF-8' | 'UTF-16') => {\n  if (charset === 'UTF-8') {\n    return utf8Length(text);\n  } else if (charset === 'UTF-16') {\n    return text.length;\n  }\n}\n\nconst countWords = (text: string) => {\n  return text.split(/\\s+/).filter(word => word.length > 0).length;\n}\n\nexport function CounterCharacterPlugin({ charset = \"UTF-16\" }: CounterCharacterPluginProps) {\n  const [editor] = useLexicalComposerContext();\n  const [stats, setStats] = useState(() => {\n    const initialText = editor.getEditorState().read($rootTextContent);\n    return {\n      characters: strlen(initialText, charset),\n      words: countWords(initialText)\n    };\n  });\n\n  useEffect(() => {\n    return editor.registerTextContentListener((currentText: string) => {\n      setStats({\n        characters: strlen(currentText, charset),\n        words: countWords(currentText)\n      });\n    });\n  }, [editor, charset]);\n\n  return (\n    <div className=\"text-xs flex gap-2 text-gray-500 whitespace-nowrap\">\n      <p>{stats.characters} characters</p>\n      |\n      <p>{stats.words} words</p>\n    </div>\n  );\n}",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/actions/max-length-plugin.tsx",
			"content": "'use client'\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { useEffect } from 'react'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { $trimTextContentFromAnchor } from '@lexical/selection'\nimport { $restoreEditorState } from '@lexical/utils'\nimport {\n  $getSelection,\n  $isRangeSelection,\n  EditorState,\n  RootNode,\n} from 'lexical'\n\nexport function MaxLengthPlugin({ maxLength }: { maxLength: number }): null {\n  const [editor] = useLexicalComposerContext()\n\n  useEffect(() => {\n    let lastRestoredEditorState: EditorState | null = null\n\n    return editor.registerNodeTransform(RootNode, (rootNode: RootNode) => {\n      const selection = $getSelection()\n      if (!$isRangeSelection(selection) || !selection.isCollapsed()) {\n        return\n      }\n      const prevEditorState = editor.getEditorState()\n      const prevTextContentSize = prevEditorState.read(() =>\n        rootNode.getTextContentSize()\n      )\n      const textContentSize = rootNode.getTextContentSize()\n      if (prevTextContentSize !== textContentSize) {\n        const delCount = textContentSize - maxLength\n        const anchor = selection.anchor\n\n        if (delCount > 0) {\n          // Restore the old editor state instead if the last\n          // text content was already at the limit.\n          if (\n            prevTextContentSize === maxLength &&\n            lastRestoredEditorState !== prevEditorState\n          ) {\n            lastRestoredEditorState = prevEditorState\n            $restoreEditorState(editor, prevEditorState)\n          } else {\n            $trimTextContentFromAnchor(editor, anchor, delCount)\n          }\n        }\n      }\n    })\n  }, [editor, maxLength])\n\n  return null\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/draggable-block-plugin.tsx",
			"content": "'use client'\n\nimport { useRef, JSX } from 'react'\n\nimport { DraggableBlockPlugin_EXPERIMENTAL } from '@lexical/react/LexicalDraggableBlockPlugin'\nimport { GripVerticalIcon } from 'lucide-react'\n\nconst DRAGGABLE_BLOCK_MENU_CLASSNAME = 'draggable-block-menu'\n\nfunction isOnMenu(element: HTMLElement): boolean {\n  return !!element.closest(`.${DRAGGABLE_BLOCK_MENU_CLASSNAME}`)\n}\n\nexport function DraggableBlockPlugin({\n  anchorElem,\n}: {\n  anchorElem: HTMLElement | null\n}): JSX.Element | null {\n  const menuRef = useRef<HTMLDivElement>(null)\n  const targetLineRef = useRef<HTMLDivElement>(null)\n\n  if (!anchorElem) {\n    return null\n  }\n\n  return (\n    <DraggableBlockPlugin_EXPERIMENTAL\n      anchorElem={anchorElem}\n      // @ts-expect-error - TODO: fix this\n      menuRef={menuRef}\n      // @ts-expect-error - TODO: fix this\n      targetLineRef={targetLineRef}\n      menuComponent={\n        <div\n          ref={menuRef}\n          className=\"draggable-block-menu absolute left-0 top-0 cursor-grab rounded-sm px-[1px] py-0.5 opacity-0 will-change-transform hover:bg-gray-100 active:cursor-grabbing\"\n        >\n          <GripVerticalIcon className=\"size-4 opacity-30\" />\n        </div>\n      }\n      targetLineComponent={\n        <div\n          ref={targetLineRef}\n          className=\"pointer-events-none absolute left-0 top-0 h-1 bg-secondary-foreground opacity-0 will-change-transform\"\n        />\n      }\n      isOnMenu={isOnMenu}\n    />\n  )\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/toolbar/block-format/block-format-data.tsx",
			"content": "import {\n  CodeIcon,\n  Heading1Icon,\n  Heading2Icon,\n  Heading3Icon,\n  ListIcon,\n  ListOrderedIcon,\n  ListTodoIcon,\n  QuoteIcon,\n  TextIcon,\n} from 'lucide-react'\n\nexport const blockTypeToBlockName: Record<\n  string,\n  { label: string; icon: React.ReactNode }\n> = {\n  paragraph: {\n    label: 'Paragraph',\n    icon: <TextIcon className=\"size-4\" />,\n  },\n  h1: {\n    label: 'Heading 1',\n    icon: <Heading1Icon className=\"size-4\" />,\n  },\n  h2: {\n    label: 'Heading 2',\n    icon: <Heading2Icon className=\"size-4\" />,\n  },\n  h3: {\n    label: 'Heading 3',\n    icon: <Heading3Icon className=\"size-4\" />,\n  },\n  number: {\n    label: 'Numbered List',\n    icon: <ListOrderedIcon className=\"size-4\" />,\n  },\n  bullet: {\n    label: 'Bulleted List',\n    icon: <ListIcon className=\"size-4\" />,\n  },\n  check: {\n    label: 'Check List',\n    icon: <ListTodoIcon className=\"size-4\" />,\n  },\n  code: {\n    label: 'Code Block',\n    icon: <CodeIcon className=\"size-4\" />,\n  },\n  quote: {\n    label: 'Quote',\n    icon: <QuoteIcon className=\"size-4\" />,\n  },\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/toolbar/block-format/format-bulleted-list.tsx",
			"content": "import { INSERT_UNORDERED_LIST_COMMAND } from '@lexical/list'\nimport { $setBlocksType } from '@lexical/selection'\nimport { $createParagraphNode, $getSelection, $isRangeSelection } from 'lexical'\n\nimport { useToolbarContext } from '@/components/ui/base/editor/context/toolbar-context'\nimport { SelectItem } from '@/components/ui/select'\n\nimport { blockTypeToBlockName } from '@/components/ui/base/editor/plugins/toolbar/block-format/block-format-data'\n\nconst BLOCK_FORMAT_VALUE = 'bullet'\n\nexport function FormatBulletedList() {\n  const { activeEditor, blockType } = useToolbarContext()\n\n  const formatParagraph = () => {\n    activeEditor.update(() => {\n      const selection = $getSelection()\n      if ($isRangeSelection(selection)) {\n        $setBlocksType(selection, () => $createParagraphNode())\n      }\n    })\n  }\n\n  const formatBulletedList = () => {\n    if (blockType !== 'number') {\n      activeEditor.dispatchCommand(INSERT_UNORDERED_LIST_COMMAND, undefined)\n    } else {\n      formatParagraph()\n    }\n  }\n\n  return (\n    <SelectItem value={BLOCK_FORMAT_VALUE} onPointerDown={formatBulletedList}>\n      <div className=\"flex items-center gap-1 font-normal\">\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].icon}\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].label}\n      </div>\n    </SelectItem>\n  )\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/toolbar/block-format/format-check-list.tsx",
			"content": "import { INSERT_CHECK_LIST_COMMAND } from '@lexical/list'\nimport { $setBlocksType } from '@lexical/selection'\nimport { $createParagraphNode, $getSelection, $isRangeSelection } from 'lexical'\n\nimport { useToolbarContext } from '@/components/ui/base/editor/context/toolbar-context'\nimport { SelectItem } from '@/components/ui/select'\n\nimport { blockTypeToBlockName } from '@/components/ui/base/editor/plugins/toolbar/block-format/block-format-data'\n\nconst BLOCK_FORMAT_VALUE = 'check'\n\nexport function FormatCheckList() {\n  const { activeEditor, blockType } = useToolbarContext()\n\n  const formatParagraph = () => {\n    activeEditor.update(() => {\n      const selection = $getSelection()\n      if ($isRangeSelection(selection)) {\n        $setBlocksType(selection, () => $createParagraphNode())\n      }\n    })\n  }\n\n  const formatCheckList = () => {\n    if (blockType !== 'number') {\n      activeEditor.dispatchCommand(INSERT_CHECK_LIST_COMMAND, undefined)\n    } else {\n      formatParagraph()\n    }\n  }\n\n  return (\n    <SelectItem value={BLOCK_FORMAT_VALUE} onPointerDown={formatCheckList}>\n      <div className=\"flex items-center gap-1 font-normal\">\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].icon}\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].label}\n      </div>\n    </SelectItem>\n  )\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/toolbar/block-format/format-heading.tsx",
			"content": "import { $createHeadingNode, HeadingTagType } from '@lexical/rich-text'\nimport { $setBlocksType } from '@lexical/selection'\nimport { $getSelection } from 'lexical'\n\nimport { useToolbarContext } from '@/components/ui/base/editor/context/toolbar-context'\nimport { SelectItem } from '@/components/ui/select'\n\nimport { blockTypeToBlockName } from '@/components/ui/base/editor/plugins/toolbar/block-format/block-format-data'\n\nexport function FormatHeading({ levels = [] }: { levels: HeadingTagType[] }) {\n  const { activeEditor, blockType } = useToolbarContext()\n\n  const formatHeading = (headingSize: HeadingTagType) => {\n    if (blockType !== headingSize) {\n      activeEditor.update(() => {\n        const selection = $getSelection()\n        $setBlocksType(selection, () => $createHeadingNode(headingSize))\n      })\n    }\n  }\n\n  return levels.map((level) => (\n    <SelectItem key={level} value={level} onPointerDown={() => formatHeading(level)}>\n      <div className=\"flex items-center gap-1 font-normal\">\n        {blockTypeToBlockName[level].icon}\n        {blockTypeToBlockName[level].label}\n      </div>\n    </SelectItem>\n  ))\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/toolbar/block-format/format-numbered-list.tsx",
			"content": "import { INSERT_ORDERED_LIST_COMMAND } from '@lexical/list'\nimport { $setBlocksType } from '@lexical/selection'\nimport { $createParagraphNode, $getSelection, $isRangeSelection } from 'lexical'\n\nimport { useToolbarContext } from '@/components/ui/base/editor/context/toolbar-context'\nimport { SelectItem } from '@/components/ui/select'\n\nimport { blockTypeToBlockName } from '@/components/ui/base/editor/plugins/toolbar/block-format/block-format-data'\n\nconst BLOCK_FORMAT_VALUE = 'number'\n\nexport function FormatNumberedList() {\n  const { activeEditor, blockType } = useToolbarContext()\n\n  const formatParagraph = () => {\n    activeEditor.update(() => {\n      const selection = $getSelection()\n      if ($isRangeSelection(selection)) {\n        $setBlocksType(selection, () => $createParagraphNode())\n      }\n    })\n  }\n\n  const formatNumberedList = () => {\n    if (blockType !== 'number') {\n      activeEditor.dispatchCommand(INSERT_ORDERED_LIST_COMMAND, undefined)\n    } else {\n      formatParagraph()\n    }\n  }\n\n  return (\n    <SelectItem value={BLOCK_FORMAT_VALUE} onPointerDown={formatNumberedList}>\n      <div className=\"flex items-center gap-1 font-normal\">\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].icon}\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].label}\n      </div>\n    </SelectItem>\n  )\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/toolbar/block-format/format-paragraph.tsx",
			"content": "import { $setBlocksType } from '@lexical/selection'\nimport { $createParagraphNode, $getSelection, $isRangeSelection } from 'lexical'\n\nimport { useToolbarContext } from '@/components/ui/base/editor/context/toolbar-context'\nimport { SelectItem } from '@/components/ui/select'\n\nimport { blockTypeToBlockName } from '@/components/ui/base/editor/plugins/toolbar/block-format/block-format-data'\n\nconst BLOCK_FORMAT_VALUE = 'paragraph'\n\nexport function FormatParagraph() {\n  const { activeEditor } = useToolbarContext()\n\n  const formatParagraph = () => {\n    activeEditor.update(() => {\n      const selection = $getSelection()\n      if ($isRangeSelection(selection)) {\n        $setBlocksType(selection, () => $createParagraphNode())\n      }\n    })\n  }\n\n  return (\n    <SelectItem value={BLOCK_FORMAT_VALUE} onPointerDown={formatParagraph}>\n      <div className=\"flex items-center gap-1 font-normal\">\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].icon}\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].label}\n      </div>\n    </SelectItem>\n  )\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/toolbar/block-format/format-quote.tsx",
			"content": "import { $createQuoteNode } from '@lexical/rich-text'\nimport { $setBlocksType } from '@lexical/selection'\nimport { $getSelection } from 'lexical'\n\nimport { useToolbarContext } from '@/components/ui/base/editor/context/toolbar-context'\nimport { SelectItem } from '@/components/ui/select'\n\nimport { blockTypeToBlockName } from '@/components/ui/base/editor/plugins/toolbar/block-format/block-format-data'\n\nconst BLOCK_FORMAT_VALUE = 'quote'\n\nexport function FormatQuote() {\n  const { activeEditor, blockType } = useToolbarContext()\n\n  const formatQuote = () => {\n    if (blockType !== 'quote') {\n      activeEditor.update(() => {\n        const selection = $getSelection()\n        $setBlocksType(selection, () => $createQuoteNode())\n      })\n    }\n  }\n\n  return (\n    <SelectItem value=\"quote\" onPointerDown={formatQuote}>\n      <div className=\"flex items-center gap-1 font-normal\">\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].icon}\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].label}\n      </div>\n    </SelectItem>\n  )\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/toolbar/block-format-toolbar-plugin.tsx",
			"content": "\"use client\"\n\nimport { $isListNode, ListNode } from '@lexical/list'\nimport { $isHeadingNode } from '@lexical/rich-text'\nimport { $findMatchingParent, $getNearestNodeOfType } from '@lexical/utils'\nimport { $isRangeSelection, $isRootOrShadowRoot, BaseSelection } from 'lexical'\n\nimport { useToolbarContext } from '@/components/ui/base/editor/context/toolbar-context'\nimport { useUpdateToolbarHandler } from '@/components/ui/base/editor/editor-hooks/use-update-toolbar'\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectTrigger,\n} from '@/components/ui/select'\n\nimport { blockTypeToBlockName } from '@/components/ui/base/editor/plugins/toolbar/block-format/block-format-data'\n\nexport function BlockFormatDropDown({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const { activeEditor, blockType, setBlockType } = useToolbarContext()\n\n  function $updateToolbar(selection: BaseSelection) {\n    if ($isRangeSelection(selection)) {\n      const anchorNode = selection.anchor.getNode()\n      let element =\n        anchorNode.getKey() === 'root'\n          ? anchorNode\n          : $findMatchingParent(anchorNode, (e) => {\n            const parent = e.getParent()\n            return parent !== null && $isRootOrShadowRoot(parent)\n          })\n\n      if (element === null) {\n        element = anchorNode.getTopLevelElementOrThrow()\n      }\n\n      const elementKey = element.getKey()\n      const elementDOM = activeEditor.getElementByKey(elementKey)\n\n      if (elementDOM !== null) {\n        // setSelectedElementKey(elementKey);\n        if ($isListNode(element)) {\n          const parentList = $getNearestNodeOfType<ListNode>(\n            anchorNode,\n            ListNode\n          )\n          const type = parentList\n            ? parentList.getListType()\n            : element.getListType()\n          setBlockType(type)\n        } else {\n          const type = $isHeadingNode(element)\n            ? element.getTag()\n            : element.getType()\n          if (type in blockTypeToBlockName) {\n            setBlockType(type as keyof typeof blockTypeToBlockName)\n          }\n        }\n      }\n    }\n  }\n\n  useUpdateToolbarHandler($updateToolbar)\n\n  return (\n    <Select\n      value={blockType}\n      onValueChange={(value) => {\n        setBlockType(value as keyof typeof blockTypeToBlockName)\n      }}\n    >\n      <SelectTrigger className=\"h-8 w-min gap-1\">\n        {blockTypeToBlockName[blockType].icon}\n        <span>{blockTypeToBlockName[blockType].label}</span>\n      </SelectTrigger>\n      <SelectContent>\n        <SelectGroup>{children}</SelectGroup>\n      </SelectContent>\n    </Select>\n  )\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/toolbar/clear-formatting-toolbar-plugin.tsx",
			"content": "'use client'\n\nimport { useCallback } from 'react'\n\nimport { $isDecoratorBlockNode } from '@lexical/react/LexicalDecoratorBlockNode'\nimport { $isHeadingNode, $isQuoteNode } from '@lexical/rich-text'\nimport { $isTableSelection } from '@lexical/table'\nimport { $getNearestBlockElementAncestorOrThrow } from '@lexical/utils'\nimport {\n  $createParagraphNode,\n  $getSelection,\n  $isRangeSelection,\n  $isTextNode,\n} from 'lexical'\nimport { EraserIcon } from 'lucide-react'\n\nimport { Button } from '@/components/ui/button'\n\nimport { useToolbarContext } from '@/components/ui/base/editor/context/toolbar-context'\n\nexport function ClearFormattingToolbarPlugin() {\n  const { activeEditor } = useToolbarContext()\n\n  const clearFormatting = useCallback(() => {\n    activeEditor.update(() => {\n      const selection = $getSelection()\n      if ($isRangeSelection(selection) || $isTableSelection(selection)) {\n        const anchor = selection.anchor\n        const focus = selection.focus\n        const nodes = selection.getNodes()\n        const extractedNodes = selection.extract()\n\n        if (anchor.key === focus.key && anchor.offset === focus.offset) {\n          return\n        }\n\n        nodes.forEach((node, idx) => {\n          // We split the first and last node by the selection\n          // So that we don't format unselected text inside those nodes\n          if ($isTextNode(node)) {\n            // Use a separate variable to ensure TS does not lose the refinement\n            let textNode = node\n            if (idx === 0 && anchor.offset !== 0) {\n              textNode = textNode.splitText(anchor.offset)[1] || textNode\n            }\n            if (idx === nodes.length - 1) {\n              textNode = textNode.splitText(focus.offset)[0] || textNode\n            }\n            /**\n             * If the selected text has one format applied\n             * selecting a portion of the text, could\n             * clear the format to the wrong portion of the text.\n             *\n             * The cleared text is based on the length of the selected text.\n             */\n            // We need this in case the selected text only has one format\n            const extractedTextNode = extractedNodes[0]\n            if (nodes.length === 1 && $isTextNode(extractedTextNode)) {\n              textNode = extractedTextNode\n            }\n\n            if (textNode.__style !== '') {\n              textNode.setStyle('')\n            }\n            if (textNode.__format !== 0) {\n              textNode.setFormat(0)\n              $getNearestBlockElementAncestorOrThrow(textNode).setFormat('')\n            }\n            node = textNode\n          } else if ($isHeadingNode(node) || $isQuoteNode(node)) {\n            node.replace($createParagraphNode(), true)\n          } else if ($isDecoratorBlockNode(node)) {\n            node.setFormat('')\n          }\n        })\n      }\n    })\n  }, [activeEditor])\n\n  return (\n    <Button\n      size={'sm'}\n      variant={'outline'}\n      className=\"h-8 w-8\"\n      onClick={clearFormatting}\n    >\n      <EraserIcon className=\"h-4 w-4\" />\n    </Button>\n  )\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/toolbar/font-background-toolbar-plugin.tsx",
			"content": "'use client'\n\nimport { useCallback, useState } from 'react'\n\nimport {\n  $getSelectionStyleValueForProperty,\n  $patchStyleText,\n} from '@lexical/selection'\nimport { $getSelection, $isRangeSelection, BaseSelection } from 'lexical'\nimport { PaintBucketIcon } from 'lucide-react'\n\nimport { useToolbarContext } from '@/components/ui/base/editor/context/toolbar-context'\nimport { useUpdateToolbarHandler } from '@/components/ui/base/editor/editor-hooks/use-update-toolbar'\nimport ColorPicker from '@/components/ui/base/editor/editor-ui/colorpicker'\n\nexport function FontBackgroundToolbarPlugin() {\n  const { activeEditor } = useToolbarContext()\n\n  const [bgColor, setBgColor] = useState('#fff')\n\n  const $updateToolbar = (selection: BaseSelection) => {\n    if ($isRangeSelection(selection)) {\n      setBgColor(\n        $getSelectionStyleValueForProperty(\n          selection,\n          'background-color',\n          '#fff'\n        )\n      )\n    }\n  }\n\n  useUpdateToolbarHandler($updateToolbar)\n\n  const applyStyleText = useCallback(\n    (styles: Record<string, string>, skipHistoryStack?: boolean) => {\n      activeEditor.update(\n        () => {\n          const selection = $getSelection()\n          if (selection !== null) {\n            $patchStyleText(selection, styles)\n          }\n        },\n        skipHistoryStack ? { tag: 'historic' } : {}\n      )\n    },\n    [activeEditor]\n  )\n\n  const onBgColorSelect = useCallback(\n    (value: string, skipHistoryStack: boolean) => {\n      applyStyleText({ 'background-color': value }, skipHistoryStack)\n    },\n    [applyStyleText]\n  )\n\n  return (\n    <ColorPicker\n      icon={<PaintBucketIcon className=\"size-4\" />}\n      color={bgColor}\n      onChange={onBgColorSelect}\n      title=\"text background color\"\n    />\n  )\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/toolbar/font-color-toolbar-plugin.tsx",
			"content": "'use client'\n\nimport { useCallback, useState } from 'react'\n\nimport {\n  $getSelectionStyleValueForProperty,\n  $patchStyleText,\n} from '@lexical/selection'\nimport { $getSelection, $isRangeSelection, BaseSelection } from 'lexical'\nimport { BaselineIcon } from 'lucide-react'\n\nimport { useToolbarContext } from '@/components/ui/base/editor/context/toolbar-context'\nimport { useUpdateToolbarHandler } from '@/components/ui/base/editor/editor-hooks/use-update-toolbar'\nimport ColorPicker from '@/components/ui/base/editor/editor-ui/colorpicker'\n\nexport function FontColorToolbarPlugin() {\n  const { activeEditor } = useToolbarContext()\n\n  const [fontColor, setFontColor] = useState('#000')\n\n  const $updateToolbar = (selection: BaseSelection) => {\n    if ($isRangeSelection(selection)) {\n      setFontColor(\n        $getSelectionStyleValueForProperty(selection, 'color', '#000')\n      )\n    }\n  }\n\n  useUpdateToolbarHandler($updateToolbar)\n\n  const applyStyleText = useCallback(\n    (styles: Record<string, string>, skipHistoryStack?: boolean) => {\n      activeEditor.update(\n        () => {\n          const selection = $getSelection()\n          if (selection !== null) {\n            $patchStyleText(selection, styles)\n          }\n        },\n        skipHistoryStack ? { tag: 'historic' } : {}\n      )\n    },\n    [activeEditor]\n  )\n\n  const onFontColorSelect = useCallback(\n    (value: string, skipHistoryStack: boolean) => {\n      applyStyleText({ color: value }, skipHistoryStack)\n    },\n    [applyStyleText]\n  )\n\n  return (\n    <ColorPicker\n      icon={<BaselineIcon className=\"size-4\" />}\n      color={fontColor}\n      onChange={onFontColorSelect}\n      title=\"text color\"\n    />\n  )\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/toolbar/font-format-toolbar-plugin.tsx",
			"content": "'use client'\n\nimport { useState } from 'react'\n\nimport { $isTableSelection } from '@lexical/table'\nimport {\n  $isRangeSelection,\n  BaseSelection,\n  FORMAT_TEXT_COMMAND,\n  TextFormatType,\n} from 'lexical'\nimport {\n  BoldIcon,\n  CodeIcon,\n  ItalicIcon,\n  StrikethroughIcon,\n  UnderlineIcon,\n} from 'lucide-react'\n\nimport { Toggle } from '@/components/ui/toggle'\n\nimport { useToolbarContext } from '@/components/ui/base/editor/context/toolbar-context'\nimport { useUpdateToolbarHandler } from '@/components/ui/base/editor/editor-hooks/use-update-toolbar'\n\nconst Icons: Partial<Record<TextFormatType, React.ElementType>> = {\n  bold: BoldIcon,\n  italic: ItalicIcon,\n  underline: UnderlineIcon,\n  strikethrough: StrikethroughIcon,\n  code: CodeIcon,\n} as const\n\nexport function FontFormatToolbarPlugin({\n  format,\n}: {\n  format: Omit<TextFormatType, 'highlight' | 'subscript' | 'superscript'>\n}) {\n  const { activeEditor } = useToolbarContext()\n  const [isSelected, setIsSelected] = useState<boolean>(false)\n\n  const $updateToolbar = (selection: BaseSelection) => {\n    if ($isRangeSelection(selection) || $isTableSelection(selection)) {\n      setIsSelected(selection.hasFormat(format as TextFormatType))\n    }\n  }\n\n  useUpdateToolbarHandler($updateToolbar)\n\n  const Icon = Icons[format as TextFormatType] as React.ElementType\n\n  return (\n    <Toggle\n      aria-label=\"Toggle bold\"\n      variant=\"outline\"\n      size=\"sm\"\n      defaultPressed={isSelected}\n      pressed={isSelected}\n      onPressedChange={setIsSelected}\n      onClick={() => {\n        activeEditor.dispatchCommand(\n          FORMAT_TEXT_COMMAND,\n          format as TextFormatType\n        )\n      }}\n    >\n      <Icon className=\"h-4 w-4\" />\n    </Toggle>\n  )\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/toolbar/font-size-toolbar-plugin.tsx",
			"content": "'use client'\n\nimport { useCallback, useState } from 'react'\n\nimport {\n  $getSelectionStyleValueForProperty,\n  $patchStyleText,\n} from '@lexical/selection'\nimport { $getSelection, $isRangeSelection, BaseSelection } from 'lexical'\nimport { Minus, Plus } from 'lucide-react'\n\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\n\nimport { useToolbarContext } from '@/components/ui/base/editor/context/toolbar-context'\nimport { useUpdateToolbarHandler } from '@/components/ui/base/editor/editor-hooks/use-update-toolbar'\n\nconst DEFAULT_FONT_SIZE = 16\nconst MIN_FONT_SIZE = 1\nconst MAX_FONT_SIZE = 72\n\nexport function FontSizeToolbarPlugin() {\n  const style = 'font-size'\n  const [fontSize, setFontSize] = useState(DEFAULT_FONT_SIZE)\n\n  const { activeEditor } = useToolbarContext()\n\n  const $updateToolbar = (selection: BaseSelection) => {\n    if ($isRangeSelection(selection)) {\n      const value = $getSelectionStyleValueForProperty(\n        selection,\n        'font-size',\n        `${DEFAULT_FONT_SIZE}px`\n      )\n      setFontSize(parseInt(value) || DEFAULT_FONT_SIZE)\n    }\n  }\n\n  useUpdateToolbarHandler($updateToolbar)\n\n  const updateFontSize = useCallback(\n    (newSize: number) => {\n      const size = Math.min(Math.max(newSize, MIN_FONT_SIZE), MAX_FONT_SIZE)\n      activeEditor.update(() => {\n        const selection = $getSelection()\n        if (selection !== null) {\n          $patchStyleText(selection, {\n            [style]: `${size}px`,\n          })\n        }\n      })\n      setFontSize(size)\n    },\n    [activeEditor, style]\n  )\n\n  return (\n    <div className=\"flex items-center gap-1\">\n      <div className=\"flex items-center gap-1\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          className=\"h-8 w-8\"\n          onClick={() => updateFontSize(fontSize - 1)}\n          disabled={fontSize <= MIN_FONT_SIZE}\n        >\n          <Minus className=\"size-3\" />\n        </Button>\n        <Input\n          value={fontSize}\n          onChange={(e) =>\n            updateFontSize(parseInt(e.target.value) || DEFAULT_FONT_SIZE)\n          }\n          className=\"h-8 w-12 text-center\"\n          min={MIN_FONT_SIZE}\n          max={MAX_FONT_SIZE}\n        />\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          className=\"h-8 w-8\"\n          onClick={() => updateFontSize(fontSize + 1)}\n          disabled={fontSize >= MAX_FONT_SIZE}\n        >\n          <Plus className=\"size-3\" />\n        </Button>\n      </div>\n    </div>\n  )\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/toolbar/history-toolbar-plugin.tsx",
			"content": "'use client'\n\nimport { useEffect, useState } from 'react'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { mergeRegister } from '@lexical/utils'\nimport {\n  CAN_REDO_COMMAND,\n  CAN_UNDO_COMMAND,\n  COMMAND_PRIORITY_CRITICAL,\n  REDO_COMMAND,\n  UNDO_COMMAND,\n} from 'lexical'\nimport { RedoIcon, UndoIcon } from 'lucide-react'\n\nimport { Button } from '@/components/ui/button'\n\nimport { useToolbarContext } from '@/components/ui/base/editor/context/toolbar-context'\n\nconst IS_APPLE = true\n\nexport function HistoryToolbarPlugin() {\n  const [editor] = useLexicalComposerContext()\n  const { activeEditor, $updateToolbar } = useToolbarContext()\n  const [isEditable, setIsEditable] = useState(editor.isEditable())\n  const [canUndo, setCanUndo] = useState(false)\n  const [canRedo, setCanRedo] = useState(false)\n\n  useEffect(() => {\n    return mergeRegister(\n      editor.registerEditableListener((editable) => {\n        setIsEditable(editable)\n      }),\n      activeEditor.registerUpdateListener(({ editorState }) => {\n        editorState.read(() => {\n          $updateToolbar()\n        })\n      }),\n      activeEditor.registerCommand<boolean>(\n        CAN_UNDO_COMMAND,\n        (payload) => {\n          setCanUndo(payload)\n          return false\n        },\n        COMMAND_PRIORITY_CRITICAL\n      ),\n      activeEditor.registerCommand<boolean>(\n        CAN_REDO_COMMAND,\n        (payload) => {\n          setCanRedo(payload)\n          return false\n        },\n        COMMAND_PRIORITY_CRITICAL\n      )\n    )\n  }, [$updateToolbar, activeEditor, editor])\n\n  return (\n    <div className=\"flex items-center gap-1\">\n      <Button\n        disabled={!canUndo || !isEditable}\n        onClick={() => {\n          activeEditor.dispatchCommand(UNDO_COMMAND, undefined)\n        }}\n        title={IS_APPLE ? 'Undo (⌘Z)' : 'Undo (Ctrl+Z)'}\n        type=\"button\"\n        aria-label=\"Undo\"\n        size=\"sm\"\n        className=\"h-8 w-8\"\n        variant={'outline'}\n      >\n        <UndoIcon className=\"size-4\" />\n      </Button>\n      <Button\n        disabled={!canRedo || !isEditable}\n        onClick={() => {\n          activeEditor.dispatchCommand(REDO_COMMAND, undefined)\n        }}\n        title={IS_APPLE ? 'Redo (⇧⌘Z)' : 'Redo (Ctrl+Y)'}\n        type=\"button\"\n        aria-label=\"Redo\"\n        size=\"sm\"\n        className=\"h-8 w-8\"\n        variant={'outline'}\n      >\n        <RedoIcon className=\"size-4\" />\n      </Button>\n    </div>\n  )\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/toolbar/subsuper-toolbar-plugin.tsx",
			"content": "'use client'\n\nimport { useState } from 'react'\n\nimport { $isTableSelection } from '@lexical/table'\nimport { $isRangeSelection, BaseSelection, FORMAT_TEXT_COMMAND } from 'lexical'\nimport { SubscriptIcon, SuperscriptIcon } from 'lucide-react'\n\nimport { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group'\n\nimport { useToolbarContext } from '@/components/ui/base/editor/context/toolbar-context'\nimport { useUpdateToolbarHandler } from '@/components/ui/base/editor/editor-hooks/use-update-toolbar'\n\nexport function SubSuperToolbarPlugin() {\n  const { activeEditor } = useToolbarContext()\n  const [isSubscript, setIsSubscript] = useState(false)\n  const [isSuperscript, setIsSuperscript] = useState(false)\n\n  const $updateToolbar = (selection: BaseSelection) => {\n    if ($isRangeSelection(selection) || $isTableSelection(selection)) {\n      setIsSubscript(selection.hasFormat('subscript'))\n      setIsSuperscript(selection.hasFormat('superscript'))\n    }\n  }\n\n  useUpdateToolbarHandler($updateToolbar)\n\n  return (\n    <ToggleGroup\n      type=\"single\"\n      defaultValue={\n        isSubscript ? 'subscript' : isSuperscript ? 'superscript' : ''\n      }\n    >\n      <ToggleGroupItem\n        value=\"subscript\"\n        aria-label=\"Toggle subscript\"\n        onClick={() => {\n          activeEditor.dispatchCommand(FORMAT_TEXT_COMMAND, 'subscript')\n        }}\n        size=\"sm\"\n        variant={'outline'}\n      >\n        <SubscriptIcon className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem\n        value=\"superscript\"\n        aria-label=\"Toggle superscript\"\n        onClick={() => {\n          activeEditor.dispatchCommand(FORMAT_TEXT_COMMAND, 'superscript')\n        }}\n        size=\"sm\"\n        variant={'outline'}\n      >\n        <SuperscriptIcon className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins/toolbar/toolbar-plugin.tsx",
			"content": "'use client'\n\nimport { useEffect, useState } from 'react'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { COMMAND_PRIORITY_CRITICAL, SELECTION_CHANGE_COMMAND } from 'lexical'\n\nimport { ToolbarContext } from '@/components/ui/base/editor/context/toolbar-context'\n\nimport { useEditorModal } from '@/components/ui/base/editor/editor-hooks/use-modal'\n\nexport function ToolbarPlugin({\n  children,\n}: {\n  children: (props: {\n    blockType: string\n  }) => React.ReactNode\n}) {\n  const [editor] = useLexicalComposerContext()\n\n  const [activeEditor, setActiveEditor] = useState(editor)\n  const [blockType, setBlockType] = useState<string>('paragraph')\n\n  const [modal, showModal] = useEditorModal()\n\n  const $updateToolbar = () => {}\n\n  useEffect(() => {\n    return activeEditor.registerCommand(\n      SELECTION_CHANGE_COMMAND,\n      (_payload, newEditor) => {\n        setActiveEditor(newEditor)\n        return false\n      },\n      COMMAND_PRIORITY_CRITICAL\n    )\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editor])\n\n  return (\n    <ToolbarContext\n      activeEditor={activeEditor}\n      $updateToolbar={$updateToolbar}\n      blockType={blockType}\n      setBlockType={setBlockType}\n      showModal={showModal}\n    >\n      {modal}\n\n      {children({ blockType })}\n\n    </ToolbarContext>\n  )\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/plugins.tsx",
			"content": "import { CheckListPlugin } from '@lexical/react/LexicalCheckListPlugin'\nimport { LexicalErrorBoundary } from '@lexical/react/LexicalErrorBoundary'\nimport { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin'\nimport { ListPlugin } from '@lexical/react/LexicalListPlugin'\nimport { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin'\nimport { useState } from 'react'\nimport { ContentEditable } from './editor-ui/content-editable'\nimport { ActionsPlugin } from './plugins/actions/actions-plugin'\nimport { CharacterLimitPlugin } from './plugins/actions/character-limit-plugin'\nimport { CounterCharacterPlugin } from './plugins/actions/counter-character-plugin'\nimport { MaxLengthPlugin } from './plugins/actions/max-length-plugin'\nimport { DraggableBlockPlugin } from './plugins/draggable-block-plugin'\nimport { BlockFormatDropDown } from './plugins/toolbar/block-format-toolbar-plugin'\nimport { FormatBulletedList } from './plugins/toolbar/block-format/format-bulleted-list'\nimport { FormatCheckList } from './plugins/toolbar/block-format/format-check-list'\nimport { FormatHeading } from './plugins/toolbar/block-format/format-heading'\nimport { FormatNumberedList } from './plugins/toolbar/block-format/format-numbered-list'\nimport { FormatParagraph } from './plugins/toolbar/block-format/format-paragraph'\nimport { FormatQuote } from './plugins/toolbar/block-format/format-quote'\nimport { ClearFormattingToolbarPlugin } from './plugins/toolbar/clear-formatting-toolbar-plugin'\nimport { FontBackgroundToolbarPlugin } from './plugins/toolbar/font-background-toolbar-plugin'\nimport { FontColorToolbarPlugin } from './plugins/toolbar/font-color-toolbar-plugin'\nimport { FontFormatToolbarPlugin } from './plugins/toolbar/font-format-toolbar-plugin'\nimport { FontSizeToolbarPlugin } from './plugins/toolbar/font-size-toolbar-plugin'\nimport { HistoryToolbarPlugin } from './plugins/toolbar/history-toolbar-plugin'\nimport { SubSuperToolbarPlugin } from './plugins/toolbar/subsuper-toolbar-plugin'\nimport { ToolbarPlugin } from './plugins/toolbar/toolbar-plugin'\n\nconst maxLength = 100\n\nexport function Plugins() {\n\tconst [floatingAnchorElem, setFloatingAnchorElem] = useState<HTMLDivElement | null>(null)\n\n\tconst onRef = (_floatingAnchorElem: HTMLDivElement) => {\n\t\tif (_floatingAnchorElem !== null) setFloatingAnchorElem(_floatingAnchorElem)\n\t}\n\n\treturn (\n\t\t<div className='relative'>\n\t\t\t{/* toolbar plugins */}\n\t\t\t<ToolbarPlugin>\n\t\t\t\t{() => (\n\t\t\t\t\t<div className='vertical-align-middle sticky top-0 z-10 flex items-center gap-2 overflow-auto border-b p-1'>\n\t\t\t\t\t\t<HistoryToolbarPlugin />\n\t\t\t\t\t\t<Separator />\n\t\t\t\t\t\t<BlockFormatDropDown>\n\t\t\t\t\t\t\t<FormatParagraph />\n\t\t\t\t\t\t\t<FormatHeading levels={['h1', 'h2', 'h3']} />\n\t\t\t\t\t\t\t<FormatNumberedList />\n\t\t\t\t\t\t\t{/* BUG: Unordered list not working like ordered list */}\n\t\t\t\t\t\t\t<FormatBulletedList />\n\t\t\t\t\t\t\t<FormatCheckList />\n\t\t\t\t\t\t\t<FormatQuote />\n\t\t\t\t\t\t</BlockFormatDropDown>\n\t\t\t\t\t\t<Separator />\n\t\t\t\t\t\t<FontSizeToolbarPlugin />\n\t\t\t\t\t\t<Separator />\n\t\t\t\t\t\t<div className='flex gap-1'>\n\t\t\t\t\t\t\t<FontFormatToolbarPlugin format='bold' />\n\t\t\t\t\t\t\t<FontFormatToolbarPlugin format='italic' />\n\t\t\t\t\t\t\t<FontFormatToolbarPlugin format='underline' />\n\t\t\t\t\t\t\t<FontFormatToolbarPlugin format='strikethrough' />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Separator />\n\t\t\t\t\t\t<SubSuperToolbarPlugin />\n\t\t\t\t\t\t<Separator />\n\t\t\t\t\t\t<div className='flex gap-1'>\n\t\t\t\t\t\t\t<FontColorToolbarPlugin />\n\t\t\t\t\t\t\t<FontBackgroundToolbarPlugin />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Separator />\n\t\t\t\t\t\t<ClearFormattingToolbarPlugin />\n\t\t\t\t\t\t{/* BUG: Link */}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</ToolbarPlugin>\n\n\t\t\t{/* editor plugins */}\n\t\t\t<div className='relative'>\n\t\t\t\t<RichTextPlugin\n\t\t\t\t\tcontentEditable={\n\t\t\t\t\t\t<div className=''>\n\t\t\t\t\t\t\t<div className='' ref={onRef}>\n\t\t\t\t\t\t\t\t<ContentEditable placeholder={'Start typing...'} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t\tErrorBoundary={LexicalErrorBoundary}\n\t\t\t\t/>\n\t\t\t\t<HistoryPlugin />\n\t\t\t\t<ListPlugin />\n\t\t\t\t<CheckListPlugin />\n\t\t\t\t<DraggableBlockPlugin anchorElem={floatingAnchorElem} />\n\t\t\t</div>\n\t\t\t{/* actions plugins */}\n\t\t\t<ActionsPlugin>\n\t\t\t\t<div className='clear-both flex items-center justify-between border-t p-1 overflow-auto gap-2'>\n\t\t\t\t\t<div className='flex justify-start flex-1'>\n\t\t\t\t\t\t{/* left side action buttons */}\n\t\t\t\t\t\t<MaxLengthPlugin maxLength={maxLength} />\n\t\t\t\t\t\t<CharacterLimitPlugin maxLength={maxLength} charset='UTF-16' />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{/* center action buttons */}\n\t\t\t\t\t\t<CounterCharacterPlugin charset='UTF-16' />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='flex justify-end flex-1'>{/* right side action buttons */}</div>\n\t\t\t\t</div>\n\t\t\t</ActionsPlugin>\n\t\t</div>\n\t)\n}\n\nconst Separator = () => <div className='h-6 mx-1 my-auto border-l' />\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/themes/editor-theme.css",
			"content": ".EditorTheme__code {\n  background-color: transparent;\n  font-family: Menlo, Consolas, Monaco, monospace;\n  display: block;\n  padding: 8px 8px 8px 52px;\n  line-height: 1.53;\n  font-size: 13px;\n  margin: 0;\n  margin-top: 8px;\n  margin-bottom: 8px;\n  overflow-x: auto;\n  border: 1px solid #ccc;\n  position: relative;\n  border-radius: 8px;\n  tab-size: 2;\n}\n.EditorTheme__code:before {\n  content: attr(data-gutter);\n  position: absolute;\n  background-color: transparent;\n  border-right: 1px solid #ccc;\n  left: 0;\n  top: 0;\n  padding: 8px;\n  color: #777;\n  white-space: pre-wrap;\n  text-align: right;\n  min-width: 25px;\n}\n.EditorTheme__table {\n  border-collapse: collapse;\n  border-spacing: 0;\n  overflow-y: scroll;\n  overflow-x: scroll;\n  table-layout: fixed;\n  width: fit-content;\n  width: 100%;\n  margin: 0px 25px 30px 0px;\n}\n.EditorTheme__tokenComment {\n  color: slategray;\n}\n.EditorTheme__tokenPunctuation {\n  color: #999;\n}\n.EditorTheme__tokenProperty {\n  color: #905;\n}\n.EditorTheme__tokenSelector {\n  color: #690;\n}\n.EditorTheme__tokenOperator {\n  color: #9a6e3a;\n}\n.EditorTheme__tokenAttr {\n  color: #07a;\n}\n.EditorTheme__tokenVariable {\n  color: #e90;\n}\n.EditorTheme__tokenFunction {\n  color: #dd4a68;\n}\n\n.Collapsible__container {\n  background-color: var(--background);\n  border: 1px solid #ccc;\n  border-radius: 0.5rem;\n  margin-bottom: 0.5rem;\n}\n\n.Collapsible__title{\n  padding: 0.25rem;\n  padding-left: 1rem;\n  position: relative;\n  font-weight: bold;\n  outline: none;\n  cursor: pointer;\n  list-style-type: disclosure-closed;\n  list-style-position: inside;\n}\n\n.Collapsible__title p{\n  display: inline-flex;\n}\n.Collapsible__title::marker{\n  color: lightgray;\n}\n.Collapsible__container[open] >.Collapsible__title {\n  list-style-type: disclosure-open;\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./components/ui/base/editor/themes/editor-theme.ts",
			"content": "import { EditorThemeClasses } from 'lexical'\n\nimport './editor-theme.css'\n\nexport const editorTheme: EditorThemeClasses = {\n  ltr: 'text-left',\n  rtl: 'text-right',\n  heading: {\n    h1: 'scroll-m-20 text-4xl font-extrabold tracking-tight lg:text-5xl',\n    h2: 'scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight first:mt-0',\n    h3: 'scroll-m-20 text-2xl font-semibold tracking-tight',\n    h4: 'scroll-m-20 text-xl font-semibold tracking-tight',\n    h5: 'scroll-m-20 text-lg font-semibold tracking-tight',\n    h6: 'scroll-m-20 text-base font-semibold tracking-tight',\n  },\n  paragraph: 'leading-7 [&:not(:first-child)]:mt-6',\n  quote: 'mt-6 border-l-2 pl-6 italic',\n  link: 'text-blue-600 hover:underline hover:cursor-pointer',\n  list: {\n    checklist: 'relative',\n    listitem: 'mx-8',\n    listitemChecked:\n      'relative mx-2 px-6 list-none outline-none line-through before:content-[\"\"] before:w-4 before:h-4 before:top-0.5 before:left-0 before:cursor-pointer before:block before:bg-cover before:absolute before:border before:border-primary before:rounded before:bg-primary before:bg-no-repeat after:content-[\"\"] after:cursor-pointer after:border-white after:border-solid after:absolute after:block after:top-[6px] after:w-[3px] after:left-[7px] after:right-[7px] after:h-[6px] after:rotate-45 after:border-r-2 after:border-b-2 after:border-l-0 after:border-t-0',\n    listitemUnchecked:\n      'relative mx-2 px-6 list-none outline-none before:content-[\"\"] before:w-4 before:h-4 before:top-0.5 before:left-0 before:cursor-pointer before:block before:bg-cover before:absolute before:border before:border-primary before:rounded',\n    nested: {\n      listitem: 'list-none before:hidden after:hidden',\n    },\n    ol: 'my-6 ml-6 list-decimal [&>li]:mt-2',\n    olDepth: [\n      'list-outside !list-decimal',\n      'list-outside !list-[upper-roman]',\n      'list-outside !list-[lower-roman]',\n      'list-outside !list-[upper-alpha]',\n      'list-outside !list-[lower-alpha]',\n    ],\n    ul: 'm-0 p-0 list-outside',\n  },\n  hashtag: 'text-blue-600 bg-blue-100 rounded-md px-1',\n  text: {\n    bold: 'font-bold',\n    code: 'bg-gray-100 p-1 rounded-md',\n    italic: 'italic',\n    strikethrough: 'line-through',\n    subscript: 'sub',\n    superscript: 'sup',\n    underline: 'underline',\n    underlineStrikethrough: 'underline line-through',\n  },\n  image: 'relative inline-block user-select-none cursor-default editor-image',\n  inlineImage:\n    'relative inline-block user-select-none cursor-default inline-editor-image',\n  keyword: 'text-purple-900 font-bold',\n  code: 'EditorTheme__code',\n  codeHighlight: {\n    atrule: 'EditorTheme__tokenAttr',\n    attr: 'EditorTheme__tokenAttr',\n    boolean: 'EditorTheme__tokenProperty',\n    builtin: 'EditorTheme__tokenSelector',\n    cdata: 'EditorTheme__tokenComment',\n    char: 'EditorTheme__tokenSelector',\n    class: 'EditorTheme__tokenFunction',\n    'class-name': 'EditorTheme__tokenFunction',\n    comment: 'EditorTheme__tokenComment',\n    constant: 'EditorTheme__tokenProperty',\n    deleted: 'EditorTheme__tokenProperty',\n    doctype: 'EditorTheme__tokenComment',\n    entity: 'EditorTheme__tokenOperator',\n    function: 'EditorTheme__tokenFunction',\n    important: 'EditorTheme__tokenVariable',\n    inserted: 'EditorTheme__tokenSelector',\n    keyword: 'EditorTheme__tokenAttr',\n    namespace: 'EditorTheme__tokenVariable',\n    number: 'EditorTheme__tokenProperty',\n    operator: 'EditorTheme__tokenOperator',\n    prolog: 'EditorTheme__tokenComment',\n    property: 'EditorTheme__tokenProperty',\n    punctuation: 'EditorTheme__tokenPunctuation',\n    regex: 'EditorTheme__tokenVariable',\n    selector: 'EditorTheme__tokenSelector',\n    string: 'EditorTheme__tokenSelector',\n    symbol: 'EditorTheme__tokenProperty',\n    tag: 'EditorTheme__tokenProperty',\n    url: 'EditorTheme__tokenOperator',\n    variable: 'EditorTheme__tokenVariable',\n  },\n  characterLimit: '!bg-destructive/50',\n  table: 'EditorTheme__table w-fit overflow-scroll border-collapse',\n  tableCell:\n    'EditorTheme__tableCell w-24 relative border px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right\"',\n  tableCellActionButton:\n    'EditorTheme__tableCellActionButton bg-background block border-0 rounded-2xl w-5 h-5 text-foreground cursor-pointer',\n  tableCellActionButtonContainer:\n    'EditorTheme__tableCellActionButtonContainer block right-1 top-1.5 absolute z-10 w-5 h-5',\n  tableCellEditing: 'EditorTheme__tableCellEditing rounded-sm shadow-sm',\n  tableCellHeader:\n    'EditorTheme__tableCellHeader bg-muted border px-4 py-2 text-left font-bold [&[align=center]]:text-center [&[align=right]]:text-right',\n  tableCellPrimarySelected:\n    'EditorTheme__tableCellPrimarySelected border border-primary border-solid block h-[calc(100%-2px)] w-[calc(100%-2px)] absolute -left-[1px] -top-[1px] z-10 ',\n  tableCellResizer:\n    'EditorTheme__tableCellResizer absolute -right-1 h-full w-2 cursor-ew-resize z-10 top-0',\n  tableCellSelected: 'EditorTheme__tableCellSelected bg-muted',\n  tableCellSortedIndicator:\n    'EditorTheme__tableCellSortedIndicator block opacity-50 bsolute bottom-0 left-0 w-full h-1 bg-muted',\n  tableResizeRuler:\n    'EditorTheme__tableCellResizeRuler block absolute w-[1px] h-full bg-primary top-0',\n  tableRowStriping:\n    'EditorTheme__tableRowStriping m-0 border-t p-0 even:bg-muted',\n  tableSelected: 'EditorTheme__tableSelected ring-2 ring-primary ring-offset-2',\n  tableSelection: 'EditorTheme__tableSelection bg-transparent',\n  layoutItem: 'border border-dashed px-4 py-2',\n  layoutContainer: 'grid gap-2.5 my-2.5 mx-0',\n  autocomplete: 'text-muted-foreground',\n  blockCursor: '',\n  embedBlock: {\n    base: 'user-select-none',\n    focus: 'ring-2 ring-primary ring-offset-2',\n  },\n  hr: 'p-0.5 border-none my-1 mx-0 cursor-pointer after:content-[\"\"] after:block after:h-0.5 after:bg-muted selected:ring-2 selected:ring-primary selected:ring-offset-2 selected:user-select-none',\n  indent: '[--lexical-indent-base-value:40px]',\n  mark: '',\n  markOverlap: '',\n}\n",
			"type": "registry:ui"
		}
	],
	"tailwind": {},
	"cssVars": {},
	"meta": {}
}
