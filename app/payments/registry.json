{
	"name": "payments",
	"type": "registry:block",
	"dependencies": [
		"@auth/prisma-adapter@2.7.0",
		"@aws-sdk/client-s3",
		"@aws-sdk/s3-request-presigner",
		"@prisma/client",
		"@radix-ui/react-alert-dialog",
		"@radix-ui/react-avatar",
		"@radix-ui/react-checkbox",
		"@radix-ui/react-dialog",
		"@radix-ui/react-dropdown-menu",
		"@radix-ui/react-label",
		"@radix-ui/react-popover",
		"@radix-ui/react-select",
		"@radix-ui/react-slot",
		"@radix-ui/react-tabs",
		"@stripe/stripe-js",
		"@t3-oss/env-nextjs",
		"bcryptjs",
		"cmdk",
		"lodash",
		"next-auth@beta",
		"next-themes",
		"sonner",
		"stripe",
		"uuid",
		"zod"
	],
	"devDependencies": ["@types/bcryptjs", "@types/lodash", "dotenv", "prisma", "tsx"],
	"registryDependencies": [
		"alert-dialog",
		"avatar",
		"button",
		"card",
		"checkbox",
		"command",
		"dialog",
		"dropdown-menu",
		"input",
		"label",
		"popover",
		"select",
		"sonner",
		"tabs",
		"textarea",
		"https://r.gambrell.dev"
	],
	"files": [
		{
			"path": "./actions/auth.ts",
			"content": "'use server'\n\nimport { handleFormAction } from '@/components/ui/base/action'\nimport { signIn, signOut } from '@/lib/auth'\nimport prisma from '@/lib/db'\nimport { getSuccessRedirect } from '@/lib/utils'\nimport { loginSchema, oauthSchema, registerSchema, verifyEmailSchema } from '@/validators/auth'\nimport { Prisma } from '@prisma/client'\nimport bcrypt from 'bcryptjs'\nimport { AuthError } from 'next-auth'\nimport { OAuthProviderId } from 'next-auth/providers'\nimport { redirect } from 'next/navigation'\n\nexport const login = async (_: unknown, formData: FormData) =>\n\thandleFormAction(formData, loginSchema, async (data) => {\n\t\ttry {\n\t\t\tawait signIn('credentials', { email: data.email, password: data.password, redirectTo: data.callbackUrl })\n\t\t} catch (error) {\n\t\t\tif (error instanceof AuthError) return { globalError: error.message }\n\t\t\tthrow error\n\t\t}\n\n\t\tredirect('/dashboard')\n\t})\n\nexport async function logout() {\n\tawait signOut({ redirectTo: '/login' })\n}\n\nexport const oauth = async (provider: OAuthProviderId, _: unknown, formData: FormData) =>\n\thandleFormAction(formData, oauthSchema, async (data) => {\n\t\ttry {\n\t\t\tawait signIn(provider, { redirectTo: data.callbackUrl })\n\t\t} catch (error) {\n\t\t\tif (error instanceof AuthError) return { globalError: error.message }\n\t\t\tthrow error\n\t\t}\n\n\t\tredirect('/dashboard')\n\t})\n\nexport const register = async (_: unknown, formData: FormData) =>\n\thandleFormAction(formData, registerSchema, async (data) => {\n\t\ttry {\n\t\t\tconst passwordHash = await bcrypt.hash(data.password, 10)\n\t\t\tawait prisma.user.create({ data: { name: `${data.firstName} ${data.lastName}`, email: data.email, passwordHash } })\n\t\t} catch (error) {\n\t\t\tif (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2002')\n\t\t\t\treturn { fieldErrors: { email: ['User already exists with that email'] } }\n\t\t\telse if (error instanceof AuthError) return { globalError: error.message }\n\t\t\tthrow error\n\t\t}\n\n\t\tredirect(getSuccessRedirect('/login', 'Account created, please login'))\n\t})\n\nexport const verifyEmail = async (_prevState: unknown, formData: FormData) =>\n\thandleFormAction(formData, verifyEmailSchema, async (data) => {\n\t\ttry {\n\t\t\tawait signIn('resend', { email: data.email, redirect: false })\n\t\t} catch (error) {\n\t\t\tif (error instanceof AuthError) return { globalError: error.message }\n\t\t\tthrow error\n\t\t}\n\n\t\tredirect(getSuccessRedirect('/login', 'A sign in link has been sent to your email address.'))\n\t})\n",
			"type": "registry:example",
			"target": "~/actions/auth.ts"
		},
		{
			"path": "./actions/stripe.ts",
			"content": "'use server'\n\nimport { auth } from '@/lib/auth'\nimport { calculateTrialEndUnixTimestamp, CheckoutResponse, createOrRetrieveCustomer, stripe } from '@/lib/stripe'\nimport { getErrorRedirect, getSuccessRedirect, getURL } from '@/lib/utils'\nimport { Price } from '@prisma/client'\nimport Stripe from 'stripe'\n\nexport async function checkoutWithStripe(price: Price): Promise<CheckoutResponse> {\n\ttry {\n\t\tconst user = await auth()\n\n\t\t// Retrieve or create the customer in Stripe\n\t\tlet customer: string\n\t\ttry {\n\t\t\tcustomer = (await createOrRetrieveCustomer({ uuid: user.id ?? '', email: user.email ?? '' }))!\n\t\t} catch (err) {\n\t\t\tconsole.error(err)\n\t\t\tthrow new Error('Unable to access customer record.')\n\t\t}\n\n\t\tlet params: Stripe.Checkout.SessionCreateParams = {\n\t\t\tallow_promotion_codes: true,\n\t\t\tbilling_address_collection: 'required',\n\t\t\tcustomer,\n\t\t\tcustomer_update: {\n\t\t\t\taddress: 'auto',\n\t\t\t},\n\t\t\tline_items: [\n\t\t\t\t{\n\t\t\t\t\tprice: price.id,\n\t\t\t\t\tquantity: 1,\n\t\t\t\t},\n\t\t\t],\n\t\t\tcancel_url: getURL('/plans'),\n\t\t\tsuccess_url: getURL(getSuccessRedirect('/plans', 'Purchase successful.')),\n\t\t}\n\n\t\tparams = {\n\t\t\t...params,\n\t\t\tmode: 'subscription',\n\t\t\tsubscription_data: {\n\t\t\t\ttrial_end: calculateTrialEndUnixTimestamp(price.trial_period_days),\n\t\t\t},\n\t\t}\n\n\t\t// Create a checkout session in Stripe\n\t\tlet session\n\t\ttry {\n\t\t\tsession = await stripe.checkout.sessions.create(params)\n\t\t} catch (err) {\n\t\t\tconsole.error(err)\n\t\t\tthrow new Error('Unable to create checkout session.')\n\t\t}\n\n\t\t// Instead of returning a Response, just return the data or error.\n\t\tif (session) return { sessionId: session.id }\n\t\telse throw new Error('Unable to create checkout session.')\n\t} catch (error) {\n\t\tif (error instanceof Error)\n\t\t\treturn {\n\t\t\t\terrorRedirect: getErrorRedirect('/plans', error.message),\n\t\t\t}\n\t\telse\n\t\t\treturn {\n\t\t\t\terrorRedirect: getErrorRedirect('/plans', 'An unknown error occurred.'),\n\t\t\t}\n\t}\n}\n\nexport async function createStripePortal(currentPath: string) {\n\ttry {\n\t\tconst user = await auth()\n\n\t\tlet customer\n\t\ttry {\n\t\t\tcustomer = await createOrRetrieveCustomer({ uuid: user.id ?? '', email: user.email ?? '' })\n\t\t} catch (err) {\n\t\t\tconsole.error(err)\n\t\t\tthrow new Error('Unable to access customer record.')\n\t\t}\n\n\t\tif (!customer) throw new Error('Could not get customer.')\n\n\t\ttry {\n\t\t\tconst { url } = await stripe.billingPortal.sessions.create({\n\t\t\t\tcustomer,\n\t\t\t\treturn_url: getURL('/plans'),\n\t\t\t})\n\t\t\tif (!url) throw new Error('Could not create billing portal')\n\n\t\t\treturn url\n\t\t} catch (err) {\n\t\t\tconsole.error(err)\n\t\t\tthrow new Error('Could not create billing portal')\n\t\t}\n\t} catch (error) {\n\t\tif (error instanceof Error) {\n\t\t\tconsole.error(error)\n\t\t\treturn getErrorRedirect(currentPath, error.message)\n\t\t} else return getErrorRedirect(currentPath, 'An unknown error occurred.')\n\t}\n}\n",
			"type": "registry:example",
			"target": "~/actions/stripe.ts"
		},
		{
			"path": "./actions/user.ts",
			"content": "'use server'\n\nimport { handleFormAction } from '@/components/ui/base/action'\nimport { auth } from '@/lib/auth'\nimport prisma from '@/lib/db'\nimport { s3 } from '@/lib/s3'\nimport { getSuccessRedirect } from '@/lib/utils'\nimport { updateAvatarSchema, updateUserSchema } from '@/validators/user'\nimport { PutObjectCommand } from '@aws-sdk/client-s3'\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner'\nimport { Account } from '@prisma/client'\nimport bcrypt from 'bcryptjs'\nimport { revalidatePath } from 'next/cache'\nimport { redirect } from 'next/navigation'\nimport { env } from 'process'\nimport { v4 as uuidv4 } from 'uuid'\n\nexport const updateAvatar = async (_: unknown, formData: FormData) =>\n\thandleFormAction(formData, updateAvatarSchema, async ({ file }) => {\n\t\tconst user = await auth()\n\t\tconst Key = `avatars/${user.id}/${uuidv4()}`\n\n\t\tconst cmd = new PutObjectCommand({ Bucket: env.AWS_PUBLIC_BUCKET_NAME, Key, ContentType: file.type ?? 'application/octet-stream' })\n\t\tconst url = await getSignedUrl(s3, cmd, { expiresIn: 60 })\n\n\t\tawait prisma.user\n\t\t\t.update({\n\t\t\t\twhere: { id: user.id },\n\t\t\t\tdata: { image: `https://${env.AWS_PUBLIC_BUCKET_NAME}.s3.${env.AWS_REGION}.amazonaws.com/${Key}` },\n\t\t\t})\n\t\t\t.then(async () => await fetch(url, { method: 'PUT', body: file }))\n\n\t\trevalidatePath('/settings')\n\t})\n\nexport const updateUser = async (_: unknown, formData: FormData) =>\n\thandleFormAction(formData, updateUserSchema, async ({ password, confirmPassword, ...data }) => {\n\t\tconst user = await auth()\n\n\t\tawait prisma.user.update({ where: { id: user.id }, data })\n\n\t\tif (password && confirmPassword) {\n\t\t\tconst passwordHash = await bcrypt.hash(password, 10)\n\t\t\tawait prisma.user.update({ where: { id: user.id }, data: { passwordHash } })\n\t\t}\n\n\t\tredirect(getSuccessRedirect('/settings', 'Account updated'))\n\t})\n\nexport async function unlinkAccount(provider: Account['provider'], providerAccountId: Account['providerAccountId']) {\n\tconst user = await auth()\n\tawait prisma.account.delete({ where: { provider_providerAccountId: { provider, providerAccountId }, userId: user.id } })\n\tredirect(getSuccessRedirect('/settings', 'Account unlinked'))\n}\n",
			"type": "registry:example",
			"target": "~/actions/user.ts"
		},
		{
			"path": "./app/(auth)/forgot/page.tsx",
			"content": "'use client'\n\nimport { verifyEmail } from '@/actions/auth'\nimport { AuthLayout } from '@/components/auth-layout'\nimport { ActionButton } from '@/components/ui/base/action-button'\nimport { FormInput } from '@/components/ui/base/form-input'\nimport { useForm } from '@/components/ui/base/use-form'\nimport { CardContent, CardFooter } from '@/components/ui/card'\nimport { verifyEmailSchema } from '@/validators/auth'\nimport Link from 'next/link'\n\nexport default function ForgotPage() {\n\tconst [state, action] = useForm(verifyEmail, verifyEmailSchema)\n\n\treturn (\n\t\t<AuthLayout title='Reset your password' desc=\"Enter your email address and we'll send you a link to reset your password\">\n\t\t\t<CardContent>\n\t\t\t\t<form action={action} className='grid gap-6'>\n\t\t\t\t\t<FormInput label='Email' name='email' placeholder='m@example.com' state={state} />\n\t\t\t\t\t<ActionButton>Send verification</ActionButton>\n\t\t\t\t</form>\n\t\t\t</CardContent>\n\t\t\t<CardFooter>\n\t\t\t\t<p className='text-center text-sm text-muted-foreground'>\n\t\t\t\t\tRemember your password?{' '}\n\t\t\t\t\t<Link className='text-primary underline' href='/login'>\n\t\t\t\t\t\tSign in\n\t\t\t\t\t</Link>\n\t\t\t\t</p>\n\t\t\t</CardFooter>\n\t\t</AuthLayout>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/(auth)/forgot/page.tsx"
		},
		{
			"path": "./app/(auth)/login/page.tsx",
			"content": "'use client'\n\nimport { login, oauth } from '@/actions/auth'\nimport { AuthLayout } from '@/components/auth-layout'\nimport { ActionButton } from '@/components/ui/base/action-button'\nimport { FormInput } from '@/components/ui/base/form-input'\nimport { useForm } from '@/components/ui/base/use-form'\nimport { CardContent } from '@/components/ui/card'\nimport { Label } from '@/components/ui/label'\nimport { loginSchema } from '@/validators/auth'\nimport Link from 'next/link'\nimport { useSearchParams } from 'next/navigation'\nimport { Suspense } from 'react'\n\nexport default function LoginPage() {\n\treturn (\n\t\t<Suspense>\n\t\t\t<Page />\n\t\t</Suspense>\n\t)\n}\n\nfunction Page() {\n\tconst searchParams = useSearchParams()\n\tconst callbackUrl = searchParams.get('callbackUrl') ?? '/dashboard'\n\n\tconst [state, action] = useForm(login, loginSchema)\n\tconst [, githubAction] = useForm(oauth.bind(null, 'github'))\n\tconst [, googleAction] = useForm(oauth.bind(null, 'google'))\n\n\treturn (\n\t\t<AuthLayout title='Welcome back' desc='Enter your credentials to access your account'>\n\t\t\t<CardContent>\n\t\t\t\t<form action={action} className='grid gap-6'>\n\t\t\t\t\t<input type='hidden' name='callbackUrl' value={callbackUrl} />\n\t\t\t\t\t<FormInput label='Email' name='email' placeholder='m@example.com' state={state} />\n\t\t\t\t\t<FormInput\n\t\t\t\t\t\tlabel={\n\t\t\t\t\t\t\t<div className='flex items-center'>\n\t\t\t\t\t\t\t\t<Label htmlFor='password'>Password</Label>\n\t\t\t\t\t\t\t\t<Link className='ml-auto inline-block text-primary text-sm underline' href='/forgot'>\n\t\t\t\t\t\t\t\t\tForgot password?\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tname='password'\n\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\tclearOnError\n\t\t\t\t\t\tstate={state}\n\t\t\t\t\t/>\n\t\t\t\t\t<ActionButton>Log in</ActionButton>\n\n\t\t\t\t\t<div className='relative'>\n\t\t\t\t\t\t<div className='absolute inset-0 flex items-center'>\n\t\t\t\t\t\t\t<span className='w-full border-t' />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='relative flex justify-center text-xs uppercase'>\n\t\t\t\t\t\t\t<span className='bg-background px-2 text-muted-foreground'>Or</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className='grid gap-2'>\n\t\t\t\t\t\t<ActionButton formAction={githubAction} variant='outline'>\n\t\t\t\t\t\t\tSign in with GitHub\n\t\t\t\t\t\t</ActionButton>\n\t\t\t\t\t\t<ActionButton formAction={googleAction} variant='outline'>\n\t\t\t\t\t\t\tSign in with Google\n\t\t\t\t\t\t</ActionButton>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<p className='text-center text-sm text-muted-foreground'>\n\t\t\t\t\t\tDon&apos;t have an account?{' '}\n\t\t\t\t\t\t<Link className='text-primary underline' href='/register'>\n\t\t\t\t\t\t\tSign up\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</p>\n\t\t\t\t</form>\n\t\t\t</CardContent>\n\t\t</AuthLayout>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/(auth)/login/page.tsx"
		},
		{
			"path": "./app/(auth)/register/page.tsx",
			"content": "'use client'\n\nimport { oauth, register } from '@/actions/auth'\nimport { AuthLayout } from '@/components/auth-layout'\nimport { ActionButton } from '@/components/ui/base/action-button'\nimport { FormCheckbox } from '@/components/ui/base/form-checkbox'\nimport { FormInput } from '@/components/ui/base/form-input'\nimport { useForm } from '@/components/ui/base/use-form'\nimport { CardContent } from '@/components/ui/card'\nimport { registerSchema } from '@/validators/auth'\nimport Link from 'next/link'\n\nexport default function RegisterPage() {\n\tconst [state, action] = useForm(register, registerSchema)\n\tconst [, githubAction] = useForm(oauth.bind(null, 'github'))\n\tconst [, googleAction] = useForm(oauth.bind(null, 'google'))\n\n\treturn (\n\t\t<AuthLayout title='Create an account' desc='Enter your details to create your account'>\n\t\t\t<CardContent>\n\t\t\t\t<form action={action} className='grid gap-6'>\n\t\t\t\t\t<div className='grid grid-cols-2 gap-2'>\n\t\t\t\t\t\t<FormInput label='First name' name='firstName' placeholder='Max' state={state} />\n\t\t\t\t\t\t<FormInput label='Last name' name='lastName' placeholder='Robinson' state={state} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<FormInput label='Email' name='email' placeholder='m@example.com' state={state} />\n\t\t\t\t\t<FormInput label='Password' name='password' type='password' clearOnError state={state} />\n\t\t\t\t\t<FormInput label='Confirm password' name='confirmPassword' type='password' state={state} />\n\n\t\t\t\t\t<FormCheckbox\n\t\t\t\t\t\tclassName='text-nowrap'\n\t\t\t\t\t\tlabel={\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\tI agree to the {/* BUG: Missing ToS */}\n\t\t\t\t\t\t\t\t<Link href='/terms' className='text-primary underline'>\n\t\t\t\t\t\t\t\t\tTerms of Service\n\t\t\t\t\t\t\t\t</Link>{' '}\n\t\t\t\t\t\t\t\tand\n\t\t\t\t\t\t\t\t<Link href='/privacy' className='text-primary underline'>\n\t\t\t\t\t\t\t\t\t{/* BUG: Missing Privacy Policy */}\n\t\t\t\t\t\t\t\t\tPrivacy Policy\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tname='terms'\n\t\t\t\t\t\tstate={state}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<ActionButton>Create account</ActionButton>\n\n\t\t\t\t\t<div className='relative'>\n\t\t\t\t\t\t<div className='absolute inset-0 flex items-center'>\n\t\t\t\t\t\t\t<span className='w-full border-t' />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='relative flex justify-center text-xs uppercase'>\n\t\t\t\t\t\t\t<span className='bg-background px-2 text-muted-foreground'>Or</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className='grid gap-2'>\n\t\t\t\t\t\t<ActionButton formAction={githubAction} variant='outline'>\n\t\t\t\t\t\t\tSign in with GitHub\n\t\t\t\t\t\t</ActionButton>\n\t\t\t\t\t\t<ActionButton formAction={googleAction} variant='outline'>\n\t\t\t\t\t\t\tSign in with Google\n\t\t\t\t\t\t</ActionButton>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<p className='text-center text-sm text-muted-foreground'>\n\t\t\t\t\t\tAlready have an account?{' '}\n\t\t\t\t\t\t<Link className='text-primary underline' href='/login'>\n\t\t\t\t\t\t\tSign in\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</p>\n\t\t\t\t</form>\n\t\t\t</CardContent>\n\t\t</AuthLayout>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/(auth)/register/page.tsx"
		},
		{
			"path": "./app/(protected)/client.tsx",
			"content": "'use client'\n\nimport { buttonVariants } from '@/components/ui/button'\nimport Link from 'next/link'\nimport { usePathname } from 'next/navigation'\n\nconst links = [\n\t{ href: '/dashboard', label: 'Dashboard' },\n\t{ href: '/plans', label: 'Plans' },\n\t{ href: '/settings', label: 'Settings' },\n]\n\nexport function NavButtons() {\n\tconst pathname = usePathname()\n\n\treturn (\n\t\t<div className='flex gap-1'>\n\t\t\t{links.map((link) => (\n\t\t\t\t<Link\n\t\t\t\t\tkey={link.href}\n\t\t\t\t\tclassName={buttonVariants({ variant: pathname.startsWith(link.href) ? 'secondary' : 'link' })}\n\t\t\t\t\thref={link.href}>\n\t\t\t\t\t{link.label}\n\t\t\t\t</Link>\n\t\t\t))}\n\t\t</div>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/(protected)/client.tsx"
		},
		{
			"path": "./app/(protected)/dashboard/page.tsx",
			"content": "import { Card } from '@/components/ui/card'\n\nexport default function DashboardPage() {\n\treturn (\n\t\t<div className='grid gap-4 lg:grid-cols-3'>\n\t\t\t<div className='h-fit grid gap-4 lg:col-span-2'>\n\t\t\t\t<Card className='h-[400px] border-0 border-t shadow-none rounded-none sm:rounded-xl sm:border-2 sm:border-dashed sm:shadow-sm' />\n\t\t\t\t<Card className='h-[200px] border-0 border-t shadow-none rounded-none sm:rounded-xl sm:border-2 sm:border-dashed sm:shadow-sm' />\n\t\t\t</div>\n\t\t\t<div className='h-fit grid gap-4'>\n\t\t\t\t<Card className='h-[200px] border-0 border-t shadow-none rounded-none sm:rounded-xl sm:border-2 sm:border-dashed sm:shadow-sm' />\n\t\t\t\t<Card className='h-[300px] border-0 border-t shadow-none rounded-none sm:rounded-xl sm:border-2 sm:border-dashed sm:shadow-sm' />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/(protected)/dashboard/page.tsx"
		},
		{
			"path": "./app/(protected)/layout.tsx",
			"content": "import { logout } from '@/actions/auth'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport { Button } from '@/components/ui/base/c-button'\nimport { LayoutProps } from '@/components/ui/base/utils'\nimport {\n\tDropdownMenu,\n\tDropdownMenuContent,\n\tDropdownMenuGroup,\n\tDropdownMenuItem,\n\tDropdownMenuLabel,\n\tDropdownMenuSeparator,\n\tDropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { auth } from '@/lib/auth'\nimport Link from 'next/link'\nimport { NavButtons } from './client'\n\nexport default async function Layout({ children }: LayoutProps) {\n\tconst user = await auth()\n\n\treturn (\n\t\t<div>\n\t\t\t<nav className='h-16 px-4 border-b'>\n\t\t\t\t<div className='w-full h-full max-w-screen-lg mx-auto flex items-center justify-between'>\n\t\t\t\t\t<NavButtons />\n\t\t\t\t\t<DropdownMenu>\n\t\t\t\t\t\t<DropdownMenuTrigger asChild>\n\t\t\t\t\t\t\t<Button variant='ghost' className='relative size-10 rounded-full'>\n\t\t\t\t\t\t\t\t<Avatar className='size-10'>\n\t\t\t\t\t\t\t\t\t<AvatarImage src={user.image ?? ''} alt={user.name ?? user.email} />\n\t\t\t\t\t\t\t\t\t<AvatarFallback>{user.name?.slice(0, 2)}</AvatarFallback>\n\t\t\t\t\t\t\t\t</Avatar>\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</DropdownMenuTrigger>\n\t\t\t\t\t\t<DropdownMenuContent className='w-56' align='end' forceMount>\n\t\t\t\t\t\t\t<DropdownMenuLabel className='font-normal'>\n\t\t\t\t\t\t\t\t<div className='flex flex-col space-y-1'>\n\t\t\t\t\t\t\t\t\t<p className='text-sm font-medium leading-none'>{user.name}</p>\n\t\t\t\t\t\t\t\t\t<p className='text-xs leading-none text-muted-foreground'>{user.email}</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</DropdownMenuLabel>\n\t\t\t\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t\t\t\t<DropdownMenuGroup>\n\t\t\t\t\t\t\t\t<Link href='/settings'>\n\t\t\t\t\t\t\t\t\t<DropdownMenuItem>Settings</DropdownMenuItem>\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</DropdownMenuGroup>\n\t\t\t\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t\t\t\t<form action={logout}>\n\t\t\t\t\t\t\t\t<DropdownMenuItem asChild>\n\t\t\t\t\t\t\t\t\t<button className='w-full' type='submit'>\n\t\t\t\t\t\t\t\t\t\tLog out\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t</DropdownMenuContent>\n\t\t\t\t\t</DropdownMenu>\n\t\t\t\t</div>\n\t\t\t</nav>\n\t\t\t<div className='w-full max-w-screen-lg mx-auto mt-4 sm:px-4'>{children}</div>\n\t\t</div>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/(protected)/layout.tsx"
		},
		{
			"path": "./app/(protected)/plans/client.tsx",
			"content": "'use client'\n\nimport { checkoutWithStripe, createStripePortal } from '@/actions/stripe'\nimport { ActionButton } from '@/components/ui/base/action-button'\nimport { env } from '@/lib/env'\nimport { getErrorRedirect } from '@/lib/utils'\nimport { Price } from '@prisma/client'\nimport { loadStripe } from '@stripe/stripe-js'\nimport { usePathname, useRouter } from 'next/navigation'\nimport { FormEvent, useState } from 'react'\n\nexport function SubscribeButton({ price }: { price: Price }) {\n\tconst pathname = usePathname()\n\tconst router = useRouter()\n\tconst [isLoading, setIsLoading] = useState(false)\n\n\tconst handleStripeCheckout = async (event: FormEvent<HTMLFormElement>) => {\n\t\tevent.preventDefault()\n\t\tsetIsLoading(true)\n\n\t\tconst { errorRedirect, sessionId } = await checkoutWithStripe(price)\n\n\t\tif (errorRedirect) {\n\t\t\tsetIsLoading(false)\n\t\t\treturn router.push(errorRedirect)\n\t\t}\n\n\t\tif (!sessionId) {\n\t\t\tsetIsLoading(false)\n\t\t\treturn router.push(getErrorRedirect(pathname, 'An unknown error occurred.'))\n\t\t}\n\n\t\tconst stripe = await loadStripe(env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY)\n\t\tstripe?.redirectToCheckout({ sessionId })\n\n\t\tsetIsLoading(false)\n\t}\n\n\treturn (\n\t\t<form onSubmit={handleStripeCheckout}>\n\t\t\t<ActionButton loading={isLoading} size='sm'>\n\t\t\t\tSubscribe for {price.unit_amount ? `$${(Number(price.unit_amount) / 100).toFixed(2)}` : 'N/A'}\n\t\t\t</ActionButton>\n\t\t</form>\n\t)\n}\n\nexport function ManageSubscriptionButton() {\n\tconst pathname = usePathname()\n\tconst router = useRouter()\n\tconst [isLoading, setIsLoading] = useState(false)\n\n\tconst handleStripePortalRequest = async (event: FormEvent<HTMLFormElement>) => {\n\t\tevent.preventDefault()\n\t\tsetIsLoading(true)\n\t\tconst redirectUrl = await createStripePortal(pathname)\n\t\tsetIsLoading(false)\n\n\t\treturn router.push(redirectUrl)\n\t}\n\n\treturn (\n\t\t<form onSubmit={handleStripePortalRequest}>\n\t\t\t<ActionButton loading={isLoading} variant='outline'>\n\t\t\t\tManage subscription\n\t\t\t</ActionButton>\n\t\t</form>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/(protected)/plans/client.tsx"
		},
		{
			"path": "./app/(protected)/plans/page.tsx",
			"content": "import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'\nimport { auth } from '@/lib/auth'\nimport prisma from '@/lib/db'\nimport * as _ from 'lodash'\nimport { Check } from 'lucide-react'\nimport { ManageSubscriptionButton, SubscribeButton } from './client'\n\ntype ProductMetadata = {\n\tindex: number\n}\n\nexport default async function PlansPage() {\n\tconst user = await auth()\n\tconst products = await prisma.product.findMany({ where: { active: true }, include: { prices: { where: { active: true } } } })\n\n\treturn user.subscriptions.length > 0 ? (\n\t\t<Card className='flex flex-col'>\n\t\t\t<CardHeader>\n\t\t\t\t<CardTitle className='text-2xl font-bold'>{user.subscriptions[0].price?.product?.name}</CardTitle>\n\t\t\t\t<CardDescription className='text-base'>Current plan</CardDescription>\n\t\t\t</CardHeader>\n\t\t\t<CardFooter>\n\t\t\t\t<ManageSubscriptionButton />\n\t\t\t</CardFooter>\n\t\t</Card>\n\t) : (\n\t\t<div className='grid gap-4 sm:grid-cols-2'>\n\t\t\t{products\n\t\t\t\t.sort((a, b) => Number((a.metadata as ProductMetadata)?.index ?? 0) - Number((b.metadata as ProductMetadata)?.index ?? 0))\n\t\t\t\t.map((product) => (\n\t\t\t\t\t<Card key={product.id} className='flex flex-col'>\n\t\t\t\t\t\t<CardHeader>\n\t\t\t\t\t\t\t<CardTitle className='text-2xl font-bold'>{product.name}</CardTitle>\n\t\t\t\t\t\t\t<CardDescription className='text-base'>{product.description}</CardDescription>\n\t\t\t\t\t\t</CardHeader>\n\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t<div className='grid gap-2'>\n\t\t\t\t\t\t\t\t<h3 className='font-semibold text-lg'>Features</h3>\n\t\t\t\t\t\t\t\t<ul className='space-y-2'>\n\t\t\t\t\t\t\t\t\t{product.features.map((feature) => (\n\t\t\t\t\t\t\t\t\t\t<li key={feature} className='flex items-center gap-2'>\n\t\t\t\t\t\t\t\t\t\t\t<Check className='h-4 w-4 text-green-500' />\n\t\t\t\t\t\t\t\t\t\t\t<span>{feature}</span>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t<CardFooter className='border-t pt-6'>\n\t\t\t\t\t\t\t<div className='grid gap-2 w-full'>\n\t\t\t\t\t\t\t\t<h3 className='font-semibold text-lg'>Pricing</h3>\n\t\t\t\t\t\t\t\t<ul className='space-y-2'>\n\t\t\t\t\t\t\t\t\t{product.prices.map((price) => (\n\t\t\t\t\t\t\t\t\t\t<li key={price.id} className='flex items-center justify-between'>\n\t\t\t\t\t\t\t\t\t\t\t<span className='text-muted-foreground'>{_.capitalize(price.interval ?? '')}ly</span>\n\t\t\t\t\t\t\t\t\t\t\t<SubscribeButton price={price} />\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</CardFooter>\n\t\t\t\t\t</Card>\n\t\t\t\t))}\n\t\t</div>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/(protected)/plans/page.tsx"
		},
		{
			"path": "./app/(protected)/settings/client.tsx",
			"content": "'use client'\n\nimport { oauth } from '@/actions/auth'\nimport { updateAvatar, updateUser } from '@/actions/user'\nimport { ActionButton } from '@/components/ui/base/action-button'\nimport { Button } from '@/components/ui/base/c-button'\nimport { FormInput } from '@/components/ui/base/form-input'\nimport { themes } from '@/components/ui/base/themes'\nimport { useForm } from '@/components/ui/base/use-form'\nimport { AuthUser } from '@/lib/utils'\nimport { updateAvatarSchema, updateUserSchema } from '@/validators/user'\nimport { Upload } from 'lucide-react'\nimport { OAuthProviderId } from 'next-auth/providers'\nimport { useTheme } from 'next-themes'\nimport { useEffect, useRef } from 'react'\nimport { toast } from 'sonner'\n\nexport function SettingsForm({ user }: { user: AuthUser }) {\n\tconst [updateUserState, updateUserAction] = useForm(updateUser, updateUserSchema)\n\tconst [updateAvatarState, updateAvatarAction] = useForm(updateAvatar, updateAvatarSchema)\n\tconst ref = useRef<HTMLFormElement>(null)\n\n\tuseEffect(() => {\n\t\tif (!updateAvatarState?.fieldErrors.file) return\n\t\ttoast.error(updateAvatarState.fieldErrors.file)\n\t}, [updateAvatarState?.fieldErrors.file])\n\n\treturn (\n\t\t<div className='grid gap-6'>\n\t\t\t<div className='relative group size-fit'>\n\t\t\t\t{user.image ? (\n\t\t\t\t\t<img className='ring-2 ring-offset-2 ring-primary rounded-lg size-20' src={user.image} alt={user.name ?? user.email} />\n\t\t\t\t) : (\n\t\t\t\t\t<div className='ring-2 ring-offset-2 ring-primary rounded-lg size-20 flex items-center justify-center'>\n\t\t\t\t\t\t<Upload className='size-6 text-primary' />\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<form\n\t\t\t\t\taction={updateAvatarAction}\n\t\t\t\t\tclassName='invisible group-hover:visible absolute inset-0 flex items-center justify-center bg-background/50 rounded-lg'\n\t\t\t\t\tref={ref}>\n\t\t\t\t\t<Upload className='size-6 text-primary' />\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName='z-10 w-full h-full opacity-0 absolute inset-0'\n\t\t\t\t\t\tname='file'\n\t\t\t\t\t\ttype='file'\n\t\t\t\t\t\taccept='image/*'\n\t\t\t\t\t\tonChange={() => ref.current?.requestSubmit()}\n\t\t\t\t\t/>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t\t<form action={updateUserAction} className='grid gap-6'>\n\t\t\t\t<FormInput\n\t\t\t\t\tclassName='max-w-sm'\n\t\t\t\t\tlabel='Full name'\n\t\t\t\t\tname='name'\n\t\t\t\t\tplaceholder='Max Robinson'\n\t\t\t\t\tdefaultValue={user.name ?? ''}\n\t\t\t\t\tstate={updateUserState}\n\t\t\t\t/>\n\t\t\t\t<FormInput className='max-w-md' label='Email' defaultValue={user.email} disabled />\n\t\t\t\t<div className='grid gap-2 sm:grid-cols-2'>\n\t\t\t\t\t<FormInput label='Update password' name='password' type='password' state={updateUserState} />\n\t\t\t\t\t<FormInput label='Confirm password' name='confirmPassword' type='password' state={updateUserState} />\n\t\t\t\t</div>\n\n\t\t\t\t<div className='ml-auto flex gap-2'>\n\t\t\t\t\t<Button type='reset' variant='outline'>\n\t\t\t\t\t\tReset\n\t\t\t\t\t</Button>\n\t\t\t\t\t<ActionButton>Update</ActionButton>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</div>\n\t)\n}\n\nexport function LinkAccountButton({ provider }: { provider: OAuthProviderId }) {\n\tconst [, action] = useForm(oauth.bind(null, provider))\n\n\treturn (\n\t\t<ActionButton formAction={action} size='sm'>\n\t\t\tLink\n\t\t</ActionButton>\n\t)\n}\n\nexport function ThemeSwitcher() {\n\tconst { theme, setTheme } = useTheme()\n\n\treturn (\n\t\t<div className='flex flex-col divide-y'>\n\t\t\t{themes.map((t) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div key={t.value} className='py-2 flex items-center gap-3'>\n\t\t\t\t\t\t<div className='flex gap-0.5'>\n\t\t\t\t\t\t\t<ColorBox color={t.styles.primary} />\n\t\t\t\t\t\t\t<ColorBox color={t.styles.accent} />\n\t\t\t\t\t\t\t<ColorBox color={t.styles.secondary} />\n\t\t\t\t\t\t\t<ColorBox color={t.styles.border} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<span className='capitalize'>{t.label ?? 'default'}</span>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName='ml-auto'\n\t\t\t\t\t\t\tdisabled={theme === t.value}\n\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\tvariant='outline'\n\t\t\t\t\t\t\tonClick={() => setTheme(t.value)}>\n\t\t\t\t\t\t\t{theme === t.value ? 'Selected' : 'Switch'}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t})}\n\t\t</div>\n\t)\n}\n\nfunction ColorBox({ color }: { color: string }) {\n\treturn <div className='h-3 w-3 rounded-sm border border-muted' style={{ backgroundColor: color }} />\n}\n",
			"type": "registry:example",
			"target": "./app/(protected)/settings/client.tsx"
		},
		{
			"path": "./app/(protected)/settings/page.tsx",
			"content": "import { unlinkAccount } from '@/actions/user'\nimport { Button } from '@/components/ui/base/c-button'\nimport { ConfirmDelete } from '@/components/ui/base/confirm'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { auth } from '@/lib/auth'\nimport prisma from '@/lib/db'\nimport { OAuthProviderId } from 'next-auth/providers'\nimport { LinkAccountButton, SettingsForm, ThemeSwitcher } from './client'\n\nexport default async function SettingsPage() {\n\tconst user = await auth()\n\tconst linkedAccounts = await prisma.account.findMany({ where: { userId: user.id } })\n\n\treturn (\n\t\t<div className='grid gap-4 lg:grid-cols-3'>\n\t\t\t<Card className='h-fit border-0 shadow-none sm:border sm:shadow-sm lg:col-span-2'>\n\t\t\t\t<CardHeader>\n\t\t\t\t\t<CardTitle>Update your account details</CardTitle>\n\t\t\t\t</CardHeader>\n\t\t\t\t<CardContent>\n\t\t\t\t\t<SettingsForm user={user} />\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t\t<div className='h-fit grid gap-4'>\n\t\t\t\t<Card className='h-fit border-0 border-t shadow-none rounded-none sm:rounded-xl sm:border sm:shadow-sm'>\n\t\t\t\t\t<CardHeader>\n\t\t\t\t\t\t<CardTitle>Linked accounts</CardTitle>\n\t\t\t\t\t\t<CardDescription>Link your social media accounts</CardDescription>\n\t\t\t\t\t</CardHeader>\n\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t<form className='flex flex-col divide-y'>\n\t\t\t\t\t\t\t{['github', 'google'].map((provider) => {\n\t\t\t\t\t\t\t\tconst linkedAccount = linkedAccounts.find((account) => account.provider === provider)\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div key={provider} className='py-2 flex items-center justify-between'>\n\t\t\t\t\t\t\t\t\t\t<span className='capitalize'>{provider}</span>\n\t\t\t\t\t\t\t\t\t\t{linkedAccount ? (\n\t\t\t\t\t\t\t\t\t\t\t<ConfirmDelete action={unlinkAccount.bind(null, provider, linkedAccount.providerAccountId)}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button size='sm' variant='outline'>\n\t\t\t\t\t\t\t\t\t\t\t\t\tUnlink\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t</ConfirmDelete>\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<LinkAccountButton provider={provider as OAuthProviderId} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</CardContent>\n\t\t\t\t</Card>\n\t\t\t\t<Card className='h-fit border-0 border-t shadow-none rounded-none sm:rounded-xl sm:border sm:shadow-sm'>\n\t\t\t\t\t<CardHeader>\n\t\t\t\t\t\t<CardTitle>Theme</CardTitle>\n\t\t\t\t\t\t<CardDescription>Change the theme of the app</CardDescription>\n\t\t\t\t\t</CardHeader>\n\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t<ThemeSwitcher />\n\t\t\t\t\t</CardContent>\n\t\t\t\t</Card>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/(protected)/settings/page.tsx"
		},
		{
			"path": "./app/api/auth/[...nextauth]/route.ts",
			"content": "import { handlers } from '@/lib/auth'\nexport const { GET, POST } = handlers\n",
			"type": "registry:example",
			"target": "./app/api/auth/[...nextauth]/route.ts"
		},
		{
			"path": "./app/api/webhooks/stripe/route.ts",
			"content": "import { env } from '@/lib/env'\nimport {\n\tdeletePriceRecord,\n\tdeleteProductRecord,\n\tmanageSubscriptionStatusChange,\n\tstripe,\n\tupsertPriceRecord,\n\tupsertProductRecord,\n} from '@/lib/stripe'\nimport Stripe from 'stripe'\n\nconst relevantEvents = new Set([\n\t'product.created',\n\t'product.updated',\n\t'product.deleted',\n\t'price.created',\n\t'price.updated',\n\t'price.deleted',\n\t'checkout.session.completed',\n\t'customer.subscription.created',\n\t'customer.subscription.updated',\n\t'customer.subscription.deleted',\n])\n\nexport async function POST(req: Request) {\n\tconst body = await req.text()\n\tconst sig = req.headers.get('stripe-signature') as string\n\tconst webhookSecret = env.STRIPE_WEBHOOK_SECRET\n\tlet event: Stripe.Event\n\n\ttry {\n\t\tif (!sig || !webhookSecret) return new Response('Webhook secret not found.', { status: 400 })\n\t\tevent = stripe.webhooks.constructEvent(body, sig, webhookSecret)\n\t\tconsole.log(`🔔  Webhook received: ${event.type}`)\n\t} catch (err: unknown) {\n\t\tconst error = err as Error\n\t\tconsole.log(`❌ Error message: ${error.message}`)\n\t\treturn new Response(`Webhook Error: ${error.message}`, { status: 400 })\n\t}\n\n\tif (relevantEvents.has(event.type)) {\n\t\ttry {\n\t\t\tswitch (event.type) {\n\t\t\t\tcase 'product.created':\n\t\t\t\tcase 'product.updated':\n\t\t\t\t\tawait upsertProductRecord(event.data.object as Stripe.Product)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'price.created':\n\t\t\t\tcase 'price.updated':\n\t\t\t\t\tawait upsertPriceRecord(event.data.object as Stripe.Price)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'price.deleted':\n\t\t\t\t\tawait deletePriceRecord(event.data.object as Stripe.Price)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'product.deleted':\n\t\t\t\t\tawait deleteProductRecord(event.data.object as Stripe.Product)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'customer.subscription.created':\n\t\t\t\tcase 'customer.subscription.updated':\n\t\t\t\tcase 'customer.subscription.deleted':\n\t\t\t\t\tconst subscription = event.data.object as Stripe.Subscription\n\t\t\t\t\tawait manageSubscriptionStatusChange(\n\t\t\t\t\t\tsubscription.id,\n\t\t\t\t\t\tsubscription.customer as string,\n\t\t\t\t\t\tevent.type === 'customer.subscription.created'\n\t\t\t\t\t)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'checkout.session.completed':\n\t\t\t\t\tconst checkoutSession = event.data.object as Stripe.Checkout.Session\n\t\t\t\t\tconst subscriptionId = checkoutSession.subscription\n\t\t\t\t\tawait manageSubscriptionStatusChange(subscriptionId as string, checkoutSession.customer as string, true)\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Unhandled relevant event!')\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t\treturn new Response('Webhook handler failed. View your Next.js function logs.', {\n\t\t\t\tstatus: 400,\n\t\t\t})\n\t\t}\n\t} else {\n\t\treturn new Response(`Unsupported event type: ${event.type}`, {\n\t\t\tstatus: 400,\n\t\t})\n\t}\n\treturn new Response(JSON.stringify({ received: true }))\n}\n",
			"type": "registry:example",
			"target": "./app/api/webhooks/stripe/route.ts"
		},
		{
			"path": "./app/globals.css",
			"content": "@import 'tailwindcss';\n@import 'tw-animate-css';\n\n@custom-variant dark (&:is(.dark *));\n\n@theme inline {\n\t--color-background: var(--background);\n\t--color-foreground: var(--foreground);\n\t--font-sans: var(--font-sans);\n\t--font-mono: var(--font-mono);\n\t--font-serif: var(--font-serif);\n\t--color-sidebar-ring: var(--sidebar-ring);\n\t--color-sidebar-border: var(--sidebar-border);\n\t--color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n\t--color-sidebar-accent: var(--sidebar-accent);\n\t--color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n\t--color-sidebar-primary: var(--sidebar-primary);\n\t--color-sidebar-foreground: var(--sidebar-foreground);\n\t--color-sidebar: var(--sidebar);\n\t--color-chart-5: var(--chart-5);\n\t--color-chart-4: var(--chart-4);\n\t--color-chart-3: var(--chart-3);\n\t--color-chart-2: var(--chart-2);\n\t--color-chart-1: var(--chart-1);\n\t--color-ring: var(--ring);\n\t--color-input: var(--input);\n\t--color-border: var(--border);\n\t--color-destructive: var(--destructive);\n\t--color-accent-foreground: var(--accent-foreground);\n\t--color-accent: var(--accent);\n\t--color-muted-foreground: var(--muted-foreground);\n\t--color-muted: var(--muted);\n\t--color-secondary-foreground: var(--secondary-foreground);\n\t--color-secondary: var(--secondary);\n\t--color-primary-foreground: var(--primary-foreground);\n\t--color-primary: var(--primary);\n\t--color-popover-foreground: var(--popover-foreground);\n\t--color-popover: var(--popover);\n\t--color-card-foreground: var(--card-foreground);\n\t--color-card: var(--card);\n\t--radius: 0.625rem;\n\t--radius-sm: calc(var(--radius) - 4px);\n\t--radius-md: calc(var(--radius) - 2px);\n\t--radius-lg: var(--radius);\n\t--radius-xl: calc(var(--radius) + 4px);\n}\n\n[data-theme='light'] {\n\t--background: oklch(1 0 0);\n\t--foreground: oklch(0.145 0 0);\n\t--card: oklch(1 0 0);\n\t--card-foreground: oklch(0.145 0 0);\n\t--popover: oklch(1 0 0);\n\t--popover-foreground: oklch(0.145 0 0);\n\t--primary: oklch(0.205 0 0);\n\t--primary-foreground: oklch(0.985 0 0);\n\t--secondary: oklch(0.97 0 0);\n\t--secondary-foreground: oklch(0.205 0 0);\n\t--muted: oklch(0.97 0 0);\n\t--muted-foreground: oklch(0.556 0 0);\n\t--accent: oklch(0.97 0 0);\n\t--accent-foreground: oklch(0.205 0 0);\n\t--destructive: oklch(0.577 0.245 27.325);\n\t--border: oklch(0.922 0 0);\n\t--input: oklch(0.922 0 0);\n\t--ring: oklch(0.708 0 0);\n\t--chart-1: oklch(0.646 0.222 41.116);\n\t--chart-2: oklch(0.6 0.118 184.704);\n\t--chart-3: oklch(0.398 0.07 227.392);\n\t--chart-4: oklch(0.828 0.189 84.429);\n\t--chart-5: oklch(0.769 0.188 70.08);\n\t--sidebar: oklch(0.985 0 0);\n\t--sidebar-foreground: oklch(0.145 0 0);\n\t--sidebar-primary: oklch(0.205 0 0);\n\t--sidebar-primary-foreground: oklch(0.985 0 0);\n\t--sidebar-accent: oklch(0.97 0 0);\n\t--sidebar-accent-foreground: oklch(0.205 0 0);\n\t--sidebar-border: oklch(0.922 0 0);\n\t--sidebar-ring: oklch(0.708 0 0);\n}\n\n[data-theme='dark'] {\n\t--background: oklch(0.145 0 0);\n\t--foreground: oklch(0.985 0 0);\n\t--card: oklch(0.205 0 0);\n\t--card-foreground: oklch(0.985 0 0);\n\t--popover: oklch(0.205 0 0);\n\t--popover-foreground: oklch(0.985 0 0);\n\t--primary: oklch(0.922 0 0);\n\t--primary-foreground: oklch(0.205 0 0);\n\t--secondary: oklch(0.269 0 0);\n\t--secondary-foreground: oklch(0.985 0 0);\n\t--muted: oklch(0.269 0 0);\n\t--muted-foreground: oklch(0.708 0 0);\n\t--accent: oklch(0.269 0 0);\n\t--accent-foreground: oklch(0.985 0 0);\n\t--destructive: oklch(0.704 0.191 22.216);\n\t--border: oklch(1 0 0 / 10%);\n\t--input: oklch(1 0 0 / 15%);\n\t--ring: oklch(0.556 0 0);\n\t--chart-1: oklch(0.488 0.243 264.376);\n\t--chart-2: oklch(0.696 0.17 162.48);\n\t--chart-3: oklch(0.769 0.188 70.08);\n\t--chart-4: oklch(0.627 0.265 303.9);\n\t--chart-5: oklch(0.645 0.246 16.439);\n\t--sidebar: oklch(0.205 0 0);\n\t--sidebar-foreground: oklch(0.985 0 0);\n\t--sidebar-primary: oklch(0.488 0.243 264.376);\n\t--sidebar-primary-foreground: oklch(0.985 0 0);\n\t--sidebar-accent: oklch(0.269 0 0);\n\t--sidebar-accent-foreground: oklch(0.985 0 0);\n\t--sidebar-border: oklch(1 0 0 / 10%);\n\t--sidebar-ring: oklch(0.556 0 0);\n}\n\n[data-theme='modern-minimal'] {\n\t--background: oklch(1 0 0);\n\t--foreground: oklch(0.32 0 0);\n\t--card: oklch(1 0 0);\n\t--card-foreground: oklch(0.32 0 0);\n\t--popover: oklch(1 0 0);\n\t--popover-foreground: oklch(0.32 0 0);\n\t--primary: oklch(0.62 0.19 259.81);\n\t--primary-foreground: oklch(1 0 0);\n\t--secondary: oklch(0.97 0 264.54);\n\t--secondary-foreground: oklch(0.45 0.03 256.8);\n\t--muted: oklch(0.98 0 247.84);\n\t--muted-foreground: oklch(0.55 0.02 264.36);\n\t--accent: oklch(0.95 0.03 236.82);\n\t--accent-foreground: oklch(0.38 0.14 265.52);\n\t--destructive: oklch(0.64 0.21 25.33);\n\t--destructive-foreground: oklch(1 0 0);\n\t--border: oklch(0.93 0.01 264.53);\n\t--input: oklch(0.93 0.01 264.53);\n\t--ring: oklch(0.62 0.19 259.81);\n\t--chart-1: oklch(0.62 0.19 259.81);\n\t--chart-2: oklch(0.55 0.22 262.88);\n\t--chart-3: oklch(0.49 0.22 264.38);\n\t--chart-4: oklch(0.42 0.18 265.64);\n\t--chart-5: oklch(0.38 0.14 265.52);\n\t--sidebar: oklch(0.98 0 247.84);\n\t--sidebar-foreground: oklch(0.32 0 0);\n\t--sidebar-primary: oklch(0.62 0.19 259.81);\n\t--sidebar-primary-foreground: oklch(1 0 0);\n\t--sidebar-accent: oklch(0.95 0.03 236.82);\n\t--sidebar-accent-foreground: oklch(0.38 0.14 265.52);\n\t--sidebar-border: oklch(0.93 0.01 264.53);\n\t--sidebar-ring: oklch(0.62 0.19 259.81);\n\t--font-sans: Inter, sans-serif;\n\t--font-serif: Source Serif 4, serif;\n\t--font-mono: JetBrains Mono, monospace;\n\t--shadow-2xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);\n\t--shadow-xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);\n\t--shadow-sm: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);\n\t--shadow: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);\n\t--shadow-md: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 2px 4px -1px hsl(0 0% 0% / 0.1);\n\t--shadow-lg: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 4px 6px -1px hsl(0 0% 0% / 0.1);\n\t--shadow-xl: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 8px 10px -1px hsl(0 0% 0% / 0.1);\n\t--shadow-2xl: 0 1px 3px 0px hsl(0 0% 0% / 0.25);\n}\n\n[data-theme='kodama-grove'] {\n\t--background: oklch(0.88 0.05 91.79);\n\t--foreground: oklch(0.43 0.03 59.22);\n\t--card: oklch(0.89 0.04 87.57);\n\t--card-foreground: oklch(0.43 0.03 59.22);\n\t--popover: oklch(0.94 0.03 89.85);\n\t--popover-foreground: oklch(0.43 0.03 59.22);\n\t--primary: oklch(0.67 0.11 118.91);\n\t--primary-foreground: oklch(0.99 0.01 88.64);\n\t--secondary: oklch(0.85 0.06 91.15);\n\t--secondary-foreground: oklch(0.43 0.03 59.22);\n\t--muted: oklch(0.85 0.06 91.15);\n\t--muted-foreground: oklch(0.58 0.03 60.93);\n\t--accent: oklch(0.84 0.07 90.33);\n\t--accent-foreground: oklch(0.43 0.03 59.22);\n\t--destructive: oklch(0.71 0.1 29.98);\n\t--destructive-foreground: oklch(0.98 0.01 91.48);\n\t--border: oklch(0.69 0.04 59.84);\n\t--input: oklch(0.84 0.07 90.33);\n\t--ring: oklch(0.73 0.06 130.85);\n\t--chart-1: oklch(0.73 0.06 130.85);\n\t--chart-2: oklch(0.68 0.06 132.45);\n\t--chart-3: oklch(0.82 0.03 136.65);\n\t--chart-4: oklch(0.59 0.05 137.62);\n\t--chart-5: oklch(0.52 0.04 137.19);\n\t--sidebar: oklch(0.86 0.06 90.52);\n\t--sidebar-foreground: oklch(0.43 0.03 59.22);\n\t--sidebar-primary: oklch(0.73 0.06 130.85);\n\t--sidebar-primary-foreground: oklch(0.99 0.01 88.64);\n\t--sidebar-accent: oklch(0.92 0.02 88);\n\t--sidebar-accent-foreground: oklch(0.43 0.03 59.22);\n\t--sidebar-border: oklch(0.91 0.02 88);\n\t--sidebar-ring: oklch(0.73 0.06 130.85);\n\t--font-sans: Merriweather, serif;\n\t--font-serif: Source Serif 4, serif;\n\t--font-mono: JetBrains Mono, monospace;\n\t--radius: 0.425rem;\n\t--shadow-2xs: 3px 3px 2px 0px hsl(88 22% 35% / 0.07);\n\t--shadow-xs: 3px 3px 2px 0px hsl(88 22% 35% / 0.07);\n\t--shadow-sm: 3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 1px 2px -1px hsl(88 22% 35% / 0.15);\n\t--shadow: 3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 1px 2px -1px hsl(88 22% 35% / 0.15);\n\t--shadow-md: 3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 2px 4px -1px hsl(88 22% 35% / 0.15);\n\t--shadow-lg: 3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 4px 6px -1px hsl(88 22% 35% / 0.15);\n\t--shadow-xl: 3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 8px 10px -1px hsl(88 22% 35% / 0.15);\n\t--shadow-2xl: 3px 3px 2px 0px hsl(88 22% 35% / 0.38);\n}\n\n[data-theme='neo-brutalism'] {\n\t--background: oklch(1 0 0);\n\t--foreground: oklch(0 0 0);\n\t--card: oklch(1 0 0);\n\t--card-foreground: oklch(0 0 0);\n\t--popover: oklch(1 0 0);\n\t--popover-foreground: oklch(0 0 0);\n\t--primary: oklch(0.65 0.24 26.97);\n\t--primary-foreground: oklch(1 0 0);\n\t--secondary: oklch(0.97 0.21 109.77);\n\t--secondary-foreground: oklch(0 0 0);\n\t--muted: oklch(0.96 0 0);\n\t--muted-foreground: oklch(0.32 0 0);\n\t--accent: oklch(0.56 0.24 260.82);\n\t--accent-foreground: oklch(1 0 0);\n\t--destructive: oklch(0 0 0);\n\t--destructive-foreground: oklch(1 0 0);\n\t--border: oklch(0 0 0);\n\t--input: oklch(0 0 0);\n\t--ring: oklch(0.65 0.24 26.97);\n\t--chart-1: oklch(0.65 0.24 26.97);\n\t--chart-2: oklch(0.97 0.21 109.77);\n\t--chart-3: oklch(0.56 0.24 260.82);\n\t--chart-4: oklch(0.73 0.25 142.5);\n\t--chart-5: oklch(0.59 0.27 328.36);\n\t--sidebar: oklch(0.96 0 0);\n\t--sidebar-foreground: oklch(0 0 0);\n\t--sidebar-primary: oklch(0.65 0.24 26.97);\n\t--sidebar-primary-foreground: oklch(1 0 0);\n\t--sidebar-accent: oklch(0.56 0.24 260.82);\n\t--sidebar-accent-foreground: oklch(1 0 0);\n\t--sidebar-border: oklch(0 0 0);\n\t--sidebar-ring: oklch(0.65 0.24 26.97);\n\t--font-sans: DM Sans, sans-serif;\n\t--font-serif: ui-serif, Georgia, Cambria, 'Times New Roman', Times, serif;\n\t--font-mono: Space Mono, monospace;\n\t--radius: 0px;\n\t--shadow-2xs: 4px 4px 0px 0px hsl(0 0% 0% / 0.5);\n\t--shadow-xs: 4px 4px 0px 0px hsl(0 0% 0% / 0.5);\n\t--shadow-sm: 4px 4px 0px 0px hsl(0 0% 0% / 1), 4px 1px 2px -1px hsl(0 0% 0% / 1);\n\t--shadow: 4px 4px 0px 0px hsl(0 0% 0% / 1), 4px 1px 2px -1px hsl(0 0% 0% / 1);\n\t--shadow-md: 4px 4px 0px 0px hsl(0 0% 0% / 1), 4px 2px 4px -1px hsl(0 0% 0% / 1);\n\t--shadow-lg: 4px 4px 0px 0px hsl(0 0% 0% / 1), 4px 4px 6px -1px hsl(0 0% 0% / 1);\n\t--shadow-xl: 4px 4px 0px 0px hsl(0 0% 0% / 1), 4px 8px 10px -1px hsl(0 0% 0% / 1);\n\t--shadow-2xl: 4px 4px 0px 0px hsl(0 0% 0% / 2.5);\n}\n\n[data-theme='vintage-paper'] {\n\t--background: oklch(0.96 0.02 90.24);\n\t--foreground: oklch(0.38 0.02 64.34);\n\t--card: oklch(0.99 0.01 87.47);\n\t--card-foreground: oklch(0.38 0.02 64.34);\n\t--popover: oklch(0.99 0.01 87.47);\n\t--popover-foreground: oklch(0.38 0.02 64.34);\n\t--primary: oklch(0.62 0.08 65.54);\n\t--primary-foreground: oklch(1 0 0);\n\t--secondary: oklch(0.88 0.03 85.57);\n\t--secondary-foreground: oklch(0.43 0.03 64.93);\n\t--muted: oklch(0.92 0.02 83.06);\n\t--muted-foreground: oklch(0.54 0.04 71.17);\n\t--accent: oklch(0.83 0.04 88.81);\n\t--accent-foreground: oklch(0.38 0.02 64.34);\n\t--destructive: oklch(0.55 0.14 32.91);\n\t--destructive-foreground: oklch(1 0 0);\n\t--border: oklch(0.86 0.03 84.59);\n\t--input: oklch(0.86 0.03 84.59);\n\t--ring: oklch(0.62 0.08 65.54);\n\t--chart-1: oklch(0.62 0.08 65.54);\n\t--chart-2: oklch(0.56 0.06 68.58);\n\t--chart-3: oklch(0.49 0.06 72.68);\n\t--chart-4: oklch(0.68 0.06 64.78);\n\t--chart-5: oklch(0.73 0.06 66.7);\n\t--sidebar: oklch(0.92 0.02 83.06);\n\t--sidebar-foreground: oklch(0.38 0.02 64.34);\n\t--sidebar-primary: oklch(0.62 0.08 65.54);\n\t--sidebar-primary-foreground: oklch(1 0 0);\n\t--sidebar-accent: oklch(0.83 0.04 88.81);\n\t--sidebar-accent-foreground: oklch(0.38 0.02 64.34);\n\t--sidebar-border: oklch(0.86 0.03 84.59);\n\t--sidebar-ring: oklch(0.62 0.08 65.54);\n\t--font-sans: Libre Baskerville, serif;\n\t--font-serif: Lora, serif;\n\t--font-mono: IBM Plex Mono, monospace;\n\t--radius: 0.25rem;\n\t--shadow-2xs: 2px 3px 5px 0px hsl(28 13% 20% / 0.06);\n\t--shadow-xs: 2px 3px 5px 0px hsl(28 13% 20% / 0.06);\n\t--shadow-sm: 2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 1px 2px -1px hsl(28 13% 20% / 0.12);\n\t--shadow: 2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 1px 2px -1px hsl(28 13% 20% / 0.12);\n\t--shadow-md: 2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 2px 4px -1px hsl(28 13% 20% / 0.12);\n\t--shadow-lg: 2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 4px 6px -1px hsl(28 13% 20% / 0.12);\n\t--shadow-xl: 2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 8px 10px -1px hsl(28 13% 20% / 0.12);\n\t--shadow-2xl: 2px 3px 5px 0px hsl(28 13% 20% / 0.3);\n}\n\n@layer base {\n\t* {\n\t\t@apply border-border outline-ring/50;\n\t}\n\tbody {\n\t\t@apply bg-background text-foreground;\n\t}\n}\n",
			"type": "registry:example",
			"target": "./app/globals.css"
		},
		{
			"path": "./app/layout.tsx",
			"content": "import { GlobalToaster } from '@/components/ui/base/global-toaster'\nimport { ThemeProvider } from '@/components/ui/base/theme-provider'\nimport '@/lib/env'\nimport type { Metadata } from 'next'\nimport { Geist, Geist_Mono } from 'next/font/google'\nimport { Suspense } from 'react'\nimport './globals.css'\n\nconst geistSans = Geist({\n\tvariable: '--font-geist-sans',\n\tsubsets: ['latin'],\n})\n\nconst geistMono = Geist_Mono({\n\tvariable: '--font-geist-mono',\n\tsubsets: ['latin'],\n})\n\nexport const metadata: Metadata = {\n\ttitle: 'Create Next App',\n\tdescription: 'Generated by create next app',\n}\n\nexport default function RootLayout({\n\tchildren,\n}: Readonly<{\n\tchildren: React.ReactNode\n}>) {\n\treturn (\n\t\t<html lang='en' suppressHydrationWarning>\n\t\t\t<body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>\n\t\t\t\t<ThemeProvider defaultTheme='light' disableTransitionOnChange>\n\t\t\t\t\t{children}\n\t\t\t\t\t<Suspense>\n\t\t\t\t\t\t<GlobalToaster />\n\t\t\t\t\t</Suspense>\n\t\t\t\t</ThemeProvider>\n\t\t\t</body>\n\t\t</html>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/layout.tsx"
		},
		{
			"path": "./app/page.tsx",
			"content": "import { buttonVariants } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Brain, FileText, FolderOpen, LucideIcon, Search, Upload, Zap } from 'lucide-react'\nimport Link from 'next/link'\n\nconst appName = 'Knownst'\nconst appSlogan = \"Your Company's Knowledge Should Work For You\"\n\nconst appSlogan2 = 'Find Knowledge in Seconds Using AI'\nconst appSlogan2Desc = 'Upload your documents and let our AI help you find exactly what you need, when you need it.'\n\nconst appSlogan3 = 'Never Lose Track of Critical Information Again'\nconst appSlogan3Desc = 'Keep company information organized and accessible with our powerful indexing system.'\n\nconst mainFeatures: { icon: LucideIcon; title: string; desc: string }[] = [\n\t{ icon: Zap, title: 'AI-Powered Search', desc: 'Find documents instantly with intelligent search capabilities' },\n\t{ icon: FolderOpen, title: 'Organized Knowledge', desc: 'Keep company information organized and accessible' },\n\t{ icon: FileText, title: 'Boost Productivity', desc: 'Save time and eliminate file-hunting frustration' },\n]\n\nconst secondaryFeatures: { icon: LucideIcon; title: string; desc: string }[] = [\n\t{ icon: Upload, title: 'Upload & Index', desc: 'Securely store company documents in one place with our powerful indexing system.' },\n\t{ icon: Search, title: 'Instant Search', desc: 'Find what you need in seconds with our lightning-fast search capabilities.' },\n\t{ icon: Brain, title: 'AI-Powered Insights', desc: \"Get relevant results tailored to your company's specific needs.\" },\n]\n\nexport default function RootPage() {\n\treturn (\n\t\t<div className='min-h-screen bg-background'>\n\t\t\t{/* Navigation */}\n\t\t\t<nav className='fixed top-0 left-0 right-0 z-50 border-b border-border/40 bg-background/80 backdrop-blur-sm'>\n\t\t\t\t<div className='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8'>\n\t\t\t\t\t<div className='flex items-center justify-between h-16'>\n\t\t\t\t\t\t<div className='flex items-center'>\n\t\t\t\t\t\t\t<span className='text-xl font-bold text-primary'>{appName}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='flex items-center gap-4'>\n\t\t\t\t\t\t\t<Link className={buttonVariants({ variant: 'ghost' })} href='/login'>\n\t\t\t\t\t\t\t\tSign in\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t<Link className={buttonVariants()} href='/register'>\n\t\t\t\t\t\t\t\tGet started\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</nav>\n\n\t\t\t{/* Hero Section */}\n\t\t\t<section className='relative py-24 px-4 sm:px-6 lg:px-8 overflow-hidden'>\n\t\t\t\t<div className='absolute inset-0 bg-gradient-to-br from-primary/10 via-background to-primary/5' />\n\t\t\t\t<div className='absolute inset-0 bg-grid-pattern opacity-5' />\n\t\t\t\t<div className='relative max-w-7xl mx-auto'>\n\t\t\t\t\t<div className='grid grid-cols-1 lg:grid-cols-2 gap-16 items-start'>\n\t\t\t\t\t\t{/* Hero Content */}\n\t\t\t\t\t\t<div className='space-y-12'>\n\t\t\t\t\t\t\t<h1 className='text-4xl sm:text-5xl font-bold text-primary'>{appSlogan}</h1>\n\t\t\t\t\t\t\t<div className='space-y-8'>\n\t\t\t\t\t\t\t\t{mainFeatures.map((feature) => (\n\t\t\t\t\t\t\t\t\t<div key={feature.title} className='flex items-start gap-4'>\n\t\t\t\t\t\t\t\t\t\t<div className='shrink-0'>\n\t\t\t\t\t\t\t\t\t\t\t<feature.icon className='h-6 w-6 text-primary' />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<h3 className='text-lg font-medium'>{feature.title}</h3>\n\t\t\t\t\t\t\t\t\t\t\t<p className='text-muted-foreground'>{feature.desc}</p>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* Search Interface */}\n\t\t\t\t\t\t<div className='relative'>\n\t\t\t\t\t\t\t<div className='w-full h-[500px] relative rounded-lg bg-gradient-to-br from-primary/10 via-background to-primary/5 border border-primary/20 overflow-hidden'>\n\t\t\t\t\t\t\t\t{/* <Image\n\t\t\t\t\t\t\t\t\tsrc='https://sdmntprwestus.oaiusercontent.com/files/00000000-9a80-5230-bf2b-c4b248e4c36f/raw?se=2025-03-27T01%3A26%3A29Z&sp=r&sv=2024-08-04&sr=b&scid=63e047fb-6d6b-548d-87af-93168bb2770e&skoid=51916beb-8d6a-49b8-8b29-ca48ed86557e&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2025-03-26T20%3A49%3A35Z&ske=2025-03-27T20%3A49%3A35Z&sks=b&skv=2024-08-04&sig=%2B%2BbqX9d%2BPRdKCOulxZALgokgKch9LHO97m81CCx58qE%3D'\n\t\t\t\t\t\t\t\t\talt='Knownst AI Knowledge Assistant Interface'\n\t\t\t\t\t\t\t\t\tfill\n\t\t\t\t\t\t\t\t\tclassName='object-contain p-4'\n\t\t\t\t\t\t\t\t\tsizes='(max-width: 1024px) 100vw, 50vw'\n\t\t\t\t\t\t\t\t\tpriority\n\t\t\t\t\t\t\t\t/> */}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</section>\n\n\t\t\t{/* Features Section */}\n\t\t\t<section className='py-24 px-4 sm:px-6 lg:px-8 relative overflow-hidden bg-gradient-to-b from-background via-primary/5 to-background'>\n\t\t\t\t<div className='relative max-w-7xl mx-auto'>\n\t\t\t\t\t<div className='text-center mb-16'>\n\t\t\t\t\t\t<h2 className='text-3xl sm:text-4xl font-bold mb-6 bg-clip-text text-transparent bg-gradient-to-r from-primary to-primary/60'>\n\t\t\t\t\t\t\t{appSlogan2}\n\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t<p className='text-xl text-muted-foreground max-w-2xl mx-auto'>{appSlogan2Desc}</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='grid grid-cols-1 md:grid-cols-3 gap-8'>\n\t\t\t\t\t\t{secondaryFeatures.map((feature) => (\n\t\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\t\tkey={feature.title}\n\t\t\t\t\t\t\t\tclassName='border-primary/20 hover:border-primary/40 transition-all duration-300 hover:shadow-lg hover:shadow-primary/10 hover:-translate-y-1'>\n\t\t\t\t\t\t\t\t<CardHeader>\n\t\t\t\t\t\t\t\t\t<CardTitle className='flex items-center gap-2 text-primary'>\n\t\t\t\t\t\t\t\t\t\t<feature.icon className='h-5 w-5' />\n\t\t\t\t\t\t\t\t\t\t{feature.title}\n\t\t\t\t\t\t\t\t\t</CardTitle>\n\t\t\t\t\t\t\t\t</CardHeader>\n\t\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t\t<p className='text-muted-foreground'>{feature.desc}</p>\n\t\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</section>\n\n\t\t\t{/* Benefits Section */}\n\t\t\t<section className='py-24 px-4 sm:px-6 lg:px-8 relative overflow-hidden'>\n\t\t\t\t<div className='relative max-w-7xl mx-auto'>\n\t\t\t\t\t<div className='grid grid-cols-1 lg:grid-cols-2 gap-16 items-center'>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h2 className='text-3xl sm:text-4xl font-bold mb-8 bg-clip-text text-transparent bg-gradient-to-r from-primary to-primary/60'>\n\t\t\t\t\t\t\t\t{appSlogan}\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<ul className='space-y-6'>\n\t\t\t\t\t\t\t\t{mainFeatures.map((feature) => (\n\t\t\t\t\t\t\t\t\t<li key={feature.title} className='flex items-start gap-4 group'>\n\t\t\t\t\t\t\t\t\t\t<feature.icon className='h-6 w-6 text-primary mt-1 group-hover:scale-110 transition-transform duration-300' />\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<h3 className='font-semibold mb-1'>{feature.title}</h3>\n\t\t\t\t\t\t\t\t\t\t\t<p className='text-muted-foreground'>{feature.desc}</p>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='relative'>\n\t\t\t\t\t\t\t<div className='w-full h-[500px] relative rounded-lg bg-gradient-to-br from-primary/10 via-background to-primary/5 border border-primary/20 overflow-hidden'>\n\t\t\t\t\t\t\t\t{/* <Image\n\t\t\t\t\t\t\t\t\tsrc='https://sdmntprwestus.oaiusercontent.com/files/00000000-9a80-5230-bf2b-c4b248e4c36f/raw?se=2025-03-27T01%3A26%3A29Z&sp=r&sv=2024-08-04&sr=b&scid=63e047fb-6d6b-548d-87af-93168bb2770e&skoid=51916beb-8d6a-49b8-8b29-ca48ed86557e&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2025-03-26T20%3A49%3A35Z&ske=2025-03-27T20%3A49%3A35Z&sks=b&skv=2024-08-04&sig=%2B%2BbqX9d%2BPRdKCOulxZALgokgKch9LHO97m81CCx58qE%3D'\n\t\t\t\t\t\t\t\t\talt='Knownst AI Knowledge Assistant Interface'\n\t\t\t\t\t\t\t\t\tfill\n\t\t\t\t\t\t\t\t\tclassName='object-contain p-4'\n\t\t\t\t\t\t\t\t\tsizes='(max-width: 1024px) 100vw, 50vw'\n\t\t\t\t\t\t\t\t\tpriority\n\t\t\t\t\t\t\t\t/> */}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</section>\n\n\t\t\t{/* CTA Section */}\n\t\t\t<section className='py-24 px-4 sm:px-6 lg:px-8 relative overflow-hidden'>\n\t\t\t\t<div className='absolute inset-0 bg-gradient-to-r from-primary via-primary/90 to-primary' />\n\t\t\t\t<div className='absolute inset-0 bg-grid-pattern opacity-10' />\n\t\t\t\t<div className='relative max-w-4xl mx-auto text-center'>\n\t\t\t\t\t<h2 className='text-3xl sm:text-4xl font-bold mb-6 text-primary-foreground'>{appSlogan3}</h2>\n\t\t\t\t\t<p className='text-xl mb-12 max-w-2xl mx-auto text-primary-foreground/90'>{appSlogan3Desc}</p>\n\t\t\t\t\t<Link className={buttonVariants({ size: 'lg', variant: 'secondary' })} href='/register'>\n\t\t\t\t\t\tGet started now\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t</div>\n\t)\n}\n",
			"type": "registry:example",
			"target": "./app/page.tsx"
		},
		{
			"path": "./components/auth-layout.tsx",
			"content": "import { ChevronLeft } from 'lucide-react'\nimport Link from 'next/link'\nimport { ReactNode } from 'react'\nimport { buttonVariants } from './ui/button'\nimport { Card, CardDescription, CardHeader, CardTitle } from './ui/card'\n\nexport function AuthLayout({ children, title, desc }: { children: ReactNode; title: string; desc: string }) {\n\treturn (\n\t\t<div className='min-h-screen bg-background relative flex flex-col sm:flex-row sm:items-center sm:justify-center p-4 sm:p-8 gap-4 sm:gap-0'>\n\t\t\t<div className='sm:absolute top-4 left-4 sm:top-8 sm:left-8'>\n\t\t\t\t<Link className={buttonVariants({ variant: 'ghost' })} href='/'>\n\t\t\t\t\t<ChevronLeft />\n\t\t\t\t\tBack to Home\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t\t<div className='w-full sm:max-w-md'>\n\t\t\t\t<Card className='border-0 shadow-none sm:border sm:shadow-sm'>\n\t\t\t\t\t<CardHeader className='text-center'>\n\t\t\t\t\t\t<CardTitle className='text-2xl font-bold'>{title}</CardTitle>\n\t\t\t\t\t\t<CardDescription>{desc}</CardDescription>\n\t\t\t\t\t</CardHeader>\n\t\t\t\t\t{children}\n\t\t\t\t</Card>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n",
			"type": "registry:block"
		},
		{
			"path": "./docker-compose.yml",
			"content": "version: '3.9'\n\nservices:\n    db:\n        image: postgres\n        ports:\n            - '5432:5432'\n        restart: always\n        shm_size: 128mb\n        environment:\n            POSTGRES_USER: postgres\n            POSTGRES_PASSWORD: password\n            POSTGRES_DB: postgres\n",
			"type": "registry:example",
			"target": "~/docker-compose.yml"
		},
		{
			"path": "./example.env",
			"content": "# https://www.lastpass.com/features/password-generator\nAUTH_SECRET=\"\"\n\n# https://github.com/settings/developers\n# Callback URL: http://localhost:3000/api/auth/callback/github\nAUTH_GITHUB_ID=\"\"\nAUTH_GITHUB_SECRET=\"\"\n\n# https://console.cloud.google.com/welcome\n# Callback URL: http://localhost:3000/api/auth/callback/google\nAUTH_GOOGLE_ID=\"\"\nAUTH_GOOGLE_SECRET=\"\"\n\n# https://resend.com/api-keys\nAUTH_RESEND_KEY=\"\"\nAUTH_RESEND_EMAIL=\"noreply@example.com\"\n\n# https://console.aws.amazon.com/console\nAWS_ACCESS_KEY_ID=\"\"\nAWS_SECRET_ACCESS_KEY=\"\"\nAWS_REGION=\"us-east-1\"\nAWS_PUBLIC_BUCKET_NAME=\"public\"\n\nDATABASE_URL=\"postgresql://postgres:password@localhost:5432/postgres?schema=public\"\n\n# https://dashboard.stripe.com/test/dashboard\n# https://dashboard.stripe.com/test/settings/billing/portal\nSTRIPE_SECRET_KEY=\"sk_test_\"\nSTRIPE_WEBHOOK_SECRET=\"whsec_\"\n\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=\"pk_test_\"\nNEXT_PUBLIC_SITE_URL=\"http://localhost:3000\"\n",
			"type": "registry:example",
			"target": "~/example.env"
		},
		{
			"path": "./lib/auth.ts",
			"content": "import { loginSchema } from '@/validators/auth'\nimport { PrismaAdapter } from '@auth/prisma-adapter'\nimport bcrypt from 'bcryptjs'\nimport NextAuth, { NextAuthConfig } from 'next-auth'\nimport Credentials from 'next-auth/providers/credentials'\nimport Github from 'next-auth/providers/github'\nimport Google from 'next-auth/providers/google'\nimport Resend from 'next-auth/providers/resend'\nimport prisma from './db'\nimport { env } from './env'\nimport { AuthUser } from './utils'\n\nexport const authConfig = {\n\tadapter: PrismaAdapter(prisma),\n\tcallbacks: {\n\t\tauthorized: ({ auth, request: { nextUrl } }) => {\n\t\t\tconst unprotectedRoutes = ['/', '/login', '/register', '/forgot', '/privacy', '/terms']\n\n\t\t\tconst isAuthed = !!auth?.user\n\t\t\tconst isAuthRoute = unprotectedRoutes.includes(nextUrl.pathname)\n\n\t\t\tif (!isAuthRoute) {\n\t\t\t\tif (isAuthed) return true\n\t\t\t\treturn false\n\t\t\t} else if (isAuthed) return Response.redirect(new URL('/dashboard', nextUrl))\n\t\t\treturn true\n\t\t},\n\t},\n\tpages: { signIn: '/login' },\n\tproviders: [\n\t\tCredentials({\n\t\t\tcredentials: { email: {}, password: {} },\n\t\t\tauthorize: async (credentials) => {\n\t\t\t\tconst { email, password } = await loginSchema.parseAsync(credentials)\n\t\t\t\tconst user = await prisma.user.findUnique({ where: { email } })\n\n\t\t\t\tif (!user) throw new Error('User not found')\n\t\t\t\telse if (!user.passwordHash) throw new Error('User does not have a password')\n\t\t\t\telse if (!(await bcrypt.compare(password, user.passwordHash))) throw new Error('Password does not match')\n\n\t\t\t\treturn user\n\t\t\t},\n\t\t}),\n\t\tGithub({ allowDangerousEmailAccountLinking: true }),\n\t\tGoogle({ allowDangerousEmailAccountLinking: true }),\n\t\tResend({ from: env.AUTH_RESEND_EMAIL }),\n\t],\n\tsession: { strategy: 'jwt' },\n} satisfies NextAuthConfig\n\nexport const { handlers, auth: session, signIn, signOut } = NextAuth(authConfig)\n\nexport const auth = async (): Promise<AuthUser> => {\n\tconst session = await NextAuth(authConfig).auth()\n\tif (!session?.user) throw new Error('Not authenticated.')\n\n\tconst user = await prisma.user.findFirst({\n\t\twhere: { email: session.user.email ?? '' },\n\t\tinclude: {\n\t\t\tsubscriptions: {\n\t\t\t\twhere: { status: 'active', price: { active: true, product: { active: true } } },\n\t\t\t\tinclude: { price: { include: { product: true } } },\n\t\t\t},\n\t\t},\n\t})\n\tif (!user) throw new Error('User not found')\n\n\treturn user\n}\n",
			"type": "registry:lib"
		},
		{
			"path": "./lib/db.ts",
			"content": "import { PrismaClient } from '@prisma/client'\n\nconst prismaClientSingleton = () => {\n\treturn new PrismaClient()\n}\n\ndeclare const globalThis: {\n\tprismaGlobal: ReturnType<typeof prismaClientSingleton>\n} & typeof global\n\nconst prisma = globalThis.prismaGlobal ?? prismaClientSingleton()\n\nexport default prisma\n\nif (process.env.NODE_ENV !== 'production') globalThis.prismaGlobal = prisma\n",
			"type": "registry:lib"
		},
		{
			"path": "./lib/env.ts",
			"content": "import { createEnv } from '@t3-oss/env-nextjs'\nimport { z } from 'zod'\n\nexport const env = createEnv({\n\tserver: {\n\t\tAUTH_SECRET: z.string().min(1),\n\n\t\tAUTH_GITHUB_ID: z.string().min(1),\n\t\tAUTH_GITHUB_SECRET: z.string().min(1),\n\n\t\tAUTH_GOOGLE_ID: z.string().min(1),\n\t\tAUTH_GOOGLE_SECRET: z.string().min(1),\n\n\t\tAUTH_RESEND_KEY: z.string().min(1),\n\t\tAUTH_RESEND_EMAIL: z.string().email(),\n\n\t\tAWS_ACCESS_KEY_ID: z.string().min(1),\n\t\tAWS_SECRET_ACCESS_KEY: z.string().min(1),\n\t\tAWS_REGION: z.string().min(1),\n\t\tAWS_PUBLIC_BUCKET_NAME: z.string().min(1),\n\n\t\tDATABASE_URL: z.string().url(),\n\n\t\tSTRIPE_SECRET_KEY: z.string().min(1),\n\t\tSTRIPE_WEBHOOK_SECRET: z.string().min(1),\n\t},\n\tclient: {\n\t\tNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: z.string().min(1),\n\t\tNEXT_PUBLIC_SITE_URL: z.string().url(),\n\t},\n\truntimeEnv: {\n\t\tAUTH_SECRET: process.env.AUTH_SECRET,\n\n\t\tAUTH_GITHUB_ID: process.env.AUTH_GITHUB_ID,\n\t\tAUTH_GITHUB_SECRET: process.env.AUTH_GITHUB_SECRET,\n\n\t\tAUTH_GOOGLE_ID: process.env.AUTH_GOOGLE_ID,\n\t\tAUTH_GOOGLE_SECRET: process.env.AUTH_GOOGLE_SECRET,\n\n\t\tAUTH_RESEND_KEY: process.env.AUTH_RESEND_KEY,\n\t\tAUTH_RESEND_EMAIL: process.env.AUTH_RESEND_EMAIL,\n\n\t\tAWS_ACCESS_KEY_ID: process.env.AWS_ACCESS_KEY_ID,\n\t\tAWS_SECRET_ACCESS_KEY: process.env.AWS_SECRET_ACCESS_KEY,\n\t\tAWS_REGION: process.env.AWS_REGION,\n\t\tAWS_PUBLIC_BUCKET_NAME: process.env.AWS_PUBLIC_BUCKET_NAME,\n\n\t\tDATABASE_URL: process.env.DATABASE_URL,\n\n\t\tSTRIPE_SECRET_KEY: process.env.STRIPE_SECRET_KEY,\n\t\tSTRIPE_WEBHOOK_SECRET: process.env.STRIPE_WEBHOOK_SECRET,\n\n\t\tNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY,\n\t\tNEXT_PUBLIC_SITE_URL: process.env.NEXT_PUBLIC_SITE_URL,\n\t},\n})\n",
			"type": "registry:lib"
		},
		{
			"path": "./lib/s3.ts",
			"content": "import { S3Client } from '@aws-sdk/client-s3'\nexport const s3 = new S3Client()\n",
			"type": "registry:lib"
		},
		{
			"path": "./lib/stripe.ts",
			"content": "import { Prisma } from '@prisma/client'\nimport Stripe from 'stripe'\nimport prisma from './db'\nimport { env } from './env'\n\nexport const stripe = new Stripe(env.STRIPE_SECRET_KEY, { apiVersion: '2025-03-31.basil' })\n\nexport type CheckoutResponse = {\n\terrorRedirect?: string\n\tsessionId?: string\n}\n\nconst TRIAL_PERIOD_DAYS = 0\n\nconst toDateTime = (secs: number) => {\n\tconst t = new Date(+0)\n\tt.setSeconds(secs)\n\treturn t\n}\n\nexport const calculateTrialEndUnixTimestamp = (trialPeriodDays: number | null | undefined) => {\n\t// Check if trialPeriodDays is null, undefined, or less than 2 days\n\tif (trialPeriodDays === null || trialPeriodDays === undefined || trialPeriodDays < 2) {\n\t\treturn undefined\n\t}\n\n\tconst currentDate = new Date() // Current date and time\n\tconst trialEnd = new Date(currentDate.getTime() + (trialPeriodDays + 1) * 24 * 60 * 60 * 1000) // Add trial days\n\treturn Math.floor(trialEnd.getTime() / 1000) // Convert to Unix timestamp in seconds\n}\n\nexport const upsertProductRecord = async (product: Stripe.Product) => {\n\tconst productData: Prisma.ProductCreateInput = {\n\t\tid: product.id,\n\t\tactive: product.active,\n\t\tname: product.name,\n\t\tdescription: product.description ?? null,\n\t\timage: product.images?.[0] ?? null,\n\t\tmetadata: product.metadata,\n\t\tfeatures: product.marketing_features.filter((f) => f.name).map((f) => f.name!) ?? [],\n\t}\n\n\tawait prisma.product.upsert({ where: { id: product.id }, create: productData, update: productData })\n\tconsole.log(`Product inserted/updated: ${product.id}`)\n}\n\nexport const upsertPriceRecord = async (price: Stripe.Price) => {\n\tconst priceData: Prisma.PriceCreateInput = {\n\t\tid: price.id,\n\t\tproduct: { connect: { id: typeof price.product === 'string' ? price.product : '' } },\n\t\tactive: price.active,\n\t\tcurrency: price.currency,\n\t\ttype: price.type,\n\t\tunit_amount: price.unit_amount ?? null,\n\t\tinterval: price.recurring?.interval ?? null,\n\t\tinterval_count: price.recurring?.interval_count ?? null,\n\t\ttrial_period_days: price.recurring?.trial_period_days ?? TRIAL_PERIOD_DAYS,\n\t}\n\n\tawait prisma.price.upsert({ where: { id: price.id }, create: priceData, update: priceData })\n\tconsole.log(`Price inserted/updated: ${price.id}`)\n\n\t// TODO: Might have to use this\n\t// if (upsertError?.message.includes('foreign key constraint')) {\n\t// \tif (retryCount < maxRetries) {\n\t// \t\tconsole.log(`Retry attempt ${retryCount + 1} for price ID: ${price.id}`)\n\t// \t\tawait new Promise((resolve) => setTimeout(resolve, 2000))\n\t// \t\tawait upsertPriceRecord(price, retryCount + 1, maxRetries)\n\t// \t} else {\n\t// \t\tthrow new Error(`Price insert/update failed after ${maxRetries} retries: ${upsertError.message}`)\n\t// \t}\n\t// } else if (upsertError) {\n\t// \tthrow new Error(`Price insert/update failed: ${upsertError.message}`)\n\t// } else {\n\t// console.log(`Price inserted/updated: ${price.id}`)\n\t// }\n}\n\nexport const deleteProductRecord = async (product: Stripe.Product) => {\n\tawait prisma.product.delete({ where: { id: product.id } })\n\tconsole.log(`Product deleted: ${product.id}`)\n}\n\nexport const deletePriceRecord = async (price: Stripe.Price) => {\n\tawait prisma.price.delete({ where: { id: price.id } })\n\tconsole.log(`Price deleted: ${price.id}`)\n}\n\nexport const createCustomerInStripe = async (uuid: string, email: string) => {\n\tconst customerData = { metadata: { user_id: uuid }, email }\n\tconst newCustomer = await stripe.customers.create(customerData)\n\tif (!newCustomer) throw new Error('Stripe customer creation failed.')\n\treturn newCustomer.id\n}\n\nexport const createOrRetrieveCustomer = async ({ email, uuid }: { email: string; uuid: string }) => {\n\t// Check if the customer already exists in Supabase\n\tconst existingUser = await prisma.user.findUnique({ where: { id: uuid } })\n\n\t// Retrieve the Stripe customer ID using the Supabase customer ID, with email fallback\n\tlet stripeCustomerId: string | undefined\n\tif (existingUser?.stripe_customer_id) {\n\t\tconst existingStripeCustomer = await stripe.customers.retrieve(existingUser.stripe_customer_id)\n\t\tstripeCustomerId = existingStripeCustomer.id\n\t} else {\n\t\t// If Stripe ID is missing from Supabase, try to retrieve Stripe customer ID by email\n\t\tconst stripeCustomers = await stripe.customers.list({ email: email })\n\t\tstripeCustomerId = stripeCustomers.data.length ? stripeCustomers.data[0].id : undefined\n\t}\n\n\t// If still no stripeCustomerId, create a new customer in Stripe\n\tconst stripeIdToInsert = stripeCustomerId ? stripeCustomerId : await createCustomerInStripe(uuid, email)\n\tif (!stripeIdToInsert) throw new Error('Stripe customer creation failed.')\n\n\tif (existingUser && stripeCustomerId) {\n\t\t// If Supabase has a record but doesn't match Stripe, update Supabase record\n\t\tif (existingUser.stripe_customer_id !== stripeCustomerId) {\n\t\t\tawait prisma.user.update({ where: { id: uuid }, data: { stripe_customer_id: stripeCustomerId } })\n\t\t\tconsole.warn(`Supabase customer record mismatched Stripe ID. Supabase record updated.`)\n\t\t}\n\t\t// If Supabase has a record and matches Stripe, return Stripe customer ID\n\t\treturn stripeCustomerId\n\t} else {\n\t\tconsole.warn(`Supabase customer record was missing. A new record was created.`)\n\t\tconst upsertedStripeCustomer = await prisma.user.update({ where: { id: uuid }, data: { stripe_customer_id: stripeIdToInsert } })\n\t\treturn upsertedStripeCustomer.stripe_customer_id\n\t}\n}\n\n/**\n * Copies the billing details from the payment method to the customer object.\n */\n\nconst copyBillingDetailsToCustomer = async (uuid: string, payment_method: Stripe.PaymentMethod) => {\n\t//Todo: check this assertion\n\tconst customer = payment_method.customer as string\n\tconst { name, phone, address } = payment_method.billing_details\n\tif (!name || !phone || !address) return\n\n\t// @ts-expect-error There's an issue with address' type\n\tawait stripe.customers.update(customer, { name, phone, address })\n\tawait prisma.user.update({\n\t\twhere: { id: uuid },\n\t\tdata: {\n\t\t\tbilling_address: { ...address } as Prisma.InputJsonValue,\n\t\t\tpayment_method: { ...payment_method[payment_method.type] } as Prisma.InputJsonValue,\n\t\t},\n\t})\n}\n\nexport const manageSubscriptionStatusChange = async (subscriptionId: string, customerId: string, createAction = false) => {\n\t// Get customer's UUID from mapping table.\n\tconst customerData = await prisma.user.findUnique({ where: { stripe_customer_id: customerId } })\n\tif (!customerData) throw new Error(`Customer not found: ${customerId}`)\n\n\tconst subscription = await stripe.subscriptions.retrieve(subscriptionId, { expand: ['default_payment_method'] })\n\t// Upsert the latest status of the subscription object.\n\tconst subscriptionData: Prisma.SubscriptionCreateInput = {\n\t\tid: subscription.id,\n\t\tuser: { connect: { id: customerData.id } },\n\t\tmetadata: subscription.metadata,\n\t\tstatus: subscription.status,\n\t\tprice: { connect: { id: subscription.items.data[0].price.id } },\n\t\tcancel_at_period_end: subscription.cancel_at_period_end,\n\t\tcancel_at: subscription.cancel_at ? toDateTime(subscription.cancel_at).toISOString() : null,\n\t\tcanceled_at: subscription.canceled_at ? toDateTime(subscription.canceled_at).toISOString() : null,\n\t\t// TODO: Do these exist?\n\t\t// current_period_start: toDateTime(subscription.current_period_start).toISOString(),\n\t\t// current_period_end: toDateTime(subscription.current_period_end).toISOString(),\n\t\tcreated: toDateTime(subscription.created).toISOString(),\n\t\tended_at: subscription.ended_at ? toDateTime(subscription.ended_at).toISOString() : null,\n\t\ttrial_start: subscription.trial_start ? toDateTime(subscription.trial_start).toISOString() : null,\n\t\ttrial_end: subscription.trial_end ? toDateTime(subscription.trial_end).toISOString() : null,\n\t}\n\n\tawait prisma.subscription.upsert({ where: { id: subscription.id }, create: subscriptionData, update: subscriptionData })\n\tconsole.log(`Inserted/updated subscription [${subscription.id}] for user [${customerData.id}]`)\n\n\t// For a new subscription copy the billing details to the customer object.\n\t// NOTE: This is a costly operation and should happen at the very end.\n\tif (createAction && subscription.default_payment_method)\n\t\tawait copyBillingDetailsToCustomer(customerData.id, subscription.default_payment_method as Stripe.PaymentMethod)\n}\n",
			"type": "registry:lib"
		},
		{
			"path": "./lib/utils.ts",
			"content": "import { Prisma } from '@prisma/client'\nimport { clsx, type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport type AuthUser = Prisma.UserGetPayload<{ include: { subscriptions: { include: { price: { include: { product: true } } } } } }>\n\nexport function cn(...inputs: ClassValue[]) {\n\treturn twMerge(clsx(inputs))\n}\n\nexport const getURL = (path: string = '') => {\n\tlet url =\n\t\tprocess?.env?.NEXT_PUBLIC_SITE_URL && process.env.NEXT_PUBLIC_SITE_URL.trim() !== ''\n\t\t\t? process.env.NEXT_PUBLIC_SITE_URL\n\t\t\t: process?.env?.NEXT_PUBLIC_VERCEL_URL && process.env.NEXT_PUBLIC_VERCEL_URL.trim() !== ''\n\t\t\t? process.env.NEXT_PUBLIC_VERCEL_URL\n\t\t\t: 'http://localhost:3000/'\n\n\t// Trim the URL and remove trailing slash if exists.\n\turl = url.replace(/\\/+$/, '')\n\t// Make sure to include `https://` when not localhost.\n\turl = url.includes('http') ? url : `https://${url}`\n\t// Ensure path starts without a slash to avoid double slashes in the final URL.\n\tpath = path.replace(/^\\/+/, '')\n\n\t// Concatenate the URL and the path.\n\treturn path ? `${url}/${path}` : url\n}\n\nconst toastKeyMap = {\n\tblank: 'message',\n\terror: 'error',\n\tsuccess: 'success',\n} as const\n\nconst getToastRedirect = (path: string, type: keyof typeof toastKeyMap, message: string, arbitraryParams: string = '') => {\n\tconst key = toastKeyMap[type]\n\n\tlet redirectPath = `${path}?${key}=${encodeURIComponent(message)}`\n\tif (arbitraryParams) redirectPath += `&${arbitraryParams}`\n\n\treturn redirectPath\n}\n\nexport const getErrorRedirect = (path: string, message: string = '', arbitraryParams: string = '') =>\n\tgetToastRedirect(path, 'error', message, arbitraryParams)\n\nexport const getSuccessRedirect = (path: string, message: string = '', arbitraryParams: string = '') =>\n\tgetToastRedirect(path, 'success', message, arbitraryParams)\n",
			"type": "registry:lib"
		},
		{
			"path": "./middleware.ts",
			"content": "import NextAuth from 'next-auth'\nimport { authConfig } from './lib/auth'\n\nexport default NextAuth(authConfig).auth\nexport const config = {\n\tmatcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$).*)'],\n}\n",
			"type": "registry:example",
			"target": "~/middleware.ts"
		},
		{
			"path": "./prisma/schema/auth.prisma",
			"content": "model User {\n    id        String   @id @default(cuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n\n    name  String?\n    email String  @unique\n    image String?\n\n    stripe_customer_id String? @unique\n    billing_address    Json?\n    payment_method     Json?\n\n    emailVerified DateTime?\n    passwordHash  String?\n\n    subscriptions Subscription[]\n\n    accounts      Account[]\n    sessions      Session[]\n    // Optional for WebAuthn support\n    Authenticator Authenticator[]\n}\n\nmodel Account {\n    userId            String\n    type              String\n    provider          String\n    providerAccountId String\n    refresh_token     String?\n    access_token      String?\n    expires_at        Int?\n    token_type        String?\n    scope             String?\n    id_token          String?\n    session_state     String?\n    createdAt         DateTime @default(now())\n    updatedAt         DateTime @updatedAt\n    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n    @@id([provider, providerAccountId])\n}\n\nmodel Session {\n    sessionToken String   @unique\n    userId       String\n    expires      DateTime\n    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n    createdAt    DateTime @default(now())\n    updatedAt    DateTime @updatedAt\n}\n\nmodel VerificationToken {\n    identifier String\n    token      String\n    expires    DateTime\n\n    @@id([identifier, token])\n}\n\n// Optional for WebAuthn support\nmodel Authenticator {\n    credentialID         String  @unique\n    userId               String\n    providerAccountId    String\n    credentialPublicKey  String\n    counter              Int\n    credentialDeviceType String\n    credentialBackedUp   Boolean\n    transports           String?\n    user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n    @@id([userId, credentialID])\n}\n",
			"type": "registry:example",
			"target": "~/prisma/schema/auth.prisma"
		},
		{
			"path": "./prisma/schema/migrations/20250408144905_init_auth/migration.sql",
			"content": "-- CreateTable\nCREATE TABLE \"User\" (\n    \"id\" TEXT NOT NULL,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL,\n    \"name\" TEXT,\n    \"email\" TEXT NOT NULL,\n    \"image\" TEXT,\n    \"emailVerified\" TIMESTAMP(3),\n    \"passwordHash\" TEXT,\n\n    CONSTRAINT \"User_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"Account\" (\n    \"userId\" TEXT NOT NULL,\n    \"type\" TEXT NOT NULL,\n    \"provider\" TEXT NOT NULL,\n    \"providerAccountId\" TEXT NOT NULL,\n    \"refresh_token\" TEXT,\n    \"access_token\" TEXT,\n    \"expires_at\" INTEGER,\n    \"token_type\" TEXT,\n    \"scope\" TEXT,\n    \"id_token\" TEXT,\n    \"session_state\" TEXT,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL,\n\n    CONSTRAINT \"Account_pkey\" PRIMARY KEY (\"provider\",\"providerAccountId\")\n);\n\n-- CreateTable\nCREATE TABLE \"Session\" (\n    \"sessionToken\" TEXT NOT NULL,\n    \"userId\" TEXT NOT NULL,\n    \"expires\" TIMESTAMP(3) NOT NULL,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL\n);\n\n-- CreateTable\nCREATE TABLE \"VerificationToken\" (\n    \"identifier\" TEXT NOT NULL,\n    \"token\" TEXT NOT NULL,\n    \"expires\" TIMESTAMP(3) NOT NULL,\n\n    CONSTRAINT \"VerificationToken_pkey\" PRIMARY KEY (\"identifier\",\"token\")\n);\n\n-- CreateTable\nCREATE TABLE \"Authenticator\" (\n    \"credentialID\" TEXT NOT NULL,\n    \"userId\" TEXT NOT NULL,\n    \"providerAccountId\" TEXT NOT NULL,\n    \"credentialPublicKey\" TEXT NOT NULL,\n    \"counter\" INTEGER NOT NULL,\n    \"credentialDeviceType\" TEXT NOT NULL,\n    \"credentialBackedUp\" BOOLEAN NOT NULL,\n    \"transports\" TEXT,\n\n    CONSTRAINT \"Authenticator_pkey\" PRIMARY KEY (\"userId\",\"credentialID\")\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"User_email_key\" ON \"User\"(\"email\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Session_sessionToken_key\" ON \"Session\"(\"sessionToken\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Authenticator_credentialID_key\" ON \"Authenticator\"(\"credentialID\");\n\n-- AddForeignKey\nALTER TABLE \"Account\" ADD CONSTRAINT \"Account_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"Session\" ADD CONSTRAINT \"Session_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"Authenticator\" ADD CONSTRAINT \"Authenticator_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n",
			"type": "registry:example",
			"target": "~/prisma/schema/migrations/20250408144905_init_auth/migration.sql"
		},
		{
			"path": "./prisma/schema/migrations/20250411132658_add_stripe/migration.sql",
			"content": "/*\n  Warnings:\n\n  - A unique constraint covering the columns `[stripe_customer_id]` on the table `User` will be added. If there are existing duplicate values, this will fail.\n\n*/\n-- CreateEnum\nCREATE TYPE \"PriceType\" AS ENUM ('one_time', 'recurring');\n\n-- CreateEnum\nCREATE TYPE \"PriceInterval\" AS ENUM ('day', 'week', 'month', 'year');\n\n-- CreateEnum\nCREATE TYPE \"SubscriptionStatus\" AS ENUM ('trialing', 'active', 'canceled', 'incomplete', 'incomplete_expired', 'past_due', 'unpaid', 'paused');\n\n-- AlterTable\nALTER TABLE \"User\" ADD COLUMN     \"billing_address\" JSONB,\nADD COLUMN     \"payment_method\" JSONB,\nADD COLUMN     \"stripe_customer_id\" TEXT;\n\n-- CreateTable\nCREATE TABLE \"Price\" (\n    \"id\" TEXT NOT NULL,\n    \"created_at\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updated_at\" TIMESTAMP(3) NOT NULL,\n    \"product_id\" TEXT,\n    \"active\" BOOLEAN,\n    \"unit_amount\" BIGINT,\n    \"currency\" TEXT,\n    \"type\" \"PriceType\",\n    \"interval\" \"PriceInterval\",\n    \"interval_count\" INTEGER,\n    \"trial_period_days\" INTEGER,\n\n    CONSTRAINT \"Price_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"Product\" (\n    \"id\" TEXT NOT NULL,\n    \"created_at\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updated_at\" TIMESTAMP(3) NOT NULL,\n    \"active\" BOOLEAN,\n    \"name\" TEXT,\n    \"description\" TEXT,\n    \"image\" TEXT,\n    \"metadata\" JSONB,\n\n    CONSTRAINT \"Product_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"Subscription\" (\n    \"id\" TEXT NOT NULL,\n    \"created_at\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updated_at\" TIMESTAMP(3) NOT NULL,\n    \"user_id\" TEXT NOT NULL,\n    \"price_id\" TEXT,\n    \"status\" \"SubscriptionStatus\",\n    \"metadata\" JSONB,\n    \"cancel_at_period_end\" BOOLEAN,\n    \"created\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"current_period_start\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"current_period_end\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"ended_at\" TIMESTAMP(3),\n    \"cancel_at\" TIMESTAMP(3),\n    \"canceled_at\" TIMESTAMP(3),\n    \"trial_start\" TIMESTAMP(3),\n    \"trial_end\" TIMESTAMP(3),\n\n    CONSTRAINT \"Subscription_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"User_stripe_customer_id_key\" ON \"User\"(\"stripe_customer_id\");\n\n-- AddForeignKey\nALTER TABLE \"Price\" ADD CONSTRAINT \"Price_product_id_fkey\" FOREIGN KEY (\"product_id\") REFERENCES \"Product\"(\"id\") ON DELETE SET NULL ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"Subscription\" ADD CONSTRAINT \"Subscription_user_id_fkey\" FOREIGN KEY (\"user_id\") REFERENCES \"User\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"Subscription\" ADD CONSTRAINT \"Subscription_price_id_fkey\" FOREIGN KEY (\"price_id\") REFERENCES \"Price\"(\"id\") ON DELETE SET NULL ON UPDATE CASCADE;\n",
			"type": "registry:example",
			"target": "~/prisma/schema/migrations/20250411132658_add_stripe/migration.sql"
		},
		{
			"path": "./prisma/schema/migrations/20250411134046_add_features_to_product/migration.sql",
			"content": "-- AlterTable\nALTER TABLE \"Product\" ADD COLUMN     \"features\" TEXT[];\n",
			"type": "registry:example",
			"target": "~/prisma/schema/migrations/20250411134046_add_features_to_product/migration.sql"
		},
		{
			"path": "./prisma/schema/migrations/migration_lock.toml",
			"content": "# Please do not edit this file manually\n# It should be added in your version-control system (e.g., Git)\nprovider = \"postgresql\"\n",
			"type": "registry:example",
			"target": "~/prisma/schema/migrations/migration_lock.toml"
		},
		{
			"path": "./prisma/schema/schema.prisma",
			"content": "datasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n",
			"type": "registry:example",
			"target": "~/prisma/schema/schema.prisma"
		},
		{
			"path": "./prisma/schema/stripe.prisma",
			"content": "enum PriceType {\n    one_time\n    recurring\n}\n\nenum PriceInterval {\n    day\n    week\n    month\n    year\n}\n\nmodel Price {\n    id         String   @id\n    created_at DateTime @default(now())\n    updated_at DateTime @updatedAt\n\n    product_id String?\n    product    Product? @relation(fields: [product_id], references: [id])\n\n    active            Boolean?\n    unit_amount       BigInt?\n    currency          String?\n    type              PriceType?\n    interval          PriceInterval?\n    interval_count    Int?\n    trial_period_days Int?\n\n    subscriptions Subscription[]\n}\n\nmodel Product {\n    id         String   @id\n    created_at DateTime @default(now())\n    updated_at DateTime @updatedAt\n\n    active      Boolean?\n    name        String?\n    description String?\n    image       String?\n    metadata    Json?\n    features    String[]\n\n    prices Price[]\n}\n\nenum SubscriptionStatus {\n    trialing\n    active\n    canceled\n    incomplete\n    incomplete_expired\n    past_due\n    unpaid\n    paused\n}\n\nmodel Subscription {\n    id         String   @id\n    created_at DateTime @default(now())\n    updated_at DateTime @updatedAt\n\n    user_id  String\n    user     User    @relation(fields: [user_id], references: [id], onDelete: Cascade)\n    price_id String?\n    price    Price?  @relation(fields: [price_id], references: [id])\n\n    status               SubscriptionStatus?\n    metadata             Json?\n    cancel_at_period_end Boolean?\n    created              DateTime            @default(now())\n    current_period_start DateTime            @default(now())\n    current_period_end   DateTime            @default(now())\n    ended_at             DateTime?\n    cancel_at            DateTime?\n    canceled_at          DateTime?\n    trial_start          DateTime?\n    trial_end            DateTime?\n}\n",
			"type": "registry:example",
			"target": "~/prisma/schema/stripe.prisma"
		},
		{
			"path": "./scripts/config-db.ts",
			"content": "import { readFileSync, writeFileSync } from 'fs'\nimport { join } from 'path'\n\nexport function main() {\n\ttry {\n\t\t// Read the current package.json\n\t\tconst packageJsonPath = join(process.cwd(), 'package.json')\n\t\tconst packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf-8'))\n\n\t\t// Add or update the prisma configuration\n\t\tpackageJson.prisma = { schema: './prisma/schema' }\n\n\t\t// Add or update the postinstall script\n\t\tpackageJson.scripts = {\n\t\t\t...packageJson.scripts,\n\t\t\tpostinstall: 'npx prisma generate',\n\t\t}\n\n\t\t// Write the updated package.json back to the file\n\t\twriteFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2))\n\n\t\tconsole.log('Successfully added Prisma configuration and postinstall script to package.json')\n\t} catch (error) {\n\t\tconsole.error('Error updating package.json:', error)\n\t\tprocess.exit(1)\n\t}\n}\n\nmain()\n",
			"type": "registry:example",
			"target": "~/scripts/config-db.ts"
		},
		{
			"path": "./scripts/config-files.ts",
			"content": "import { s3 } from '@/lib/s3'\nimport { CreateBucketCommand, PutBucketPolicyCommand, PutPublicAccessBlockCommand } from '@aws-sdk/client-s3'\nimport dotenv from 'dotenv'\n\ndotenv.config()\nif (\n\t!process.env.AWS_ACCESS_KEY_ID ||\n\t!process.env.AWS_SECRET_ACCESS_KEY ||\n\t!process.env.AWS_REGION ||\n\t!process.env.AWS_PUBLIC_BUCKET_NAME ||\n\t!process.env.NEXT_PUBLIC_SITE_URL\n)\n\tthrow new Error('Missing environment variables')\n\nexport async function main() {\n\tconst publicBucket = process.env.AWS_PUBLIC_BUCKET_NAME!\n\n\t// await s3.send(new DeleteBucketCommand({ Bucket: publicBucket }))\n\n\tawait s3.send(new CreateBucketCommand({ Bucket: publicBucket }))\n\n\tawait s3.send(\n\t\tnew PutPublicAccessBlockCommand({\n\t\t\tBucket: publicBucket,\n\t\t\tPublicAccessBlockConfiguration: {\n\t\t\t\tBlockPublicAcls: false,\n\t\t\t\tIgnorePublicAcls: false,\n\t\t\t\tBlockPublicPolicy: false,\n\t\t\t\tRestrictPublicBuckets: false,\n\t\t\t},\n\t\t})\n\t)\n\n\tawait s3.send(\n\t\tnew PutBucketPolicyCommand({\n\t\t\tBucket: publicBucket,\n\t\t\tPolicy: JSON.stringify({\n\t\t\t\tVersion: '2012-10-17',\n\t\t\t\tStatement: [\n\t\t\t\t\t{\n\t\t\t\t\t\tSid: 'PublicReadAvatars',\n\t\t\t\t\t\tEffect: 'Allow',\n\t\t\t\t\t\tPrincipal: '*',\n\t\t\t\t\t\tAction: 's3:GetObject',\n\t\t\t\t\t\tResource: `arn:aws:s3:::${publicBucket}/*`,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t})\n\t)\n}\n\nmain()\n",
			"type": "registry:example",
			"target": "~/scripts/config-files.ts"
		},
		{
			"path": "./scripts/config-payments.ts",
			"content": "import { stripe } from '@/lib/stripe'\nimport { readFileSync, writeFileSync } from 'fs'\nimport { join } from 'path'\nimport Stripe from 'stripe'\n\n// Make sure you've set your environment variables and have a webhooks endpoint set up\nexport async function generateStripeData() {\n\tconst MOCK_PRODUCTS = [\n\t\t{\n\t\t\tname: 'Basic',\n\t\t\tfeatures: ['Feature 1', 'Feature 2', 'Feature 3'],\n\t\t\tprices: [\n\t\t\t\t{ amount: 999, interval: 'month' },\n\t\t\t\t{ amount: 9900, interval: 'year' },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tname: 'Pro',\n\t\t\tfeatures: ['Feature 4', 'Feature 5', 'Feature 6'],\n\t\t\tprices: [\n\t\t\t\t{ amount: 1999, interval: 'month' },\n\t\t\t\t{ amount: 19900, interval: 'year' },\n\t\t\t],\n\t\t},\n\t]\n\n\t// Deactivate all products and prices\n\t// const products = await stripe.products.list()\n\t// await Promise.all(products.data.map(async (product) => await stripe.products.update(product.id, { active: false })))\n\n\t// const prices = await stripe.prices.list()\n\t// await Promise.all(prices.data.map(async (price) => await stripe.prices.update(price.id, { active: false })))\n\n\tfor (const prod of MOCK_PRODUCTS) {\n\t\tconst product = await stripe.products.create({\n\t\t\tname: prod.name,\n\t\t\tmarketing_features: prod.features.map((feature) => ({ name: feature })),\n\t\t})\n\n\t\tconsole.log(`Product ${prod.name} created: ${product.id}`)\n\n\t\tfor (const p of prod.prices) {\n\t\t\tconst price = await stripe.prices.create({\n\t\t\t\tproduct: product.id,\n\t\t\t\tcurrency: 'usd',\n\t\t\t\tunit_amount: p.amount,\n\t\t\t\trecurring: { interval: p.interval as Stripe.Price.Recurring.Interval },\n\t\t\t})\n\n\t\t\tconsole.log(`Price ${p.amount} created: ${price.id}`)\n\t\t}\n\t}\n}\n\nexport function main() {\n\ttry {\n\t\t// Read the current package.json\n\t\tconst packageJsonPath = join(process.cwd(), 'package.json')\n\t\tconst packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf-8'))\n\n\t\t// Add or update the stripe:listen script\n\t\tpackageJson.scripts = {\n\t\t\t...packageJson.scripts,\n\t\t\t'stripe:listen': 'stripe listen --forward-to http://localhost:3000/api/webhooks/stripe',\n\t\t}\n\n\t\t// Write the updated package.json back to the file\n\t\twriteFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2))\n\n\t\tconsole.log('Successfully added scripts to package.json')\n\t} catch (error) {\n\t\tconsole.error('Error updating package.json:', error)\n\t\tprocess.exit(1)\n\t}\n}\n\n// generateStripeData()\nmain()\n",
			"type": "registry:example",
			"target": "~/scripts/config-payments.ts"
		},
		{
			"path": "./validators/auth.ts",
			"content": "import { z } from 'zod'\n\nexport const loginSchema = z.object({\n\tcallbackUrl: z.string().min(1),\n\temail: z.string({ required_error: 'Email is required' }).min(1, { message: 'Email is required' }).email({ message: 'Invalid email' }),\n\tpassword: z.string({ required_error: 'Password is required' }).min(1, { message: 'Password is required' }),\n})\n\nexport const oauthSchema = z.object({\n\tcallbackUrl: z.string().min(1).default('/'),\n})\n\nexport const registerSchema = z\n\t.object({\n\t\tfirstName: z.string({ required_error: 'First name is required' }).min(1, { message: 'First name is required' }),\n\t\tlastName: z.string({ required_error: 'Last name is required' }).min(1, { message: 'Last name is required' }),\n\t\temail: z\n\t\t\t.string({ required_error: 'Email is required' })\n\t\t\t.min(1, { message: 'Email is required' })\n\t\t\t.email({ message: 'Invalid email' }),\n\t\tpassword: z.string({ required_error: 'Password is required' }).min(8, { message: 'Password must be at least 8 characters long' }),\n\t\tconfirmPassword: z.string({ required_error: 'Password confirmation is required' }),\n\t\tterms: z.boolean({ required_error: 'You must agree to the terms of service' }),\n\t})\n\t.refine(({ password, confirmPassword }) => password === confirmPassword, {\n\t\tmessage: 'Passwords do not match',\n\t\tpath: ['confirmPassword'],\n\t})\n\nexport const verifyEmailSchema = z.object({\n\temail: z.string({ required_error: 'Email is required' }).min(1, { message: 'Email is required' }).email({ message: 'Invalid email' }),\n})\n",
			"type": "registry:example",
			"target": "~/validators/auth.ts"
		},
		{
			"path": "./validators/user.ts",
			"content": "import { z } from 'zod'\n\nexport const updateAvatarSchema = z.object({\n\tfile: z\n\t\t.instanceof(File)\n\t\t.refine((f) => f.size > 0, 'File is required')\n\t\t.refine((f) => f.size <= 1024 * 1024, 'File must be 1MB or less'),\n})\n\nexport const updateUserSchema = z\n\t.object({\n\t\tname: z.string({ required_error: 'Name is required' }).min(1, { message: 'Name is required' }),\n\t\tpassword: z.string({ required_error: 'Password is required' }),\n\t\tconfirmPassword: z.string({ required_error: 'Confirm password is required' }),\n\t})\n\t.refine((arg) => (arg.password || arg.confirmPassword ? arg.password === arg.confirmPassword : true), {\n\t\tmessage: 'Passwords do not match',\n\t\tpath: ['confirmPassword'],\n\t})\n\t.refine((arg) => (arg.password || arg.confirmPassword ? arg.password.length >= 8 : true), {\n\t\tmessage: 'Password must be at least 8 characters long',\n\t\tpath: ['password'],\n\t})\n",
			"type": "registry:example",
			"target": "~/validators/user.ts"
		}
	],
	"tailwind": {},
	"cssVars": {},
	"meta": {},
	"docs": "Remember to run `npx tsx scripts/config-db.ts && npx tsx scripts/config-files.ts && npx prisma generate && npx prisma migrate dev && npx tsx scripts/config-payments.ts` to configure the database, S3 storage, and Stripe."
}
